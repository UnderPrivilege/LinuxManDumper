{
	"abort": {
			"descr":	"Stops a program abnormally.",
			"name": "abort",
			"params": [],
			"path": "stdlib.h",
			"syntax": "void abort(void);",
			"type": "Linux API"
	},
	"abs": {
			"descr":	"Calculates the absolute value of an integer argument n.",
			"name": "abs",
			"params": [],
			"path": "stdlib.h",
			"syntax": "int abs(int n);",
			"type": "Linux API"
	},
	"acos": {
			"descr":	"Calculates the arc cosine of x.",
			"name": "acos",
			"params": [],
			"path": "math.h",
			"syntax": "double acos(double x);",
			"type": "Linux API"
	},
	"asctime": {
			"descr":	"Converts the time that is stored as a structure to a character string.",
			"name": "asctime",
			"params": [],
			"path": "time.h",
			"syntax": "char *asctime(const struct tm *time);",
			"type": "Linux API"
	},
	"asctime_r": {
			"descr":	"Converts tm that is stored as a structure to a character string. (Restartable version of asctime.)",
			"name": "asctime_r",
			"params": [],
			"path": "time.h",
			"syntax": "char *asctime_r (const struct tm *tm, char *buf);",
			"type": "Linux API"
	},
	"asin": {
			"descr":	"Calculates the arc sine of x.",
			"name": "asin",
			"params": [],
			"path": "math.h",
			"syntax": "double asin(double x);",
			"type": "Linux API"
	},
	"assert": {
			"descr":	"Prints a diagnostic message and ends the program if the expression is false.",
			"name": "assert",
			"params": [],
			"path": "assert.h",
			"syntax": "void assert(int expression);",
			"type": "Linux API"
	},
	"atan": {
			"descr":	"Calculates the arc tangent of x.",
			"name": "atan",
			"params": [],
			"path": "math.h",
			"syntax": "double atan(double x);",
			"type": "Linux API"
	},
	"atan2": {
			"descr":	"Calculates the arc tangent of y/x.",
			"name": "atan2",
			"params": [],
			"path": "math.h",
			"syntax": "double atan2(double y, double x);",
			"type": "Linux API"
	},
	"atexit": {
			"descr":	"Registers a function to be called at normal termination.",
			"name": "atexit",
			"params": [],
			"path": "stdlib.h",
			"syntax": "int atexit(void (*func)(void));",
			"type": "Linux API"
	},
	"atof": {
			"descr":	"Converts string to a double-precision floating-point value.",
			"name": "atof",
			"params": [],
			"path": "stdlib.h",
			"syntax": "double atof(const char *string);",
			"type": "Linux API"
	},
	"atoi": {
			"descr":	"Converts string to an integer.",
			"name": "atoi",
			"params": [],
			"path": "stdlib.h",
			"syntax": "int atoi(const char *string);",
			"type": "Linux API"
	},
	"atol": {
			"descr":	"Converts string to a long integer.",
			"name": "atol",
			"params": [],
			"path": "stdlib.h",
			"syntax": "long int atol(const char *string);",
			"type": "Linux API"
	},
	"bsearch": {
			"descr":	"Performs a binary search on an array of num elements, each of size bytes. The array must be sorted in ascending order by the function pointed to by compare.",
			"name": "bsearch",
			"params": [],
			"path": "stdlib.h",
			"syntax": "void *bsearch(const void *key, const void *base, size_t num, size_t size, int (*compare) (const void *element1, const void *element2));",
			"type": "Linux API"
	},
	"btowc": {
			"descr":	"Determines whether c constitues a valid multibyte character in the initial shift state.",
			"name": "btowc",
			"params": [],
			"path": " stdio.h wchar.h ",
			"syntax": "wint_t btowc(int c);",
			"type": "Linux API"
	},
	"calloc": {
			"descr":	"Reserves storage space for an array of num elements, each of size size, and initializes the values of all elements to 0.",
			"name": "calloc",
			"params": [],
			"path": "stdlib.h",
			"syntax": "void *calloc(size_t num, size_t size);",
			"type": "Linux API"
	},
	"catclose6": {
			"descr":	"Closes a previously opened message catalog.",
			"name": "catclose6",
			"params": [],
			"path": "nl_types.h",
			"syntax": "int catclose (nl_catd catd);",
			"type": "Linux API"
	},
	"catgets6": {
			"descr":	"Retrieves a message from an open message catalog.",
			"name": "catgets6",
			"params": [],
			"path": "nl_types.h",
			"syntax": "char *catgets(nl_catd catd, int set_id, int msg_id, const char *s);",
			"type": "Linux API"
	},
	"catopen6": {
			"descr":	"Opens a message catalog, which must be done before a message can be retrieved.",
			"name": "catopen6",
			"params": [],
			"path": "nl_types.h",
			"syntax": "nl_catd catopen (const char *name, int oflag);",
			"type": "Linux API"
	},
	"ceil": {
			"descr":	"Calculates the double value representing the smallest integer that is greater than or equal to x.",
			"name": "ceil",
			"params": [],
			"path": "math.h",
			"syntax": "double ceil(double x);",
			"type": "Linux API"
	},
	"clearerr": {
			"descr":	"Resets the error indicators and the end-of-file indicator for stream.",
			"name": "clearerr",
			"params": [],
			"path": "stdio.h",
			"syntax": "void clearerr(FILE *stream);",
			"type": "Linux API"
	},
	"clock": {
			"descr":	"Returns the processor time that has elapsed since the job was started.",
			"name": "clock",
			"params": [],
			"path": "time.h",
			"syntax": "clock_t clock(void);",
			"type": "Linux API"
	},
	"cos": {
			"descr":	"Calculates the cosine of x.",
			"name": "cos",
			"params": [],
			"path": "math.h",
			"syntax": "double cos(double x);",
			"type": "Linux API"
	},
	"cosh": {
			"descr":	"Calculates the hyperbolic cosine of x.",
			"name": "cosh",
			"params": [],
			"path": "math.h",
			"syntax": "double cosh(double x);",
			"type": "Linux API"
	},
	"ctime": {
			"descr":	"Converts time to a character string.",
			"name": "ctime",
			"params": [],
			"path": "time.h",
			"syntax": "char *ctime(const time_t *time);",
			"type": "Linux API"
	},
	"ctime64": {
			"descr":	"Converts time to a character string.",
			"name": "ctime64",
			"params": [],
			"path": "time.h",
			"syntax": "char *ctime64(const time64_t *time);",
			"type": "Linux API"
	},
	"ctime_r": {
			"descr":	"Converts time to a character string. (Restartable version of ctime.)",
			"name": "ctime_r",
			"params": [],
			"path": "time.h",
			"syntax": "char *ctime_r(const time_t *time, char *buf);",
			"type": "Linux API"
	},
	"ctime64_r": {
			"descr":	"Converts time to a character string. (Restartable version of ctime64.)",
			"name": "ctime64_r",
			"params": [],
			"path": "time.h",
			"syntax": "char *ctime64_r(const time64_t *time, char *buf);",
			"type": "Linux API"
	},
	"difftime": {
			"descr":	"Computes the difference between time2 and time1.",
			"name": "difftime",
			"params": [],
			"path": "time.h",
			"syntax": "double difftime(time_t time2, time_t time1);",
			"type": "Linux API"
	},
	"difftime64": {
			"descr":	"Computes the difference between time2 and time1.",
			"name": "difftime64",
			"params": [],
			"path": "time.h",
			"syntax": "double difftime64(time64_t time2, time64_t time1);",
			"type": "Linux API"
	},
	"div": {
			"descr":	"Calculates the quotient and remainder of the division of numerator by denominator.",
			"name": "div",
			"params": [],
			"path": "stdlib.h",
			"syntax": "div_t div(int numerator, int denominator);",
			"type": "Linux API"
	},
	"erf": {
			"descr":	"Calculates the error function of x.",
			"name": "erf",
			"params": [],
			"path": "math.h",
			"syntax": "double erf(double x);",
			"type": "Linux API"
	},
	"erfc": {
			"descr":	"Calculates the error function for large values of x.",
			"name": "erfc",
			"params": [],
			"path": "math.h",
			"syntax": "double erfc(double x);",
			"type": "Linux API"
	},
	"exit": {
			"descr":	"Ends a program normally.",
			"name": "exit",
			"params": [],
			"path": "stdlib.h",
			"syntax": "void exit(int status);",
			"type": "Linux API"
	},
	"exp": {
			"descr":	"Calculates the exponential function of a floating-point argument x.",
			"name": "exp",
			"params": [],
			"path": "math.h",
			"syntax": "double exp(double x);",
			"type": "Linux API"
	},
	"fabs": {
			"descr":	"Calculates the absolute value of a floating-point argument x.",
			"name": "fabs",
			"params": [],
			"path": "math.h",
			"syntax": "double fabs(double x);",
			"type": "Linux API"
	},
	"fclose": {
			"descr":	"Closes the specified stream.",
			"name": "fclose",
			"params": [],
			"path": "stdio.h",
			"syntax": "int fclose(FILE *stream);",
			"type": "Linux API"
	},
	"fdopen5": {
			"descr":	"Associates an input or output stream with the file identified by handle.",
			"name": "fdopen5",
			"params": [],
			"path": "stdio.h",
			"syntax": "FILE *fdopen(int handle, const char *type);",
			"type": "Linux API"
	},
	"feof": {
			"descr":	"Tests whether the end-of-file flag is set for a given stream.",
			"name": "feof",
			"params": [],
			"path": "stdio.h",
			"syntax": "int feof(FILE *stream);",
			"type": "Linux API"
	},
	"ferror": {
			"descr":	"Tests for an error indicator in reading from or writing to stream.",
			"name": "ferror",
			"params": [],
			"path": "stdio.h",
			"syntax": "int ferror(FILE *stream);",
			"type": "Linux API"
	},
	"fflush1": {
			"descr":	"Writes the contents of the buffer associated with the output stream.",
			"name": "fflush1",
			"params": [],
			"path": "stdio.h",
			"syntax": "int fflush(FILE *stream);",
			"type": "Linux API"
	},
	"fgetc1": {
			"descr":	"Reads a single unsigned character from the input stream.",
			"name": "fgetc1",
			"params": [],
			"path": "stdio.h",
			"syntax": "int fgetc(FILE *stream);",
			"type": "Linux API"
	},
	"fgetpos1": {
			"descr":	"Stores the current position of the file pointer associated with stream into the object pointed to by pos.",
			"name": "fgetpos1",
			"params": [],
			"path": "stdio.h",
			"syntax": "int fgetpos(FILE *stream, fpos_t *pos);",
			"type": "Linux API"
	},
	"fgets1": {
			"descr":	"Reads a string from the input stream.",
			"name": "fgets1",
			"params": [],
			"path": "stdio.h",
			"syntax": "char *fgets(char *string, int n, FILE *stream);",
			"type": "Linux API"
	},
	"fgetwc6": {
			"descr":	"Reads the next multibyte character from the input stream pointed to by stream.",
			"name": "fgetwc6",
			"params": [],
			"path": " stdio.h wchar.h ",
			"syntax": "wint_t fgetwc(FILE *stream);",
			"type": "Linux API"
	},
	"fgetws6": {
			"descr":	"Reads wide characters from the stream into the array pointed to by wcs.",
			"name": "fgetws6",
			"params": [],
			"path": " stdio.h wchar.h ",
			"syntax": "wchar_t *fgetws(wchar_t *wcs, int n, FILE *stream);",
			"type": "Linux API"
	},
	"fileno5": {
			"descr":	"Determines the file handle currently associated with stream.",
			"name": "fileno5",
			"params": [],
			"path": "stdio.h",
			"syntax": "int fileno(FILE *stream);",
			"type": "Linux API"
	},
	"floor": {
			"descr":	"Calculates the floating-point value representing the largest integer less than or equal to x.",
			"name": "floor",
			"params": [],
			"path": "math.h",
			"syntax": "double floor(double x);",
			"type": "Linux API"
	},
	"fmod": {
			"descr":	"Calculates the floating-point remainder of x/y.",
			"name": "fmod",
			"params": [],
			"path": "math.h",
			"syntax": "double fmod(double x, double y);",
			"type": "Linux API"
	},
	"fopen": {
			"descr":	"Opens the specified file.",
			"name": "fopen",
			"params": [],
			"path": "stdio.h",
			"syntax": "FILE *fopen(const char *filename, const char *mode);",
			"type": "Linux API"
	},
	"fprintf": {
			"descr":	"Formats and prints characters and values to the output stream.",
			"name": "fprintf",
			"params": [],
			"path": "stdio.h",
			"syntax": "int fprintf(FILE *stream, const char *format-string, arg-list);",
			"type": "Linux API"
	},
	"fputc1": {
			"descr":	"Prints a character to the output stream.",
			"name": "fputc1",
			"params": [],
			"path": "stdio.h",
			"syntax": "int fputc(int c, FILE *stream);",
			"type": "Linux API"
	},
	"fputs1": {
			"descr":	"Copies a string to the output stream.",
			"name": "fputs1",
			"params": [],
			"path": "stdio.h",
			"syntax": "int fputs(const char *string, FILE *stream);",
			"type": "Linux API"
	},
	"fputwc6": {
			"descr":	"Converts the wide character wc to a multibyte character and writes it to the output stream pointed to by stream at the current position.",
			"name": "fputwc6",
			"params": [],
			"path": " stdio.h wchar.h ",
			"syntax": "wint_t fputwc(wchar_t wc, FILE *stream);",
			"type": "Linux API"
	},
	"fputws6": {
			"descr":	"Converts the wide-character string wcs to a multibyte-character string and writes it to stream as a multibyte character string.",
			"name": "fputws6",
			"params": [],
			"path": " stdio.h wchar.h ",
			"syntax": "int fputws(const wchar_t *wcs, FILE *stream);",
			"type": "Linux API"
	},
	"fread": {
			"descr":	"Reads up to count items of size length from the input stream, and stores them in buffer.",
			"name": "fread",
			"params": [],
			"path": "stdio.h",
			"syntax": "size_t fread(void *buffer, size_t size, size_t count, FILE *stream);",
			"type": "Linux API"
	},
	"free": {
			"descr":	"Frees a block of storage.",
			"name": "free",
			"params": [],
			"path": "stdlib.h",
			"syntax": "void free(void *ptr);",
			"type": "Linux API"
	},
	"freopen": {
			"descr":	"Closes stream, and reassigns it to the file specified.",
			"name": "freopen",
			"params": [],
			"path": "stdio.h",
			"syntax": "FILE *freopen(const char *filename, const char *mode, FILE *stream);",
			"type": "Linux API"
	},
	"frexp": {
			"descr":	"Separates a floating-point number into its mantissa and exponent.",
			"name": "frexp",
			"params": [],
			"path": "math.h",
			"syntax": "double frexp(double x, int *expptr);",
			"type": "Linux API"
	},
	"fscanf": {
			"descr":	"Reads data from stream into locations given by arg-list.",
			"name": "fscanf",
			"params": [],
			"path": "stdio.h",
			"syntax": "int fscanf(FILE *stream, const char *format-string, arg-list);",
			"type": "Linux API"
	},
	"fseek1": {
			"descr":	"Changes the current file position associated with stream to a new location.",
			"name": "fseek1",
			"params": [],
			"path": "stdio.h",
			"syntax": "int fseek(FILE *stream, long int offset, int origin);",
			"type": "Linux API"
	},
	"fsetpos1": {
			"descr":	"Moves the current file position to a new location determined by pos.",
			"name": "fsetpos1",
			"params": [],
			"path": "stdio.h",
			"syntax": "int fsetpos(FILE *stream, const fpos_t *pos);",
			"type": "Linux API"
	},
	"ftell1": {
			"descr":	"Gets the current position of the file pointer.",
			"name": "ftell1",
			"params": [],
			"path": "stdio.h",
			"syntax": "long int ftell(FILE *stream);",
			"type": "Linux API"
	},
	"fwide6": {
			"descr":	"Determines the orientation of the stream pointed to by stream.",
			"name": "fwide6",
			"params": [],
			"path": " stdio.h wchar.h ",
			"syntax": "int fwide(FILE *stream, int mode);",
			"type": "Linux API"
	},
	"fwprintf6": {
			"descr":	"Writes output to the stream pointed to by stream.",
			"name": "fwprintf6",
			"params": [],
			"path": " stdio.h wchar.h ",
			"syntax": "int fwprintf(FILE *stream, const wchar_t *format, arg-list);",
			"type": "Linux API"
	},
	"fwrite": {
			"descr":	"Writes up to count items of size length from buffer to stream.",
			"name": "fwrite",
			"params": [],
			"path": "stdio.h",
			"syntax": "size_t fwrite(const void *buffer, size_t size,size_t count, FILE *stream);",
			"type": "Linux API"
	},
	"fwscanf6": {
			"descr":	"Reads input from the stream pointed to by stream.",
			"name": "fwscanf6",
			"params": [],
			"path": " stdio.h wchar.h ",
			"syntax": "int fwscanf(FILE *stream, const wchar_t *format, arg-list)",
			"type": "Linux API"
	},
	"gamma": {
			"descr":	"Computes the Gamma Function",
			"name": "gamma",
			"params": [],
			"path": "math.h",
			"syntax": "double gamma(double x);",
			"type": "Linux API"
	},
	"getc1": {
			"descr":	"Reads a single character from the input stream.",
			"name": "getc1",
			"params": [],
			"path": "stdio.h",
			"syntax": "int getc(FILE *stream);",
			"type": "Linux API"
	},
	"getchar1": {
			"descr":	"Reads a single character from stdin.",
			"name": "getchar1",
			"params": [],
			"path": "stdio.h",
			"syntax": "int getchar(void);",
			"type": "Linux API"
	},
	"getenv": {
			"descr":	"Searches environment variables for varname.",
			"name": "getenv",
			"params": [],
			"path": "stdlib.h",
			"syntax": "char *getenv(const char *varname);",
			"type": "Linux API"
	},
	"gets": {
			"descr":	"Reads a string from stdin, and stores it in buffer.",
			"name": "gets",
			"params": [],
			"path": "stdio.h",
			"syntax": "char *gets(char *buffer);",
			"type": "Linux API"
	},
	"getwc6": {
			"descr":	"Reads the next multibyte character from stream, converts it to a wide character and advances the associated file position indicator for stream.",
			"name": "getwc6",
			"params": [],
			"path": " stdio.h wchar.h ",
			"syntax": "wint_t getwc(FILE *stream);",
			"type": "Linux API"
	},
	"getwchar6": {
			"descr":	"Reads the next multibyte character from stdin, converts it to a wide character, and advances the associated file position indicator for stdin.",
			"name": "getwchar6",
			"params": [],
			"path": "wchar.h",
			"syntax": "wint_t getwchar(void);",
			"type": "Linux API"
	},
	"gmtime": {
			"descr":	"Converts a time value to a structure of type tm.",
			"name": "gmtime",
			"params": [],
			"path": "time.h",
			"syntax": "struct tm *gmtime(const time_t *time);",
			"type": "Linux API"
	},
	"gmtime64": {
			"descr":	"Converts a time value to a structure of type tm.",
			"name": "gmtime64",
			"params": [],
			"path": "time.h",
			"syntax": "struct tm *gmtime64(const time64_t *time);",
			"type": "Linux API"
	},
	"gmtime_r": {
			"descr":	"Converts a time value to a structure of type tm. (Restartable version of gmtime.)",
			"name": "gmtime_r",
			"params": [],
			"path": "time.h",
			"syntax": "struct tm *gmtime_r (const time_t *time, struct tm *result);",
			"type": "Linux API"
	},
	"gmtime64_r": {
			"descr":	"Converts a time value to a structure of type tm. (Restartable version of gmtime64.)",
			"name": "gmtime64_r",
			"params": [],
			"path": "time.h",
			"syntax": "struct tm *gmtime64_r (const time64_t *time, struct tm *result);",
			"type": "Linux API"
	},
	"hypot": {
			"descr":	"Calculates the hypotenuse of a right-angled triangle with sides of length side1 and side2.",
			"name": "hypot",
			"params": [],
			"path": "math.h",
			"syntax": "double hypot(double side1, double side2);",
			"type": "Linux API"
	},
	"isalnum": {
			"descr":	"Tests if c is alphanumeric.",
			"name": "isalnum",
			"params": [],
			"path": "ctype.h",
			"syntax": "int isalnum(int c);",
			"type": "Linux API"
	},
	"isalpha": {
			"descr":	"Tests if c is alphabetic.",
			"name": "isalpha",
			"params": [],
			"path": "ctype.h",
			"syntax": "int isalpha(int c);",
			"type": "Linux API"
	},
	"isascii4": {
			"descr":	"Tests if c is within the 7-bit US-ASCII range.",
			"name": "isascii4",
			"params": [],
			"path": "ctype.h",
			"syntax": "int isascii(int c);",
			"type": "Linux API"
	},
	"isblank": {
			"descr":	"Tests if c is a blank or tab character.",
			"name": "isblank",
			"params": [],
			"path": "ctype.h",
			"syntax": "int isblank(int c);",
			"type": "Linux API"
	},
	"iscntrl": {
			"descr":	"Tests if c is a control character.",
			"name": "iscntrl",
			"params": [],
			"path": "ctype.h",
			"syntax": "int iscntrl(int c);",
			"type": "Linux API"
	},
	"isdigit": {
			"descr":	"Tests if c is a decimal digit.",
			"name": "isdigit",
			"params": [],
			"path": "ctype.h",
			"syntax": "int isdigit(int c);",
			"type": "Linux API"
	},
	"isgraph": {
			"descr":	"Tests if c is a printable character excluding the space.",
			"name": "isgraph",
			"params": [],
			"path": "ctype.h",
			"syntax": "int isgraph(int c);",
			"type": "Linux API"
	},
	"islower": {
			"descr":	"Tests if c is a lowercase letter.",
			"name": "islower",
			"params": [],
			"path": "ctype.h",
			"syntax": "int islower(int c);",
			"type": "Linux API"
	},
	"isprint": {
			"descr":	"Tests if c is a printable character including the space.",
			"name": "isprint",
			"params": [],
			"path": "ctype.h",
			"syntax": "int isprint(int c);",
			"type": "Linux API"
	},
	"ispunct": {
			"descr":	"Tests if c is a punctuation character.",
			"name": "ispunct",
			"params": [],
			"path": "ctype.h",
			"syntax": "int ispunct(int c);",
			"type": "Linux API"
	},
	"isspace": {
			"descr":	"Tests if c is a whitespace character.",
			"name": "isspace",
			"params": [],
			"path": "ctype.h",
			"syntax": "int isspace(int c);",
			"type": "Linux API"
	},
	"isupper": {
			"descr":	"Tests if c is an uppercase letter.",
			"name": "isupper",
			"params": [],
			"path": "ctype.h",
			"syntax": "int isupper(int c);",
			"type": "Linux API"
	},
	"iswalnum4": {
			"descr":	"Checks for any alphanumeric wide character.",
			"name": "iswalnum4",
			"params": [],
			"path": "wctype.h",
			"syntax": "int iswalnum (wint_t wc);",
			"type": "Linux API"
	},
	"iswalpha4": {
			"descr":	"Checks for any alphabetic wide character.",
			"name": "iswalpha4",
			"params": [],
			"path": "wctype.h",
			"syntax": "int iswalpha (wint_t wc);",
			"type": "Linux API"
	},
	"iswblank4": {
			"descr":	"Checks for any blank or tab wide character.",
			"name": "iswblank4",
			"params": [],
			"path": "wctype.h",
			"syntax": "int iswblank (wint_t wc);",
			"type": "Linux API"
	},
	"iswcntrl4": {
			"descr":	"Tests for any control wide character.",
			"name": "iswcntrl4",
			"params": [],
			"path": "wctype.h",
			"syntax": "int iswcntrl (wint_t wc);",
			"type": "Linux API"
	},
	"iswctype4": {
			"descr":	"Determines whether or not the wide character wc has the property wc_prop.",
			"name": "iswctype4",
			"params": [],
			"path": "wctype.h",
			"syntax": "int iswctype(wint_t wc, wctype_t wc_prop);",
			"type": "Linux API"
	},
	"iswdigit4": {
			"descr":	"Checks for any decimal-digit wide character.",
			"name": "iswdigit4",
			"params": [],
			"path": "wctype.h",
			"syntax": "int iswdigit (wint_t wc);",
			"type": "Linux API"
	},
	"iswgraph4": {
			"descr":	"Checks for any printing wide character except for the wide-character space.",
			"name": "iswgraph4",
			"params": [],
			"path": "wctype.h",
			"syntax": "int iswgraph (wint_t wc);",
			"type": "Linux API"
	},
	"iswlower4": {
			"descr":	"Checks for any lowercase wide character.",
			"name": "iswlower4",
			"params": [],
			"path": "wctype.h",
			"syntax": "int iswlower (wint_t wc);",
			"type": "Linux API"
	},
	"iswprint4": {
			"descr":	"Checks for any printing wide character.",
			"name": "iswprint4",
			"params": [],
			"path": "wctype.h",
			"syntax": "int iswprint (wint_t wc);",
			"type": "Linux API"
	},
	"iswpunct4": {
			"descr":	"Test for a wide non-alphanumeric, non-space character.",
			"name": "iswpunct4",
			"params": [],
			"path": "wctype.h",
			"syntax": "int iswpunct (wint_t wc);",
			"type": "Linux API"
	},
	"iswspace4": {
			"descr":	"Checks for any wide character that corresponds to an implementation-defined set of wide characters for which iswalnum is false.",
			"name": "iswspace4",
			"params": [],
			"path": "wctype.h",
			"syntax": "int iswspace (wint_t wc);",
			"type": "Linux API"
	},
	"iswupper4": {
			"descr":	"Checks for any uppercase wide character.",
			"name": "iswupper4",
			"params": [],
			"path": "wctype.h",
			"syntax": "int iswupper (wint_t wc);",
			"type": "Linux API"
	},
	"iswxdigit4": {
			"descr":	"Checks for any hexadecimal digit character.",
			"name": "iswxdigit4",
			"params": [],
			"path": "wctype.h",
			"syntax": "int iswxdigit (wint_t wc);",
			"type": "Linux API"
	},
	"isxdigit4": {
			"descr":	"Tests if c is a hexadecimal digit.",
			"name": "isxdigit4",
			"params": [],
			"path": "wctype.h",
			"syntax": "int isxdigit(int c);",
			"type": "Linux API"
	},
	"j0": {
			"descr":	"Calculates the Bessel function value of the first kind of order 0.",
			"name": "j0",
			"params": [],
			"path": "math.h",
			"syntax": "double j0(double x);",
			"type": "Linux API"
	},
	"j1": {
			"descr":	"Calculates the Bessel function value of the first kind of order 1.",
			"name": "j1",
			"params": [],
			"path": "math.h",
			"syntax": "double j1(double x);",
			"type": "Linux API"
	},
	"jn": {
			"descr":	"Calculates the Bessel function value of the first kind of order n.",
			"name": "jn",
			"params": [],
			"path": "math.h",
			"syntax": "double jn(int n, double x);",
			"type": "Linux API"
	},
	"labs": {
			"descr":	"Calculates the absolute value of n.",
			"name": "labs",
			"params": [],
			"path": "stdlib.h",
			"syntax": "long int labs(long int n);",
			"type": "Linux API"
	},
	"ldexp": {
			"descr":	"Returns the value of x multiplied by (2 to the power of exp).",
			"name": "ldexp",
			"params": [],
			"path": "math.h",
			"syntax": "double ldexp(double x, int exp);",
			"type": "Linux API"
	},
	"ldiv": {
			"descr":	"Calculates the quotient and remainder of numerator/denominator.",
			"name": "ldiv",
			"params": [],
			"path": "stdlib.h",
			"syntax": "ldiv_t ldiv(long int numerator, long int denominator);",
			"type": "Linux API"
	},
	"localeconv": {
			"descr":	"Formats numeric quantities in struct lconv according to the current locale.",
			"name": "localeconv",
			"params": [],
			"path": "locale.h",
			"syntax": "struct lconv *localeconv(void);",
			"type": "Linux API"
	},
	"localtime": {
			"descr":	"Converts timeval to a structure of type tm.",
			"name": "localtime",
			"params": [],
			"path": "time.h",
			"syntax": "struct tm *localtime(const time_t *timeval);",
			"type": "Linux API"
	},
	"localtime64": {
			"descr":	"Converts timeval to a structure of type tm.",
			"name": "localtime64",
			"params": [],
			"path": "time.h",
			"syntax": "struct tm *localtime64(const time64_t *timeval);",
			"type": "Linux API"
	},
	"localtime_r": {
			"descr":	"Converts a time value to a structure of type tm. (Restartable version of localtime.)",
			"name": "localtime_r",
			"params": [],
			"path": "time.h",
			"syntax": "struct tm *localtime_r (const time_t *timeval, struct tm *result);",
			"type": "Linux API"
	},
	"localtime64_r": {
			"descr":	"Converts a time value to a structure of type tm. (Restartable version of localtime64.)",
			"name": "localtime64_r",
			"params": [],
			"path": "time.h",
			"syntax": "struct tm *localtime64_r (const time64_t *timeval, struct tm *result);",
			"type": "Linux API"
	},
	"log": {
			"descr":	"Calculates the natural logarithm of x.",
			"name": "log",
			"params": [],
			"path": "math.h",
			"syntax": "double log(double x);",
			"type": "Linux API"
	},
	"log10": {
			"descr":	"Calculates the base 10 logarithm of x.",
			"name": "log10",
			"params": [],
			"path": "math.h",
			"syntax": "double log10(double x);",
			"type": "Linux API"
	},
	"longjmp": {
			"descr":	"Restores a stack environment previously set in env by the setjmp function.",
			"name": "longjmp",
			"params": [],
			"path": "setjmp.h",
			"syntax": "void longjmp(jmp_buf env, int value);",
			"type": "Linux API"
	},
	"malloc": {
			"descr":	"Reserves a block of storage.",
			"name": "malloc",
			"params": [],
			"path": "stdlib.h",
			"syntax": "void *malloc(size_t size);",
			"type": "Linux API"
	},
	"mblen": {
			"descr":	"Determines the length of a multibyte character string.",
			"name": "mblen",
			"params": [],
			"path": "stdlib.h",
			"syntax": "int mblen(const char *string, size_t n);",
			"type": "Linux API"
	},
	"mbrlen4": {
			"descr":	"Determines the length of a multibyte character. (Restartable version of mblen.)",
			"name": "mbrlen4",
			"params": [],
			"path": "wchar.h",
			"syntax": "int mbrlen (const char *s, size_t n, mbstate_t *ps);",
			"type": "Linux API"
	},
	"mbrtowc4": {
			"descr":	"Convert a multibyte character to a wide character (Restartable version of mbtowc.)",
			"name": "mbrtowc4",
			"params": [],
			"path": "wchar.h",
			"syntax": "int mbrtowc (wchar_t *pwc, const char *s, size_t n, mbstate_t *ps);",
			"type": "Linux API"
	},
	"mbsinit4": {
			"descr":	"Test state object *ps for initial state.",
			"name": "mbsinit4",
			"params": [],
			"path": "wchar.h",
			"syntax": "int mbsinit (const mbstate_t *ps);",
			"type": "Linux API"
	},
	"mbsrtowcs4": {
			"descr":	"Convert multibyte string to a wide character string. (Restartable version of mbstowcs.)",
			"name": "mbsrtowcs4",
			"params": [],
			"path": "wchar.h",
			"syntax": "size_t mbsrtowc (wchar_t *dst, const char **src, size_t len, mbstate_t *ps);",
			"type": "Linux API"
	},
	"mbstowcs": {
			"descr":	"Converts the multibyte characters in string to their corresponding wchar_t codes, and stores not more than n codes in pwc.",
			"name": "mbstowcs",
			"params": [],
			"path": "stdlib.h",
			"syntax": "size_t mbstowcs(wchar_t *pwc, const char *string, size_t n);",
			"type": "Linux API"
	},
	"mbtowc": {
			"descr":	"Stores the wchar_t code corresponding to the first n bytes of multibyte character string into the wchar_t character pwc.",
			"name": "mbtowc",
			"params": [],
			"path": "stdlib.h",
			"syntax": "int mbtowc(wchar_t *pwc, const char *string, size_t n);",
			"type": "Linux API"
	},
	"memchr": {
			"descr":	"Searches the first count bytes of buf for the first occurrence of c converted to an unsigned character.",
			"name": "memchr",
			"params": [],
			"path": "string.h",
			"syntax": "void *memchr(const void *buf, int c, size_t count);",
			"type": "Linux API"
	},
	"memcmp": {
			"descr":	"Compares up to count bytes of buf1 and buf2.",
			"name": "memcmp",
			"params": [],
			"path": "string.h",
			"syntax": "int memcmp(const void *buf1, const void *buf2, size_t count);",
			"type": "Linux API"
	},
	"memcpy": {
			"descr":	"Copies count bytes of src to dest.",
			"name": "memcpy",
			"params": [],
			"path": "string.h",
			"syntax": "void *memcpy(void *dest, const void *src, size_t count);",
			"type": "Linux API"
	},
	"memmove": {
			"descr":	"Copies count bytes of src to dest. Allows copying between objects that overlap.",
			"name": "memmove",
			"params": [],
			"path": "string.h",
			"syntax": "void *memmove(void *dest, const void *src, size_t count);",
			"type": "Linux API"
	},
	"memset": {
			"descr":	"Sets count bytes of dest to a value c.",
			"name": "memset",
			"params": [],
			"path": "string.h",
			"syntax": "void *memset(void *dest, int c, size_t count);",
			"type": "Linux API"
	},
	"mktime": {
			"descr":	"Converts local time into calendar time.",
			"name": "mktime",
			"params": [],
			"path": "time.h",
			"syntax": "time_t mktime(struct tm *time);",
			"type": "Linux API"
	},
	"mktime64": {
			"descr":	"Converts local time into calendar time.",
			"name": "mktime64",
			"params": [],
			"path": "time.h",
			"syntax": "time64_t mktime64(struct tm *time);",
			"type": "Linux API"
	},
	"modf": {
			"descr":	"Breaks down the floating-point value x into fractional and integral parts.",
			"name": "modf",
			"params": [],
			"path": "math.h",
			"syntax": "double modf(double x, double *intptr);",
			"type": "Linux API"
	},
	"nextafter": {
			"descr":	"Calculates the next representable value after x in the direction of y.",
			"name": "nextafter",
			"params": [],
			"path": "math.h",
			"syntax": "double nextafter(double x, double y);",
			"type": "Linux API"
	},
	"nextafterl": {
			"descr":	"Calculates the next representable value after x in the direction of y.",
			"name": "nextafterl",
			"params": [],
			"path": "math.h",
			"syntax": "long double nextafterl(long double x, long double y);",
			"type": "Linux API"
	},
	"nexttoward": {
			"descr":	"Calculates the next representable value after x in the direction of y.",
			"name": "nexttoward",
			"params": [],
			"path": "math.h",
			"syntax": "double nexttoward(double x, long double y);",
			"type": "Linux API"
	},
	"nexttowardl": {
			"descr":	"Calculates the next representable value after x in the direction of y.",
			"name": "nexttowardl",
			"params": [],
			"path": "math.h",
			"syntax": "long double nexttowardl(long double x, long double y);",
			"type": "Linux API"
	},
	"nl_langinfo4": {
			"descr":	"Retrieve from the current locale the string that describes the requested information specified by item.",
			"name": "nl_langinfo4",
			"params": [],
			"path": "langinfo.h",
			"syntax": "char *nl_langinfo(nl_item item);",
			"type": "Linux API"
	},
	"perror": {
			"descr":	"Prints an error message to stderr.",
			"name": "perror",
			"params": [],
			"path": "stdio.h",
			"syntax": "void perror(const char *string);",
			"type": "Linux API"
	},
	"pow": {
			"descr":	"Calculates the value x to the power y.",
			"name": "pow",
			"params": [],
			"path": "math.h",
			"syntax": "double pow(double x, double y);",
			"type": "Linux API"
	},
	"printf": {
			"descr":	"Formats and prints characters and values to stdout.",
			"name": "printf",
			"params": [],
			"path": "stdio.h",
			"syntax": "int printf(const char *format-string, arg-list);",
			"type": "Linux API"
	},
	"putc1": {
			"descr":	"Prints c to the output stream.",
			"name": "putc1",
			"params": [],
			"path": "stdio.h",
			"syntax": "int putc(int c, FILE *stream);",
			"type": "Linux API"
	},
	"putchar1": {
			"descr":	"Prints c to stdout.",
			"name": "putchar1",
			"params": [],
			"path": "stdio.h",
			"syntax": "int putchar(int c);",
			"type": "Linux API"
	},
	"putenv": {
			"descr":	"Sets the value of an environment variable by altering an existing variable or creating a new one.",
			"name": "putenv",
			"params": [],
			"path": "stdlib.h",
			"syntax": "int *putenv(const char *varname);",
			"type": "Linux API"
	},
	"puts": {
			"descr":	"Prints a string to stdout.",
			"name": "puts",
			"params": [],
			"path": "stdio.h",
			"syntax": "int puts(const char *string);",
			"type": "Linux API"
	},
	"putwc6": {
			"descr":	"Converts the wide character wc to a multibyte character, and writes it to the stream at the current position.",
			"name": "putwc6",
			"params": [],
			"path": " stdio.h wchar.h ",
			"syntax": "wint_t putwchar(wchar_t wc, FILE *stream);",
			"type": "Linux API"
	},
	"putwchar6": {
			"descr":	"Converts the wide character wc to a multibyte character and writes it to stdout.",
			"name": "putwchar6",
			"params": [],
			"path": "wchar.h",
			"syntax": "wint_t putwchar(wchar_t wc);",
			"type": "Linux API"
	},
	"qsort": {
			"descr":	"Performs a quick sort of an array of num elements, each of width bytes in size.",
			"name": "qsort",
			"params": [],
			"path": "stdlib.h",
			"syntax": "void qsort(void *base, size_t num, size_t width, int(*compare)(const void *element1, const void *element2));",
			"type": "Linux API"
	},
	"quantexpd32": {
			"descr":	"Compute the quantum exponent of a single-precision decimal floating-point value.",
			"name": "quantexpd32",
			"params": [],
			"path": "math.h",
			"syntax": "_Decimal32 quantized32(_Decimal32 x, _Decimal32 y);",
			"type": "Linux API"
	},
	"quantexpd64": {
			"descr":	"Compute the quantum exponent of a double-precision decimal floating-point value.",
			"name": "quantexpd64",
			"params": [],
			"path": "math.h",
			"syntax": "_Decimal64 quantized64(_Decimal64 x, _Decimal64 y);",
			"type": "Linux API"
	},
	"quantexpd128": {
			"descr":	"Compute the quantum exponent of a quad-precision decimal floating-point value.",
			"name": "quantexpd128",
			"params": [],
			"path": "math.h",
			"syntax": "_Decimal128 quantized128(_Decimal128 x, _Decimal128 y);",
			"type": "Linux API"
	},
	"quantized32": {
			"descr":	"Set the quantum exponent of a single-precision decimal floating-point value to the quantum exponent of another single-precision decimal floating-point value.",
			"name": "quantized32",
			"params": [],
			"path": "math.h",
			"syntax": "int quantexpd32(_Decimal32 x);",
			"type": "Linux API"
	},
	"quantized64": {
			"descr":	"Set the quantum exponent of a double-precision decimal floating-point value to the quantum exponent of another double-precision decimal floating-point value.",
			"name": "quantized64",
			"params": [],
			"path": "math.h",
			"syntax": "int quantexpd64(_Decimal64 x);",
			"type": "Linux API"
	},
	"quantized128": {
			"descr":	"Set the quantum exponent of a quad-precision decimal floating-point value to the quantum exponent of another quad-precision decimal floating-point value.",
			"name": "quantized128",
			"params": [],
			"path": "math.h",
			"syntax": "int quantexpd128(_Decimal128 x);",
			"type": "Linux API"
	},
	"samequantumd32": {
			"descr":	"Determine if the quantum exponents of two single-precision decimal floating-point values are the same.",
			"name": "samequantumd32",
			"params": [],
			"path": "math.h",
			"syntax": "__bool__ samequantumd32(_Decimal32 x, _Decimal32 y);",
			"type": "Linux API"
	},
	"samequantumd64": {
			"descr":	"Determine if the quantum exponents of two double-precision decimal floating-point values are the same.",
			"name": "samequantumd64",
			"params": [],
			"path": "math.h",
			"syntax": "__bool__ samequantumd64(_Decimal64 x, _Decimal64 y);",
			"type": "Linux API"
	},
	"samequantumd128": {
			"descr":	"Determine if the quantum exponents of two quad-precision decimal floating-point values are the same.",
			"name": "samequantumd128",
			"params": [],
			"path": "math.h",
			"syntax": "__bool__ samequantumd128(_Decimal128 x, _Decimal128 y);",
			"type": "Linux API"
	},
	"raise": {
			"descr":	"Sends the signal sig to the running program.",
			"name": "raise",
			"params": [],
			"path": "signal.h",
			"syntax": "int raise(int sig);",
			"type": "Linux API"
	},
	"rand": {
			"descr":	"Returns a pseudo-random integer.",
			"name": "rand",
			"params": [],
			"path": "stdlib.h",
			"syntax": "int rand(void);",
			"type": "Linux API"
	},
	"rand_r": {
			"descr":	"Returns a pseudo-random integer. (Restartable version)",
			"name": "rand_r",
			"params": [],
			"path": "stdlib.h",
			"syntax": "int rand_r(void);",
			"type": "Linux API"
	},
	"realloc": {
			"descr":	"Changes the size of a previously reserved storage block.",
			"name": "realloc",
			"params": [],
			"path": "stdlib.h",
			"syntax": "void *realloc(void *ptr, size_t size);",
			"type": "Linux API"
	},
	"regcomp": {
			"descr":	"Compiles the source regular expression pointed to by pattern into an executable version and stores it in the location pointed to by preg.",
			"name": "regcomp",
			"params": [],
			"path": "regex.h",
			"syntax": "int regcomp(regex_t *preg, const char *pattern, int cflags);",
			"type": "Linux API"
	},
	"regerror": {
			"descr":	"Finds the description for the error code errcode for the regular expression preg.",
			"name": "regerror",
			"params": [],
			"path": "regex.h",
			"syntax": "size_t regerror(int errcode, const regex_t *preg, char *errbuf, size_t errbuf_size);",
			"type": "Linux API"
	},
	"regexec": {
			"descr":	"Compares the null-ended string string against the compiled regular expression preg to find a match between the two.",
			"name": "regexec",
			"params": [],
			"path": "regex.h",
			"syntax": "int regexec(const regex_t *preg, const char *string, size_t nmatch, regmatch_t *pmatch, int eflags);",
			"type": "Linux API"
	},
	"regfree": {
			"descr":	"Frees any memory that was allocated by regcomp to implement the regular expression preg.",
			"name": "regfree",
			"params": [],
			"path": "regex.h",
			"syntax": "void regfree(regex_t *preg);",
			"type": "Linux API"
	},
	"remove": {
			"descr":	"Deletes the file specified by filename.",
			"name": "remove",
			"params": [],
			"path": "stdio.h",
			"syntax": "int remove(const char *filename);",
			"type": "Linux API"
	},
	"rename": {
			"descr":	"Renames the specified file.",
			"name": "rename",
			"params": [],
			"path": "stdio.h",
			"syntax": "int rename(const char *oldname, const char *newname);",
			"type": "Linux API"
	},
	"rewind1": {
			"descr":	"Repositions the file pointer associated with stream to the beginning of the file.",
			"name": "rewind1",
			"params": [],
			"path": "stdio.h",
			"syntax": "void rewind(FILE *stream);",
			"type": "Linux API"
	},
	"scanf": {
			"descr":	"Reads data from stdin into locations given by arg-list.",
			"name": "scanf",
			"params": [],
			"path": "stdio.h",
			"syntax": "int scanf(const char *format-string, arg-list);",
			"type": "Linux API"
	},
	"setbuf": {
			"descr":	"Controls buffering for stream.",
			"name": "setbuf",
			"params": [],
			"path": "stdio.h",
			"syntax": "void setbuf(FILE *stream, char *buffer);",
			"type": "Linux API"
	},
	"setjmp": {
			"descr":	"Saves a stack environment that can be subsequently restored by longjmp.",
			"name": "setjmp",
			"params": [],
			"path": "setjmp.h",
			"syntax": "int setjmp(jmp_buf env);",
			"type": "Linux API"
	},
	"setlocale": {
			"descr":	"Changes or queries variables defined in the locale.",
			"name": "setlocale",
			"params": [],
			"path": "locale.h",
			"syntax": "char *setlocale(int category, const char *locale);",
			"type": "Linux API"
	},
	"setvbuf": {
			"descr":	"Controls buffering and buffer size for stream.",
			"name": "setvbuf",
			"params": [],
			"path": "stdio.h",
			"syntax": "int setvbuf(FILE *stream, char *buf, int type, size_t size);",
			"type": "Linux API"
	},
	"signal": {
			"descr":	"Registers func as a signal handler for the signal sig.",
			"name": "signal",
			"params": [],
			"path": "signal.h",
			"syntax": "void(*signal (int sig, void(*func)(int))) (int);",
			"type": "Linux API"
	},
	"sin": {
			"descr":	"Calculates the sine of x.",
			"name": "sin",
			"params": [],
			"path": "math.h",
			"syntax": "double sin(double x);",
			"type": "Linux API"
	},
	"sinh": {
			"descr":	"Calculates the hyperbolic sine of x.",
			"name": "sinh",
			"params": [],
			"path": "math.h",
			"syntax": "double sinh(double x);",
			"type": "Linux API"
	},
	"snprintf": {
			"descr":	"Same as sprintf except that the function will stop after n characters have been written to outbuf.",
			"name": "snprintf",
			"params": [],
			"path": "stdio.h",
			"syntax": "int snprintf(char *outbuf, size_t n, const char*, ...)",
			"type": "Linux API"
	},
	"sprintf": {
			"descr":	"Formats and stores characters and values in buffer.",
			"name": "sprintf",
			"params": [],
			"path": "stdio.h",
			"syntax": "int sprintf(char *buffer, const char *format-string, arg-list);",
			"type": "Linux API"
	},
	"sqrt": {
			"descr":	"Calculates the square root of x.",
			"name": "sqrt",
			"params": [],
			"path": "math.h",
			"syntax": "double sqrt(double x);",
			"type": "Linux API"
	},
	"srand": {
			"descr":	"Sets the seed for the pseudo-random number generator.",
			"name": "srand",
			"params": [],
			"path": "stdlib.h",
			"syntax": "void srand(unsigned int seed);",
			"type": "Linux API"
	},
	"sscanf": {
			"descr":	"Reads data from buffer into the locations given by arg-list.",
			"name": "sscanf",
			"params": [],
			"path": "stdio.h",
			"syntax": "int sscanf(const char *buffer, const char *format, arg-list);",
			"type": "Linux API"
	},
	"strcasecmp": {
			"descr":	"Compares strings without case sensitivity.",
			"name": "strcasecmp",
			"params": [],
			"path": "strings.h",
			"syntax": "int srtcasecmp(const char *string1, const char *string2);",
			"type": "Linux API"
	},
	"strcat": {
			"descr":	"Concatenates string2 to string1.",
			"name": "strcat",
			"params": [],
			"path": "string.h",
			"syntax": "char *strcat(char *string1, const char *string2);",
			"type": "Linux API"
	},
	"strchr": {
			"descr":	"Locates the first occurrence of c in string.",
			"name": "strchr",
			"params": [],
			"path": "string.h",
			"syntax": "char *strchr(const char *string, int c);",
			"type": "Linux API"
	},
	"strcmp": {
			"descr":	"Compares the value of string1 to string2.",
			"name": "strcmp",
			"params": [],
			"path": "string.h",
			"syntax": "int strcmp(const char *string1, const char *string2);",
			"type": "Linux API"
	},
	"strcoll": {
			"descr":	"Compares two strings using the collating sequence in the current locale.",
			"name": "strcoll",
			"params": [],
			"path": "string.h",
			"syntax": "int strcoll(const char *string1, const char *string2);",
			"type": "Linux API"
	},
	"strcpy": {
			"descr":	"Copies string2 into string1.",
			"name": "strcpy",
			"params": [],
			"path": "string.h",
			"syntax": "char *strcpy(char *string1, const char *string2);",
			"type": "Linux API"
	},
	"strcspn": {
			"descr":	"Returns the length of the initial substring of string1 consisting of characters not contained in string2.",
			"name": "strcspn",
			"params": [],
			"path": "string.h",
			"syntax": "size_t strcspn(const char *string1, const char *string2);",
			"type": "Linux API"
	},
	"strerror": {
			"descr":	"Maps the error number in errnum to an error message string.",
			"name": "strerror",
			"params": [],
			"path": "string.h",
			"syntax": "char *strerror(int errnum);",
			"type": "Linux API"
	},
	"strfmon4": {
			"descr":	"Converts monetary value to string.",
			"name": "strfmon4",
			"params": [],
			"path": "wchar.h",
			"syntax": "int strfmon (char *s, size_t maxsize, const char *format, ...);",
			"type": "Linux API"
	},
	"strftime": {
			"descr":	"Stores characters in an array pointed to by dest, according to the string determined by format.",
			"name": "strftime",
			"params": [],
			"path": "time.h",
			"syntax": "size_t strftime (char *dest, size_t maxsize, const char *format, const struct tm *timeptr);",
			"type": "Linux API"
	},
	"strlen": {
			"descr":	"Calculates the length of string.",
			"name": "strlen",
			"params": [],
			"path": "string.h",
			"syntax": "size_t strlen(const char *string);",
			"type": "Linux API"
	},
	"strncasecmp": {
			"descr":	"Compares strings without case sensitivity.",
			"name": "strncasecmp",
			"params": [],
			"path": "strings.h",
			"syntax": "int strncasecmp(const char *string1, const char *string2, size_t count);",
			"type": "Linux API"
	},
	"strncat": {
			"descr":	"Concatenates up to count characters of string2 to string1.",
			"name": "strncat",
			"params": [],
			"path": "string.h",
			"syntax": "char *strncat(char *string1, const char *string2, size_t count);",
			"type": "Linux API"
	},
	"strncmp": {
			"descr":	"Compares up to count characters of string1 and string2.",
			"name": "strncmp",
			"params": [],
			"path": "string.h",
			"syntax": "int strncmp(const char *string1, const char *string2, size_t count);",
			"type": "Linux API"
	},
	"strncpy": {
			"descr":	"Copies up to count characters of string2 to string1.",
			"name": "strncpy",
			"params": [],
			"path": "string.h",
			"syntax": "char *strncpy(char *string1, const char *string2, size_t count);",
			"type": "Linux API"
	},
	"strpbrk": {
			"descr":	"Locates the first occurrence in string1 of any character in string2.",
			"name": "strpbrk",
			"params": [],
			"path": "string.h",
			"syntax": "char *strpbrk(const char *string1, const char *string2);",
			"type": "Linux API"
	},
	"strptime4": {
			"descr":	"Date and time conversion",
			"name": "strptime4",
			"params": [],
			"path": "time.h",
			"syntax": "char *strptime (const char *buf, const char *format, struct tm *tm);",
			"type": "Linux API"
	},
	"strrchr": {
			"descr":	"Locates the last occurrence of c in string.",
			"name": "strrchr",
			"params": [],
			"path": "string.h",
			"syntax": "char *strrchr(const char *string, int c);",
			"type": "Linux API"
	},
	"strspn": {
			"descr":	"Returns the length of the initial substring of string1 consisting of characters contained in string2.",
			"name": "strspn",
			"params": [],
			"path": "string.h",
			"syntax": "size_t strspn(const char *string1, const char *string2);",
			"type": "Linux API"
	},
	"strstr": {
			"descr":	"Returns a pointer to the first occurrence of string2 in string1.",
			"name": "strstr",
			"params": [],
			"path": "string.h",
			"syntax": "char *strstr(const char *string1, const char *string2);",
			"type": "Linux API"
	},
	"strtod": {
			"descr":	"Converts nptr to a double precision value.",
			"name": "strtod",
			"params": [],
			"path": "stdlib.h",
			"syntax": "double strtod(const char *nptr, char **endptr);",
			"type": "Linux API"
	},
	"strtod32": {
			"descr":	"Converts nptr to a single-precision decimal floating-point value.",
			"name": "strtod32",
			"params": [],
			"path": "stdlib.h",
			"syntax": "_Decimal32 strtod32(const char *nptr, char **endptr);",
			"type": "Linux API"
	},
	"strtod64": {
			"descr":	"Converts nptr to a double-precision decimal floating-point value.",
			"name": "strtod64",
			"params": [],
			"path": "stdlib.h",
			"syntax": "_Decimal64 strtod64(const char *nptr, char **endptr);",
			"type": "Linux API"
	},
	"strtod128": {
			"descr":	"Converts nptr to a quad-precision decimal floating-point value.",
			"name": "strtod128",
			"params": [],
			"path": "stdlib.h",
			"syntax": "_Decimal128 strtod128(const char *nptr, char **endptr);",
			"type": "Linux API"
	},
	"strtof": {
			"descr":	"Converts nptr to a float value.",
			"name": "strtof",
			"params": [],
			"path": "stdlib.h",
			"syntax": "float strtof(const char *nptr, char **endptr);",
			"type": "Linux API"
	},
	"strtok": {
			"descr":	"Locates the next token in string1 delimited by the next character in string2.",
			"name": "strtok",
			"params": [],
			"path": "string.h",
			"syntax": "char *strtok(char *string1, const char *string2);",
			"type": "Linux API"
	},
	"strtok_r": {
			"descr":	"Locates the next token in string delimited by the next character in seps. (Restartable version of strtok.)",
			"name": "strtok_r",
			"params": [],
			"path": "string.h",
			"syntax": "char *strtok_r(char *string, const char *seps, char **lasts);",
			"type": "Linux API"
	},
	"strtol": {
			"descr":	"Converts nptr to a signed long integer.",
			"name": "strtol",
			"params": [],
			"path": "stdlib.h",
			"syntax": "long int strtol(const char *nptr, char **endptr, int base);",
			"type": "Linux API"
	},
	"strtold": {
			"descr":	"Converts nptr to a long double value.",
			"name": "strtold",
			"params": [],
			"path": "stdlib.h",
			"syntax": "long double strtold(const char *nptr, char **endptr);",
			"type": "Linux API"
	},
	"strtoul": {
			"descr":	"Converts string1 to an unsigned long integer.",
			"name": "strtoul",
			"params": [],
			"path": "stdlib.h",
			"syntax": "unsigned long int strtoul(const char *string1, char **string2, int base);",
			"type": "Linux API"
	},
	"strxfrm": {
			"descr":	"Converts string2 and places the result in string1. The conversion is determined by the program's current locale.",
			"name": "strxfrm",
			"params": [],
			"path": "string.h",
			"syntax": "size_t strxfrm(char *string1, const char *string2, size_t count);",
			"type": "Linux API"
	},
	"swprintf": {
			"descr":	"Formats and stores a series of wide characters and values into the wide-character buffer wcsbuffer.",
			"name": "swprintf",
			"params": [],
			"path": "wchar.h",
			"syntax": "int swprintf(wchar_t *wcsbuffer, size_t n, const wchar_t *format, arg-list);",
			"type": "Linux API"
	},
	"swscanf": {
			"descr":	"Reads data from buffer into the locations given by arg-list.",
			"name": "swscanf",
			"params": [],
			"path": "wchar.h",
			"syntax": "int swscanf (const wchar_t *buffer, const wchar_t *format, arg-list)",
			"type": "Linux API"
	},
	"system": {
			"descr":	"Passes string to the system command analyzer.",
			"name": "system",
			"params": [],
			"path": "stdlib.h",
			"syntax": "int system(const char *string);",
			"type": "Linux API"
	},
	"tan": {
			"descr":	"Calculates the tangent of x.",
			"name": "tan",
			"params": [],
			"path": "math.h",
			"syntax": "double tan(double x);",
			"type": "Linux API"
	},
	"tanh": {
			"descr":	"Calculates the hyperbolic tangent of x.",
			"name": "tanh",
			"params": [],
			"path": "math.h",
			"syntax": "double tanh(double x);",
			"type": "Linux API"
	},
	"time": {
			"descr":	"Returns the current calendar time.",
			"name": "time",
			"params": [],
			"path": "time.h",
			"syntax": "time_t time(time_t *timeptr);",
			"type": "Linux API"
	},
	"time64": {
			"descr":	"Returns the current calendar time.",
			"name": "time64",
			"params": [],
			"path": "time.h",
			"syntax": "time64_t time64(time64_t *timeptr);",
			"type": "Linux API"
	},
	"tmpfile": {
			"descr":	"Creates a temporary binary file and opens it.",
			"name": "tmpfile",
			"params": [],
			"path": "stdio.h",
			"syntax": "FILE *tmpfile(void);",
			"type": "Linux API"
	},
	"tmpnam": {
			"descr":	"Generates a temporary file name.",
			"name": "tmpnam",
			"params": [],
			"path": "stdio.h",
			"syntax": "char *tmpnam(char *string);",
			"type": "Linux API"
	},
	"toascii": {
			"descr":	"Converts c to a character in the 7-bit US-ASCII character set.",
			"name": "toascii",
			"params": [],
			"path": "ctype.h",
			"syntax": "int toascii(int c);",
			"type": "Linux API"
	},
	"tolower": {
			"descr":	"Converts c to lowercase.",
			"name": "tolower",
			"params": [],
			"path": "ctype.h",
			"syntax": "int tolower(int c);",
			"type": "Linux API"
	},
	"toupper": {
			"descr":	"Converts c to uppercase.",
			"name": "toupper",
			"params": [],
			"path": "ctype.h",
			"syntax": "int toupper(int c);",
			"type": "Linux API"
	},
	"towctrans": {
			"descr":	"Translates the wide character wc based on the mapping described by desc.",
			"name": "towctrans",
			"params": [],
			"path": "wctype.h",
			"syntax": "wint_t towctrans(wint_t wc, wctrans_t desc);",
			"type": "Linux API"
	},
	"towlower4": {
			"descr":	"Converts uppercase letter to lowercase letter.",
			"name": "towlower4",
			"params": [],
			"path": "wctype.h",
			"syntax": "wint_t towlower (wint_t wc);",
			"type": "Linux API"
	},
	"towupper4": {
			"descr":	"Converts lowercase letter to uppercase letter.",
			"name": "towupper4",
			"params": [],
			"path": "wctype.h",
			"syntax": "wint_t towupper (wint_t wc);",
			"type": "Linux API"
	},
	"ungetc1": {
			"descr":	"Pushes c back onto the input stream.",
			"name": "ungetc1",
			"params": [],
			"path": "stdio.h",
			"syntax": "int ungetc(int c, FILE *stream);",
			"type": "Linux API"
	},
	"ungetwc6": {
			"descr":	"Pushes the wide character wc back onto the input stream.",
			"name": "ungetwc6",
			"params": [],
			"path": " stdio.h wchar.h ",
			"syntax": "wint_t ungetwc(wint_t wc, FILE *stream);",
			"type": "Linux API"
	},
	"va_arg": {
			"descr":	"Returns the value of one argument and modifies arg_ptr to point to the next argument.",
			"name": "va_arg",
			"params": [],
			"path": "stdarg.h",
			"syntax": "var_type va_arg(va_list arg_ptr, var_type);",
			"type": "Linux API"
	},
	"va_copy": {
			"descr":	"Initializes dest as a copy of src.",
			"name": "va_copy",
			"params": [],
			"path": "stdarg.h",
			"syntax": "void va_copy(va_list dest, va_list src);",
			"type": "Linux API"
	},
	"va_end": {
			"descr":	"Facilitates normal return from variable argument list processing.",
			"name": "va_end",
			"params": [],
			"path": "stdarg.h",
			"syntax": "void va_end(va_list arg_ptr);",
			"type": "Linux API"
	},
	"va_start": {
			"descr":	"Initializes arg_ptr for subsequent use by va_arg and va_end.",
			"name": "va_start",
			"params": [],
			"path": "stdarg.h",
			"syntax": "void va_start(va_list arg_ptr, variable_name);",
			"type": "Linux API"
	},
	"vfprintf": {
			"descr":	"Formats and prints characters to the output stream using a variable number of arguments.",
			"name": "vfprintf",
			"params": [],
			"path": "stdio.h stdarg.h",
			"syntax": "int vfprintf(FILE *stream, const char *format, va_list arg_ptr);",
			"type": "Linux API"
	},
	"vfscanf": {
			"descr":	"Reads data from a specified stream into locations given by a variable number of arguments.",
			"name": "vfscanf",
			"params": [],
			"path": "stdio.h stdarg.h",
			"syntax": "int vfscanf(FILE *stream, const char *format, va_list arg_ptr);",
			"type": "Linux API"
	},
	"vfwprintf6": {
			"descr":	"Equivalent to fwprintf, except that the variable argument list is replaced by arg.",
			"name": "vfwprintf6",
			"params": [],
			"path": " stdarg.h stdio.h wchar.h ",
			"syntax": "int vfwprintf(FILE *stream, const wchar_t *format, va_list arg);",
			"type": "Linux API"
	},
	"vfwscanf": {
			"descr":	"Reads wide data from a specified stream into locations given by a variable number of arguments.",
			"name": "vfwscanf",
			"params": [],
			"path": "stdio.h stdarg.h",
			"syntax": "int vfwscanf(FILE *stream, const wchar_t *format, va_list arg_ptr);",
			"type": "Linux API"
	},
	"vprintf": {
			"descr":	"Formats and prints characters to stdout using a variable number of arguments.",
			"name": "vprintf",
			"params": [],
			"path": "stdio.h stdarg.h",
			"syntax": "int vprintf(const char *format, va_list arg_ptr);",
			"type": "Linux API"
	},
	"vscanf": {
			"descr":	"Reads data from stdin into locations given by a variable number of arguments.",
			"name": "vscanf",
			"params": [],
			"path": "stdio.h stdarg.h",
			"syntax": "int vscanf(const char *format, va_list arg_ptr);",
			"type": "Linux API"
	},
	"vsprintf": {
			"descr":	"Formats and stores characters in a buffer using a variable number of arguments.",
			"name": "vsprintf",
			"params": [],
			"path": "stdio.h stdarg.h",
			"syntax": "int vsprintf(char *target-string, const char *format, va_list arg_ptr);",
			"type": "Linux API"
	},
	"vsnprintf": {
			"descr":	"Same as vsprintf except that the function will stop after n characters have been written to outbuf.",
			"name": "vsnprintf",
			"params": [],
			"path": "stdio.h",
			"syntax": "int vsnprintf(char *outbuf, size_t n, const char*, va_list);",
			"type": "Linux API"
	},
	"vsscanf": {
			"descr":	"Reads data from a buffer into locations given by a variable number of arguments.",
			"name": "vsscanf",
			"params": [],
			"path": "stdio.h stdarg.h",
			"syntax": "int vsscanf(const char*buffer, const char *format, va_list arg_ptr);",
			"type": "Linux API"
	},
	"vswprintf": {
			"descr":	"Formats and stores a series of wide characters and values in the buffer wcsbuffer.",
			"name": "vswprintf",
			"params": [],
			"path": " stdarg.h wchar.h ",
			"syntax": "int vswprintf(wchar_t *wcsbuffer, size_t n, const wchar_t *format, va_list arg);",
			"type": "Linux API"
	},
	"vswscanf": {
			"descr":	"Reads wide data from a buffer into locations given by a variable number of arguments.",
			"name": "vswscanf",
			"params": [],
			"path": "stdio.h wchar.h",
			"syntax": "int vswscanf(const wchar_t *buffer, const wchar_t *format, va_list arg_ptr);",
			"type": "Linux API"
	},
	"vwprintf6": {
			"descr":	"Equivalent to wprintf, except that the variable argument list is replaced by arg.",
			"name": "vwprintf6",
			"params": [],
			"path": " stdarg.h wchar.h ",
			"syntax": "int vwprintf(const wchar_t *format, va_list arg);",
			"type": "Linux API"
	},
	"vwscanf": {
			"descr":	"Reads wide data from stdin into locations given by a variable number of arguments.",
			"name": "vwscanf",
			"params": [],
			"path": "stdio.h wchar.h",
			"syntax": "int vwscanf(const wchar_t *format, va_list arg_ptr);",
			"type": "Linux API"
	},
	"wcrtomb4": {
			"descr":	"Converts a wide character to a multibyte character. (Restartable version of wctomb.)",
			"name": "wcrtomb4",
			"params": [],
			"path": "wchar.h",
			"syntax": "int wcrtomb (char *s, wchar_t wchar, mbstate_t *pss);",
			"type": "Linux API"
	},
	"wcscat": {
			"descr":	"Appends a copy of the string pointed to by string2 to the end of the string pointed to by string1.",
			"name": "wcscat",
			"params": [],
			"path": "wchar.h",
			"syntax": "wchar_t *wcscat(wchar_t *string1, const wchar_t *string2);",
			"type": "Linux API"
	},
	"wcschr": {
			"descr":	"Searches the wide-character string pointed to by string for the occurrence of character.",
			"name": "wcschr",
			"params": [],
			"path": "wchar.h",
			"syntax": "wchar_t *wcschr(const wchar_t *string, wchar_t character);",
			"type": "Linux API"
	},
	"wcscmp": {
			"descr":	"Compares two wide-character strings, *string1 and *string2.",
			"name": "wcscmp",
			"params": [],
			"path": "wchar.h",
			"syntax": "int wcscmp(const wchar_t *string1, const wchar_t *string2);",
			"type": "Linux API"
	},
	"wcscoll4": {
			"descr":	"Compares two wide-character strings using the collating sequence in the current locale.",
			"name": "wcscoll4",
			"params": [],
			"path": "wchar.h",
			"syntax": "int wcscoll (const wchar_t *wcs1, const wchar_t *wcs2);",
			"type": "Linux API"
	},
	"wcscpy": {
			"descr":	"Copies the contents of *string2 (including the ending wchar_t null character) into *string1.",
			"name": "wcscpy",
			"params": [],
			"path": "wchar.h",
			"syntax": "wchar_t *wcscpy(wchar_t *string1, const wchar_t *string2);",
			"type": "Linux API"
	},
	"wcscspn": {
			"descr":	"Determines the number of wchar_t characters in the initial segment of the string pointed to by *string1 that do not appear in the string pointed to by *string2.",
			"name": "wcscspn",
			"params": [],
			"path": "wchar.h",
			"syntax": "size_t wcscspn(const wchar_t *string1, const wchar_t *string2);",
			"type": "Linux API"
	},
	"wcsftime": {
			"descr":	"Converts the time and date specification in the timeptr structure into a wide-character string.",
			"name": "wcsftime",
			"params": [],
			"path": "wchar.h",
			"syntax": "size_t wcsftime(wchar_t *wdest, size_t maxsize, const wchar_t *format, const struct tm *timeptr);",
			"type": "Linux API"
	},
	"wcslen": {
			"descr":	"Computes the number of wide-characters in the string pointed to by string.",
			"name": "wcslen",
			"params": [],
			"path": "wchar.h",
			"syntax": "size_t wcslen(const wchar_t *string);",
			"type": "Linux API"
	},
	"wcslocaleconv": {
			"descr":	"Formats numeric quantities in struct wcslconv according to the current locale.",
			"name": "wcslocaleconv",
			"params": [],
			"path": "locale.h",
			"syntax": "struct wcslconv *wcslocaleconv(void);",
			"type": "Linux API"
	},
	"wcsncat": {
			"descr":	"Appends up to count wide characters from string2 to the end of string1, and appends a wchar_t null character to the result.",
			"name": "wcsncat",
			"params": [],
			"path": "wchar.h",
			"syntax": "wchar_t *wcsncat(wchar_t *string1, const wchar_t *string2, size_t count);",
			"type": "Linux API"
	},
	"wcsncmp": {
			"descr":	"Compares up to count wide characters in string1 to string2.",
			"name": "wcsncmp",
			"params": [],
			"path": "wchar.h",
			"syntax": "int wcsncmp(const wchar_t *string1, const wchar_t *string2, size_t count);",
			"type": "Linux API"
	},
	"wcsncpy": {
			"descr":	"Copies up to count wide characters from string2 to string1.",
			"name": "wcsncpy",
			"params": [],
			"path": "wchar.h",
			"syntax": "wchar_t *wcsncpy(wchar_t *string1, const wchar_t *string2, size_t count);",
			"type": "Linux API"
	},
	"wcspbrk": {
			"descr":	"Locates the first occurrence in the string pointed to by string1 of any wide characters from the string pointed to by string2.",
			"name": "wcspbrk",
			"params": [],
			"path": "wchar.h",
			"syntax": "wchar_t *wcspbrk(const wchar_t *string1, const wchar_t *string2);",
			"type": "Linux API"
	},
	"wcsptime": {
			"descr":	"Date and time conversion. Equivalent to strptime(), except that it uses wide characters.",
			"name": "wcsptime",
			"params": [],
			"path": "wchar.h",
			"syntax": "wchar_t *wcsptime ( const wchar_t *buf, const wchar_t *format, struct tm *tm );",
			"type": "Linux API"
	},
	"wcsrchr": {
			"descr":	"Locates the last occurrence of character in the string pointed to by string.",
			"name": "wcsrchr",
			"params": [],
			"path": "wchar.h",
			"syntax": "wchar_t *wcsrchr(const wchar_t *string, wchar_t character);",
			"type": "Linux API"
	},
	"wcsrtombs4": {
			"descr":	"Converts wide character string to multibyte string. (Restartable version of wcstombs.)",
			"name": "wcsrtombs4",
			"params": [],
			"path": "wchar.h",
			"syntax": "size_t wcsrtombs (char *dst, const wchar_t **src, size_t len, mbstate_t *ps);",
			"type": "Linux API"
	},
	"wcsspn": {
			"descr":	"Computes the number of wide characters in the initial segment of the string pointed to by string1, which consists entirely of wide characters from the string pointed to by string2.",
			"name": "wcsspn",
			"params": [],
			"path": "wchar.h",
			"syntax": "size_t wcsspn(const wchar_t *string1, const wchar_t *string2);",
			"type": "Linux API"
	},
	"wcsstr": {
			"descr":	"Locates the first occurrence of wcs2 in wcs1.",
			"name": "wcsstr",
			"params": [],
			"path": "wchar.h",
			"syntax": "wchar_t *wcsstr(const wchar_t *wcs1, const wchar_t *wcs2);",
			"type": "Linux API"
	},
	"wcstod": {
			"descr":	"Converts the initial portion of the wide-character string pointed to by nptr to a double value.",
			"name": "wcstod",
			"params": [],
			"path": "wchar.h",
			"syntax": "double wcstod(const wchar_t *nptr, wchar_t **endptr);",
			"type": "Linux API"
	},
	"wcstod32": {
			"descr":	"Converts the initial portion of the wide-character string pointed to by nptr to a single-precision decimal floating-point value.",
			"name": "wcstod32",
			"params": [],
			"path": "wchar.h",
			"syntax": "_Decimal32 wcstod32(const wchar_t *nptr, wchar_t **endptr);",
			"type": "Linux API"
	},
	"wcstod64": {
			"descr":	"Converts the initial portion of the wide-character string pointed to by nptr to a double-precision decimal floating-point value.",
			"name": "wcstod64",
			"params": [],
			"path": "wchar.h",
			"syntax": "_Decimal64 wcstod64(const wchar_t *nptr, wchar_t **endptr);",
			"type": "Linux API"
	},
	"wcstod128": {
			"descr":	"Converts the initial portion of the wide-character string pointed to by nptr to a quad-precision decimal floating-point value.",
			"name": "wcstod128",
			"params": [],
			"path": "wchar.h",
			"syntax": "_Decimal128 wcstod128(const wchar_t *nptr, wchar_t **endptr);",
			"type": "Linux API"
	},
	"wcstof": {
			"descr":	"Converts the initial portion of the wide-character string pointed to by nptr to a float value.",
			"name": "wcstof",
			"params": [],
			"path": "wchar.h",
			"syntax": "float wcstof(const wchar_t *nptr, wchar_t **endptr);",
			"type": "Linux API"
	},
	"wcstok": {
			"descr":	"Breaks wcs1 into a sequence of tokens, each of which is delimited by a wide character from the wide string pointed to by wcs2.",
			"name": "wcstok",
			"params": [],
			"path": "wchar.h",
			"syntax": "wchar_t *wcstok(wchar_t *wcs1, const wchar_t *wcs2, wchar_t **ptr)",
			"type": "Linux API"
	},
	"wcstol": {
			"descr":	"Converts the initial portion of the wide-character string pointed to by nptr to a long integer value.",
			"name": "wcstol",
			"params": [],
			"path": "wchar.h",
			"syntax": "long int wcstol(const wchar_t *nptr, wchar_t **endptr, int base);",
			"type": "Linux API"
	},
	"wcstold": {
			"descr":	"Converts the initial portion of the wide-character string pointed to by nptr to a long double value.",
			"name": "wcstold",
			"params": [],
			"path": "wchar.h",
			"syntax": "long double wcstold(const wchar_t *nptr, wchar_t **endptr);",
			"type": "Linux API"
	},
	"wcstombs": {
			"descr":	"Converts the wchar_t string into a multibyte string dest.",
			"name": "wcstombs",
			"params": [],
			"path": "stdlib.h",
			"syntax": "size_t wcstombs(char *dest, const wchar_t *string, size_t count);",
			"type": "Linux API"
	},
	"wcstoul": {
			"descr":	"Converts the initial portion of the wide-character string pointed to by nptr to an unsigned long integer value.",
			"name": "wcstoul",
			"params": [],
			"path": "wchar.h",
			"syntax": "unsigned long int wcstoul(const wchar_t *nptr, wchar_t **endptr, int base);",
			"type": "Linux API"
	},
	"wcsxfrm4": {
			"descr":	"Transforms a wide-character string to values which represent character collating weights and places the resulting wide-character string into an array.",
			"name": "wcsxfrm4",
			"params": [],
			"path": "wchar.h",
			"syntax": "size_t wcsxfrm (wchar_t *wcs1, const wchar_t *wcs2, size_t n);",
			"type": "Linux API"
	},
	"wctob": {
			"descr":	"Determines whether wc corresponds to a member of the extended character set whose multibyte character representation is a single byte when in the initial shift state.",
			"name": "wctob",
			"params": [],
			"path": " stdarg.h wchar.h ",
			"syntax": "int wctob(wint_t wc);",
			"type": "Linux API"
	},
	"wctomb": {
			"descr":	"Converts the wchar_t value of character into a multibyte string.",
			"name": "wctomb",
			"params": [],
			"path": "stdlib.h",
			"syntax": "int wctomb(char *string, wchar_t character);",
			"type": "Linux API"
	},
	"wctrans": {
			"descr":	"Constructs a value with type wctrans_t that describes a mapping between wide characters identified by the string argument property.",
			"name": "wctrans",
			"params": [],
			"path": "wctype.h",
			"syntax": "wctrans_t wctrans(const char *property);",
			"type": "Linux API"
	},
	"wctype4": {
			"descr":	"Obtains handle for character property classification.",
			"name": "wctype4",
			"params": [],
			"path": "wchar.h",
			"syntax": "wctype_t wctype (const char *property);",
			"type": "Linux API"
	},
	"wcwidth": {
			"descr":	"Determine the display width of a wide character string.",
			"name": "wcwidth",
			"params": [],
			"path": "wchar.h",
			"syntax": "int wcswidth(const wchar_t *pwcs, size_t n);",
			"type": "Linux API"
	},
	"wmemchr": {
			"descr":	"Locates the first occurrence of c in the initial n wide characters of the object pointed to by s.",
			"name": "wmemchr",
			"params": [],
			"path": "wchar.h",
			"syntax": "wchar_t *wmemchr(const wchar_t *s, wchar_t c, size_t n);",
			"type": "Linux API"
	},
	"wmemcmp": {
			"descr":	"Compares the first n wide characters of the object pointed to by s1 to the first n characters of the object pointed to by s2.",
			"name": "wmemcmp",
			"params": [],
			"path": "wchar.h",
			"syntax": "int wmemcmp(const wchar_t *s1, const wchar_t *s2, size_t n);",
			"type": "Linux API"
	},
	"wmemcpy": {
			"descr":	"Copies n wide characters from the object pointed to by s2 to the object pointed to by s1.",
			"name": "wmemcpy",
			"params": [],
			"path": "wchar.h",
			"syntax": "wchar_t *wmemcpy(wchar_t *s1, const wchar_t *s2, size_t n);",
			"type": "Linux API"
	},
	"wmemmove": {
			"descr":	"Copies n wide characters from the object pointed to by s2 to the object pointed to by s1.",
			"name": "wmemmove",
			"params": [],
			"path": "wchar.h",
			"syntax": "wchar_t *wmemmove(wchar_t *s1, const wchar_t *s2, size_t n);",
			"type": "Linux API"
	},
	"wmemset": {
			"descr":	"Copies the value of c into each of the first n wide characters of the object pointed to by s.",
			"name": "wmemset",
			"params": [],
			"path": "wchar.h",
			"syntax": "wchar_t *wmemset(wchar_t *s, wchar_t c, size_t n);",
			"type": "Linux API"
	},
	"wprintf6": {
			"descr":	"Equivalent to fwprintf with the argument stdout interposed before the arguments to wprintf.",
			"name": "wprintf6",
			"params": [],
			"path": "wchar.h",
			"syntax": "int wprintf(const wchar_t *format, arg-list);",
			"type": "Linux API"
	},
	"wscanf6": {
			"descr":	"Equivalent to fwscanf with the argument stdin interposed before the arguments of wscanf.",
			"name": "wscanf6",
			"params": [],
			"path": "wchar.h",
			"syntax": "int wscanf(const wchar_t *format, arg-list);",
			"type": "Linux API"
	},
	"y0": {
			"descr":	"Calculates the Bessel function value of the second kind of order 0.",
			"name": "y0",
			"params": [],
			"path": "math.h",
			"syntax": "double y0(double x);",
			"type": "Linux API"
	},
	"y1": {
			"descr":	"Calculates the Bessel function value of the second kind of order 1.",
			"name": "y1",
			"params": [],
			"path": "math.h",
			"syntax": "double y1(double x);",
			"type": "Linux API"
	},
	"yn": {
			"descr":	"Calculates the Bessel function value of the second kind of order n.",
			"name": "yn",
			"params": [],
			"path": "math.h",
			"syntax": "double yn(int n, double x);",
			"type": "Linux API"
	},

	"a64l": {
		"descr": "convert between long and base-64",
		"name": "a64l",
		"params":[],
		"path": "stdlib.h",
		"syntax": "long a64l(const char * str64 )",
		"type": "Linux API (man 3)"
	},
	"l64a": {
		"descr": "convert between long and base-64",
		"name": "l64a",
		"params":[],
		"path": "stdlib.h",
		"syntax": "char *l64a(long value )",
		"type": "Linux API (man 3)"
	},
	"abort": {
		"descr": "cause abnormal process termination",
		"name": "abort",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void abort(void)",
		"type": "Linux API (man 3)"
	},
	"abs": {
		"descr": "compute the absolute value of an integer",
		"name": "abs",
		"params":[],
		"path": "stdlib.h, inttypes.h",
		"syntax": "int abs(int j )",
		"type": "Linux API (man 3)"
	},
	"labs": {
		"descr": "compute the absolute value of an integer",
		"name": "labs",
		"params":[],
		"path": "stdlib.h, inttypes.h",
		"syntax": "long labs(long j )",
		"type": "Linux API (man 3)"
	},
	"llabs": {
		"descr": "compute the absolute value of an integer",
		"name": "llabs",
		"params":[],
		"path": "stdlib.h, inttypes.h",
		"syntax": "long long llabs(long long j )",
		"type": "Linux API (man 3)"
	},
	"imaxabs": {
		"descr": "compute the absolute value of an integer",
		"name": "imaxabs",
		"params":[],
		"path": "stdlib.h, inttypes.h",
		"syntax": "intmax_t imaxabs(intmax_t j )",
		"type": "Linux API (man 3)"
	},
	"acos": {
		"descr": "arc cosine function",
		"name": "acos",
		"params":[],
		"path": "math.h",
		"syntax": "double acos(double x )",
		"type": "Linux API (man 3)"
	},
	"acosf": {
		"descr": "arc cosine function",
		"name": "acosf",
		"params":[],
		"path": "math.h",
		"syntax": "float acosf(float x )",
		"type": "Linux API (man 3)"
	},
	"acosl": {
		"descr": "arc cosine function",
		"name": "acosl",
		"params":[],
		"path": "math.h",
		"syntax": "long double acosl(long double x )",
		"type": "Linux API (man 3)"
	},
	"acos": {
		"descr": "arc cosine function",
		"name": "acos",
		"params":[],
		"path": "math.h",
		"syntax": "double acos(double x )",
		"type": "Linux API (man 3)"
	},
	"acosf": {
		"descr": "arc cosine function",
		"name": "acosf",
		"params":[],
		"path": "math.h",
		"syntax": "float acosf(float x )",
		"type": "Linux API (man 3)"
	},
	"acosl": {
		"descr": "arc cosine function",
		"name": "acosl",
		"params":[],
		"path": "math.h",
		"syntax": "long double acosl(long double x )",
		"type": "Linux API (man 3)"
	},
	"acosh": {
		"descr": "inverse hyperbolic cosine function",
		"name": "acosh",
		"params":[],
		"path": "math.h",
		"syntax": "double acosh(double x )",
		"type": "Linux API (man 3)"
	},
	"acoshf": {
		"descr": "inverse hyperbolic cosine function",
		"name": "acoshf",
		"params":[],
		"path": "math.h",
		"syntax": "float acoshf(float x )",
		"type": "Linux API (man 3)"
	},
	"acoshl": {
		"descr": "inverse hyperbolic cosine function",
		"name": "acoshl",
		"params":[],
		"path": "math.h",
		"syntax": "long double acoshl(long double x )",
		"type": "Linux API (man 3)"
	},
	"acosh": {
		"descr": "inverse hyperbolic cosine function",
		"name": "acosh",
		"params":[],
		"path": "math.h",
		"syntax": "double acosh(double x )",
		"type": "Linux API (man 3)"
	},
	"acoshf": {
		"descr": "inverse hyperbolic cosine function",
		"name": "acoshf",
		"params":[],
		"path": "math.h",
		"syntax": "float acoshf(float x )",
		"type": "Linux API (man 3)"
	},
	"acoshl": {
		"descr": "inverse hyperbolic cosine function",
		"name": "acoshl",
		"params":[],
		"path": "math.h",
		"syntax": "long double acoshl(long double x )",
		"type": "Linux API (man 3)"
	},
	"acosh": {
		"descr": "inverse hyperbolic cosine function",
		"name": "acosh",
		"params":[],
		"path": "math.h",
		"syntax": "double acosh(double x )",
		"type": "Linux API (man 3)"
	},
	"acoshf": {
		"descr": "inverse hyperbolic cosine function",
		"name": "acoshf",
		"params":[],
		"path": "math.h",
		"syntax": "float acoshf(float x )",
		"type": "Linux API (man 3)"
	},
	"acoshl": {
		"descr": "inverse hyperbolic cosine function",
		"name": "acoshl",
		"params":[],
		"path": "math.h",
		"syntax": "long double acoshl(long double x )",
		"type": "Linux API (man 3)"
	},
	"acos": {
		"descr": "arc cosine function",
		"name": "acos",
		"params":[],
		"path": "math.h",
		"syntax": "double acos(double x )",
		"type": "Linux API (man 3)"
	},
	"acosf": {
		"descr": "arc cosine function",
		"name": "acosf",
		"params":[],
		"path": "math.h",
		"syntax": "float acosf(float x )",
		"type": "Linux API (man 3)"
	},
	"acosl": {
		"descr": "arc cosine function",
		"name": "acosl",
		"params":[],
		"path": "math.h",
		"syntax": "long double acosl(long double x )",
		"type": "Linux API (man 3)"
	},
	"getmntent": {
		"descr": "get filesystem descriptor file entry",
		"name": "getmntent",
		"params":[],
		"path": "stdio.h, mntent.h, mntent.h",
		"syntax": "FILE *setmntent(const char * filename , const char * type )",
		"type": "Linux API (man 3)"
	},
	"setmntent": {
		"descr": "get filesystem descriptor file entry",
		"name": "setmntent",
		"params":[],
		"path": "stdio.h, mntent.h, mntent.h",
		"syntax": "struct mntent *getmntent(FILE * stream )",
		"type": "Linux API (man 3)"
	},
	"addmntent": {
		"descr": "get filesystem descriptor file entry",
		"name": "addmntent",
		"params":[],
		"path": "stdio.h, mntent.h, mntent.h",
		"syntax": "int addmntent(FILE * stream , const struct mntent * mnt )",
		"type": "Linux API (man 3)"
	},
	"endmntent": {
		"descr": "get filesystem descriptor file entry",
		"name": "endmntent",
		"params":[],
		"path": "stdio.h, mntent.h, mntent.h",
		"syntax": "int endmntent(FILE * streamp )",
		"type": "Linux API (man 3)"
	},
	"hasmntopt": {
		"descr": "get filesystem descriptor file entry",
		"name": "hasmntopt",
		"params":[],
		"path": "stdio.h, mntent.h, mntent.h",
		"syntax": "char *hasmntopt(const struct mntent * mnt , const char * opt )",
		"type": "Linux API (man 3)"
	},
	"getmntent_r": {
		"descr": "get filesystem descriptor file entry",
		"name": "getmntent_r",
		"params":[],
		"path": "stdio.h, mntent.h, mntent.h",
		"syntax": "struct mntent *getmntent_r(FILE * streamp , struct mntent * mntbuf , char * buf , int buflen )",
		"type": "Linux API (man 3)"
	},
	"addseverity": {
		"descr": "introduce new severity classes",
		"name": "addseverity",
		"params":[],
		"path": "fmtmsg.h",
		"syntax": "int addseverity(int severity , const char * s )",
		"type": "Linux API (man 3)"
	},
	"adjtime": {
		"descr": "correct the time to synchronize the system clock",
		"name": "adjtime",
		"params":[],
		"path": "",
		"syntax": "int adjtime(const struct timeval * delta , struct timeval * olddelta )",
		"type": "Linux API (man 3)"
	},
	"bsearch": {
		"descr": "binary search of a sorted array",
		"name": "bsearch",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void *bsearch(const void * key , const void * base , size_t nmemb , size_t size , int (* compar )(const void *, const void *))",
		"type": "Linux API (man 3)"
	},
	"bcmp": {
		"descr": "byte string operations",
		"name": "bcmp",
		"params":[],
		"path": "string.h",
		"syntax": "int bcmp(const void * s1 , const void * s2 , size_t n )",
		"type": "Linux API (man 3)"
	},
	"bcopy": {
		"descr": "byte string operations",
		"name": "bcopy",
		"params":[],
		"path": "string.h",
		"syntax": "void bcopy(const void * src , void * dest , size_t n )",
		"type": "Linux API (man 3)"
	},
	"bzero": {
		"descr": "byte string operations",
		"name": "bzero",
		"params":[],
		"path": "string.h",
		"syntax": "void bzero(void * s , size_t n )",
		"type": "Linux API (man 3)"
	},
	"memccpy": {
		"descr": "byte string operations",
		"name": "memccpy",
		"params":[],
		"path": "string.h",
		"syntax": "void *memccpy(void * dest , const void * src , int c , size_t n )",
		"type": "Linux API (man 3)"
	},
	"memchr": {
		"descr": "byte string operations",
		"name": "memchr",
		"params":[],
		"path": "string.h",
		"syntax": "void *memchr(const void * s , int c , size_t n )",
		"type": "Linux API (man 3)"
	},
	"memcmp": {
		"descr": "byte string operations",
		"name": "memcmp",
		"params":[],
		"path": "string.h",
		"syntax": "int memcmp(const void * s1 , const void * s2 , size_t n )",
		"type": "Linux API (man 3)"
	},
	"memcpy": {
		"descr": "byte string operations",
		"name": "memcpy",
		"params":[],
		"path": "string.h",
		"syntax": "void *memcpy(void * dest , const void * src , size_t n )",
		"type": "Linux API (man 3)"
	},
	"memfrob": {
		"descr": "byte string operations",
		"name": "memfrob",
		"params":[],
		"path": "string.h",
		"syntax": "void *memfrob(void * s , size_t n )",
		"type": "Linux API (man 3)"
	},
	"memmem": {
		"descr": "byte string operations",
		"name": "memmem",
		"params":[],
		"path": "string.h",
		"syntax": "void *memmem(const void * haystack , size_t haystacklen , const void * needle , size_t needlelen )",
		"type": "Linux API (man 3)"
	},
	"memmove": {
		"descr": "byte string operations",
		"name": "memmove",
		"params":[],
		"path": "string.h",
		"syntax": "void *memmove(void * dest , const void * src , size_t n )",
		"type": "Linux API (man 3)"
	},
	"memset": {
		"descr": "byte string operations",
		"name": "memset",
		"params":[],
		"path": "string.h",
		"syntax": "void *memset(void * s , int c , size_t n )",
		"type": "Linux API (man 3)"
	},
	"btowc": {
		"descr": "convert single byte to wide character",
		"name": "btowc",
		"params":[],
		"path": "wchar.h",
		"syntax": "wint_t btowc(int c )",
		"type": "Linux API (man 3)"
	},
	"bzero": {
		"descr": "zero a byte string",
		"name": "bzero",
		"params":[],
		"path": "strings.h, string.h",
		"syntax": "void bzero(void * s , size_t n )",
		"type": "Linux API (man 3)"
	},
	"explicit_bzero": {
		"descr": "zero a byte string",
		"name": "explicit_bzero",
		"params":[],
		"path": "strings.h, string.h",
		"syntax": "void explicit_bzero(void * s , size_t n )",
		"type": "Linux API (man 3)"
	},
	"cabs": {
		"descr": "absolute value of a complex number",
		"name": "cabs",
		"params":[],
		"path": "complex.h",
		"syntax": "double cabs(double complex z )",
		"type": "Linux API (man 3)"
	},
	"cabsf": {
		"descr": "absolute value of a complex number",
		"name": "cabsf",
		"params":[],
		"path": "complex.h",
		"syntax": "float cabsf(float complex z )",
		"type": "Linux API (man 3)"
	},
	"cabsl": {
		"descr": "absolute value of a complex number",
		"name": "cabsl",
		"params":[],
		"path": "complex.h",
		"syntax": "long double cabsl(long double complex z )",
		"type": "Linux API (man 3)"
	},
	"cabs": {
		"descr": "absolute value of a complex number",
		"name": "cabs",
		"params":[],
		"path": "complex.h",
		"syntax": "double cabs(double complex z )",
		"type": "Linux API (man 3)"
	},
	"cabsf": {
		"descr": "absolute value of a complex number",
		"name": "cabsf",
		"params":[],
		"path": "complex.h",
		"syntax": "float cabsf(float complex z )",
		"type": "Linux API (man 3)"
	},
	"cabsl": {
		"descr": "absolute value of a complex number",
		"name": "cabsl",
		"params":[],
		"path": "complex.h",
		"syntax": "long double cabsl(long double complex z )",
		"type": "Linux API (man 3)"
	},
	"cabs": {
		"descr": "absolute value of a complex number",
		"name": "cabs",
		"params":[],
		"path": "complex.h",
		"syntax": "double cabs(double complex z )",
		"type": "Linux API (man 3)"
	},
	"cabsf": {
		"descr": "absolute value of a complex number",
		"name": "cabsf",
		"params":[],
		"path": "complex.h",
		"syntax": "float cabsf(float complex z )",
		"type": "Linux API (man 3)"
	},
	"cabsl": {
		"descr": "absolute value of a complex number",
		"name": "cabsl",
		"params":[],
		"path": "complex.h",
		"syntax": "long double cabsl(long double complex z )",
		"type": "Linux API (man 3)"
	},
	"cacos": {
		"descr": "complex arc cosine",
		"name": "cacos",
		"params":[],
		"path": "complex.h",
		"syntax": "double complex cacos(double complex z )",
		"type": "Linux API (man 3)"
	},
	"cacosf": {
		"descr": "complex arc cosine",
		"name": "cacosf",
		"params":[],
		"path": "complex.h",
		"syntax": "float complex cacosf(float complex z )",
		"type": "Linux API (man 3)"
	},
	"cacosl": {
		"descr": "complex arc cosine",
		"name": "cacosl",
		"params":[],
		"path": "complex.h",
		"syntax": "long double complex cacosl(long double complex z )",
		"type": "Linux API (man 3)"
	},
	"cacos": {
		"descr": "complex arc cosine",
		"name": "cacos",
		"params":[],
		"path": "complex.h",
		"syntax": "double complex cacos(double complex z )",
		"type": "Linux API (man 3)"
	},
	"cacosf": {
		"descr": "complex arc cosine",
		"name": "cacosf",
		"params":[],
		"path": "complex.h",
		"syntax": "float complex cacosf(float complex z )",
		"type": "Linux API (man 3)"
	},
	"cacosl": {
		"descr": "complex arc cosine",
		"name": "cacosl",
		"params":[],
		"path": "complex.h",
		"syntax": "long double complex cacosl(long double complex z )",
		"type": "Linux API (man 3)"
	},
	"cacosh": {
		"descr": "complex arc hyperbolic cosine",
		"name": "cacosh",
		"params":[],
		"path": "complex.h",
		"syntax": "double complex cacosh(double complex z )",
		"type": "Linux API (man 3)"
	},
	"cacoshf": {
		"descr": "complex arc hyperbolic cosine",
		"name": "cacoshf",
		"params":[],
		"path": "complex.h",
		"syntax": "float complex cacoshf(float complex z )",
		"type": "Linux API (man 3)"
	},
	"cacoshl": {
		"descr": "complex arc hyperbolic cosine",
		"name": "cacoshl",
		"params":[],
		"path": "complex.h",
		"syntax": "long double complex cacoshl(long double complex z )",
		"type": "Linux API (man 3)"
	},
	"cacosh": {
		"descr": "complex arc hyperbolic cosine",
		"name": "cacosh",
		"params":[],
		"path": "complex.h",
		"syntax": "double complex cacosh(double complex z )",
		"type": "Linux API (man 3)"
	},
	"cacoshf": {
		"descr": "complex arc hyperbolic cosine",
		"name": "cacoshf",
		"params":[],
		"path": "complex.h",
		"syntax": "float complex cacoshf(float complex z )",
		"type": "Linux API (man 3)"
	},
	"cacoshl": {
		"descr": "complex arc hyperbolic cosine",
		"name": "cacoshl",
		"params":[],
		"path": "complex.h",
		"syntax": "long double complex cacoshl(long double complex z )",
		"type": "Linux API (man 3)"
	},
	"cacosh": {
		"descr": "complex arc hyperbolic cosine",
		"name": "cacosh",
		"params":[],
		"path": "complex.h",
		"syntax": "double complex cacosh(double complex z )",
		"type": "Linux API (man 3)"
	},
	"cacoshf": {
		"descr": "complex arc hyperbolic cosine",
		"name": "cacoshf",
		"params":[],
		"path": "complex.h",
		"syntax": "float complex cacoshf(float complex z )",
		"type": "Linux API (man 3)"
	},
	"cacoshl": {
		"descr": "complex arc hyperbolic cosine",
		"name": "cacoshl",
		"params":[],
		"path": "complex.h",
		"syntax": "long double complex cacoshl(long double complex z )",
		"type": "Linux API (man 3)"
	},
	"cacos": {
		"descr": "complex arc cosine",
		"name": "cacos",
		"params":[],
		"path": "complex.h",
		"syntax": "double complex cacos(double complex z )",
		"type": "Linux API (man 3)"
	},
	"cacosf": {
		"descr": "complex arc cosine",
		"name": "cacosf",
		"params":[],
		"path": "complex.h",
		"syntax": "float complex cacosf(float complex z )",
		"type": "Linux API (man 3)"
	},
	"cacosl": {
		"descr": "complex arc cosine",
		"name": "cacosl",
		"params":[],
		"path": "complex.h",
		"syntax": "long double complex cacosl(long double complex z )",
		"type": "Linux API (man 3)"
	},
	"malloc": {
		"descr": "allocate and free dynamic memory",
		"name": "malloc",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void *malloc(size_t size )",
		"type": "Linux API (man 3)"
	},
	"free": {
		"descr": "allocate and free dynamic memory",
		"name": "free",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void free(void *ptr )",
		"type": "Linux API (man 3)"
	},
	"calloc": {
		"descr": "allocate and free dynamic memory",
		"name": "calloc",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void *calloc(size_t nmemb , size_t size )",
		"type": "Linux API (man 3)"
	},
	"realloc": {
		"descr": "allocate and free dynamic memory",
		"name": "realloc",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void *realloc(void *ptr , size_t size )",
		"type": "Linux API (man 3)"
	},
	"reallocarray": {
		"descr": "allocate and free dynamic memory",
		"name": "reallocarray",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void *reallocarray(void *ptr , size_t nmemb , size_t size )",
		"type": "Linux API (man 3)"
	},
	"confstr": {
		"descr": "get configuration dependent string variables",
		"name": "confstr",
		"params":[],
		"path": "unistd.h",
		"syntax": "size_t confstr(int name , char * buf , size_t len )",
		"type": "Linux API (man 3)"
	},
	"conj": {
		"descr": "calculate the complex conjugate",
		"name": "conj",
		"params":[],
		"path": "complex.h",
		"syntax": "double complex conj(double complex z )",
		"type": "Linux API (man 3)"
	},
	"conjf": {
		"descr": "calculate the complex conjugate",
		"name": "conjf",
		"params":[],
		"path": "complex.h",
		"syntax": "float complex conjf(float complex z )",
		"type": "Linux API (man 3)"
	},
	"conjl": {
		"descr": "calculate the complex conjugate",
		"name": "conjl",
		"params":[],
		"path": "complex.h",
		"syntax": "long double complex conjl(long double complex z )",
		"type": "Linux API (man 3)"
	},
	"conj": {
		"descr": "calculate the complex conjugate",
		"name": "conj",
		"params":[],
		"path": "complex.h",
		"syntax": "double complex conj(double complex z )",
		"type": "Linux API (man 3)"
	},
	"conjf": {
		"descr": "calculate the complex conjugate",
		"name": "conjf",
		"params":[],
		"path": "complex.h",
		"syntax": "float complex conjf(float complex z )",
		"type": "Linux API (man 3)"
	},
	"conjl": {
		"descr": "calculate the complex conjugate",
		"name": "conjl",
		"params":[],
		"path": "complex.h",
		"syntax": "long double complex conjl(long double complex z )",
		"type": "Linux API (man 3)"
	},
	"conj": {
		"descr": "calculate the complex conjugate",
		"name": "conj",
		"params":[],
		"path": "complex.h",
		"syntax": "double complex conj(double complex z )",
		"type": "Linux API (man 3)"
	},
	"conjf": {
		"descr": "calculate the complex conjugate",
		"name": "conjf",
		"params":[],
		"path": "complex.h",
		"syntax": "float complex conjf(float complex z )",
		"type": "Linux API (man 3)"
	},
	"conjl": {
		"descr": "calculate the complex conjugate",
		"name": "conjl",
		"params":[],
		"path": "complex.h",
		"syntax": "long double complex conjl(long double complex z )",
		"type": "Linux API (man 3)"
	},
	"copysign": {
		"descr": "copy sign of a number",
		"name": "copysign",
		"params":[],
		"path": "math.h",
		"syntax": "double copysign(double x , double y )",
		"type": "Linux API (man 3)"
	},
	"copysignf": {
		"descr": "copy sign of a number",
		"name": "copysignf",
		"params":[],
		"path": "math.h",
		"syntax": "float copysignf(float x , float y )",
		"type": "Linux API (man 3)"
	},
	"copysignl": {
		"descr": "copy sign of a number",
		"name": "copysignl",
		"params":[],
		"path": "math.h",
		"syntax": "long double copysignl(long double x , long double y )",
		"type": "Linux API (man 3)"
	},
	"copysign": {
		"descr": "copy sign of a number",
		"name": "copysign",
		"params":[],
		"path": "math.h",
		"syntax": "double copysign(double x , double y )",
		"type": "Linux API (man 3)"
	},
	"copysignf": {
		"descr": "copy sign of a number",
		"name": "copysignf",
		"params":[],
		"path": "math.h",
		"syntax": "float copysignf(float x , float y )",
		"type": "Linux API (man 3)"
	},
	"copysignl": {
		"descr": "copy sign of a number",
		"name": "copysignl",
		"params":[],
		"path": "math.h",
		"syntax": "long double copysignl(long double x , long double y )",
		"type": "Linux API (man 3)"
	},
	"copysign": {
		"descr": "copy sign of a number",
		"name": "copysign",
		"params":[],
		"path": "math.h",
		"syntax": "double copysign(double x , double y )",
		"type": "Linux API (man 3)"
	},
	"copysignf": {
		"descr": "copy sign of a number",
		"name": "copysignf",
		"params":[],
		"path": "math.h",
		"syntax": "float copysignf(float x , float y )",
		"type": "Linux API (man 3)"
	},
	"copysignl": {
		"descr": "copy sign of a number",
		"name": "copysignl",
		"params":[],
		"path": "math.h",
		"syntax": "long double copysignl(long double x , long double y )",
		"type": "Linux API (man 3)"
	},
	"cos": {
		"descr": "cosine function",
		"name": "cos",
		"params":[],
		"path": "math.h",
		"syntax": "double cos(double x )",
		"type": "Linux API (man 3)"
	},
	"cosf": {
		"descr": "cosine function",
		"name": "cosf",
		"params":[],
		"path": "math.h",
		"syntax": "float cosf(float x )",
		"type": "Linux API (man 3)"
	},
	"cosl": {
		"descr": "cosine function",
		"name": "cosl",
		"params":[],
		"path": "math.h",
		"syntax": "long double cosl(long double x )",
		"type": "Linux API (man 3)"
	},
	"cos": {
		"descr": "cosine function",
		"name": "cos",
		"params":[],
		"path": "math.h",
		"syntax": "double cos(double x )",
		"type": "Linux API (man 3)"
	},
	"cosf": {
		"descr": "cosine function",
		"name": "cosf",
		"params":[],
		"path": "math.h",
		"syntax": "float cosf(float x )",
		"type": "Linux API (man 3)"
	},
	"cosl": {
		"descr": "cosine function",
		"name": "cosl",
		"params":[],
		"path": "math.h",
		"syntax": "long double cosl(long double x )",
		"type": "Linux API (man 3)"
	},
	"cosh": {
		"descr": "hyperbolic cosine function",
		"name": "cosh",
		"params":[],
		"path": "math.h",
		"syntax": "double cosh(double x )",
		"type": "Linux API (man 3)"
	},
	"coshf": {
		"descr": "hyperbolic cosine function",
		"name": "coshf",
		"params":[],
		"path": "math.h",
		"syntax": "float coshf(float x )",
		"type": "Linux API (man 3)"
	},
	"coshl": {
		"descr": "hyperbolic cosine function",
		"name": "coshl",
		"params":[],
		"path": "math.h",
		"syntax": "long double coshl(long double x )",
		"type": "Linux API (man 3)"
	},
	"cosh": {
		"descr": "hyperbolic cosine function",
		"name": "cosh",
		"params":[],
		"path": "math.h",
		"syntax": "double cosh(double x )",
		"type": "Linux API (man 3)"
	},
	"coshf": {
		"descr": "hyperbolic cosine function",
		"name": "coshf",
		"params":[],
		"path": "math.h",
		"syntax": "float coshf(float x )",
		"type": "Linux API (man 3)"
	},
	"coshl": {
		"descr": "hyperbolic cosine function",
		"name": "coshl",
		"params":[],
		"path": "math.h",
		"syntax": "long double coshl(long double x )",
		"type": "Linux API (man 3)"
	},
	"cosh": {
		"descr": "hyperbolic cosine function",
		"name": "cosh",
		"params":[],
		"path": "math.h",
		"syntax": "double cosh(double x )",
		"type": "Linux API (man 3)"
	},
	"coshf": {
		"descr": "hyperbolic cosine function",
		"name": "coshf",
		"params":[],
		"path": "math.h",
		"syntax": "float coshf(float x )",
		"type": "Linux API (man 3)"
	},
	"coshl": {
		"descr": "hyperbolic cosine function",
		"name": "coshl",
		"params":[],
		"path": "math.h",
		"syntax": "long double coshl(long double x )",
		"type": "Linux API (man 3)"
	},
	"cos": {
		"descr": "cosine function",
		"name": "cos",
		"params":[],
		"path": "math.h",
		"syntax": "double cos(double x )",
		"type": "Linux API (man 3)"
	},
	"cosf": {
		"descr": "cosine function",
		"name": "cosf",
		"params":[],
		"path": "math.h",
		"syntax": "float cosf(float x )",
		"type": "Linux API (man 3)"
	},
	"cosl": {
		"descr": "cosine function",
		"name": "cosl",
		"params":[],
		"path": "math.h",
		"syntax": "long double cosl(long double x )",
		"type": "Linux API (man 3)"
	},
	"cpow": {
		"descr": "complex power function",
		"name": "cpow",
		"params":[],
		"path": "complex.h",
		"syntax": "double complex cpow(double complex x , complex double z )",
		"type": "Linux API (man 3)"
	},
	"cpowf": {
		"descr": "complex power function",
		"name": "cpowf",
		"params":[],
		"path": "complex.h",
		"syntax": "float complex cpowf(float complex x , complex float z )",
		"type": "Linux API (man 3)"
	},
	"cpowl": {
		"descr": "complex power function",
		"name": "cpowl",
		"params":[],
		"path": "complex.h",
		"syntax": "long double complex cpowl(long double complex x , complex long double z )",
		"type": "Linux API (man 3)"
	},
	"cpow": {
		"descr": "complex power function",
		"name": "cpow",
		"params":[],
		"path": "complex.h",
		"syntax": "double complex cpow(double complex x , complex double z )",
		"type": "Linux API (man 3)"
	},
	"cpowf": {
		"descr": "complex power function",
		"name": "cpowf",
		"params":[],
		"path": "complex.h",
		"syntax": "float complex cpowf(float complex x , complex float z )",
		"type": "Linux API (man 3)"
	},
	"cpowl": {
		"descr": "complex power function",
		"name": "cpowl",
		"params":[],
		"path": "complex.h",
		"syntax": "long double complex cpowl(long double complex x , complex long double z )",
		"type": "Linux API (man 3)"
	},
	"cpow": {
		"descr": "complex power function",
		"name": "cpow",
		"params":[],
		"path": "complex.h",
		"syntax": "double complex cpow(double complex x , complex double z )",
		"type": "Linux API (man 3)"
	},
	"cpowf": {
		"descr": "complex power function",
		"name": "cpowf",
		"params":[],
		"path": "complex.h",
		"syntax": "float complex cpowf(float complex x , complex float z )",
		"type": "Linux API (man 3)"
	},
	"cpowl": {
		"descr": "complex power function",
		"name": "cpowl",
		"params":[],
		"path": "complex.h",
		"syntax": "long double complex cpowl(long double complex x , complex long double z )",
		"type": "Linux API (man 3)"
	},
	"cproj": {
		"descr": "project into Riemann Sphere",
		"name": "cproj",
		"params":[],
		"path": "complex.h",
		"syntax": "double complex cproj(double complex z )",
		"type": "Linux API (man 3)"
	},
	"cprojf": {
		"descr": "project into Riemann Sphere",
		"name": "cprojf",
		"params":[],
		"path": "complex.h",
		"syntax": "float complex cprojf(float complex z )",
		"type": "Linux API (man 3)"
	},
	"cprojl": {
		"descr": "project into Riemann Sphere",
		"name": "cprojl",
		"params":[],
		"path": "complex.h",
		"syntax": "long double complex cprojl(long double complex z )",
		"type": "Linux API (man 3)"
	},
	"cproj": {
		"descr": "project into Riemann Sphere",
		"name": "cproj",
		"params":[],
		"path": "complex.h",
		"syntax": "double complex cproj(double complex z )",
		"type": "Linux API (man 3)"
	},
	"cprojf": {
		"descr": "project into Riemann Sphere",
		"name": "cprojf",
		"params":[],
		"path": "complex.h",
		"syntax": "float complex cprojf(float complex z )",
		"type": "Linux API (man 3)"
	},
	"cprojl": {
		"descr": "project into Riemann Sphere",
		"name": "cprojl",
		"params":[],
		"path": "complex.h",
		"syntax": "long double complex cprojl(long double complex z )",
		"type": "Linux API (man 3)"
	},
	"cproj": {
		"descr": "project into Riemann Sphere",
		"name": "cproj",
		"params":[],
		"path": "complex.h",
		"syntax": "double complex cproj(double complex z )",
		"type": "Linux API (man 3)"
	},
	"cprojf": {
		"descr": "project into Riemann Sphere",
		"name": "cprojf",
		"params":[],
		"path": "complex.h",
		"syntax": "float complex cprojf(float complex z )",
		"type": "Linux API (man 3)"
	},
	"cprojl": {
		"descr": "project into Riemann Sphere",
		"name": "cprojl",
		"params":[],
		"path": "complex.h",
		"syntax": "long double complex cprojl(long double complex z )",
		"type": "Linux API (man 3)"
	},
	"dgettext": {
		"descr": "translate message",
		"name": "dgettext",
		"params":[],
		"path": "libintl.h",
		"syntax": "char * dgettext (const char * domainname , const char * msgid )",
		"type": "Linux API (man 3)"
	},
	"dcgettext": {
		"descr": "translate message",
		"name": "dcgettext",
		"params":[],
		"path": "libintl.h",
		"syntax": "char * dcgettext (const char * domainname , const char * msgid , int category )",
		"type": "Linux API (man 3)"
	},
	"dgettext": {
		"descr": "translate message",
		"name": "dgettext",
		"params":[],
		"path": "libintl.h",
		"syntax": "char * dgettext (const char * domainname , const char * msgid )",
		"type": "Linux API (man 3)"
	},
	"dcgettext": {
		"descr": "translate message",
		"name": "dcgettext",
		"params":[],
		"path": "libintl.h",
		"syntax": "char * dcgettext (const char * domainname , const char * msgid , int category )",
		"type": "Linux API (man 3)"
	},
	"dirfd": {
		"descr": "get directory stream file descriptor",
		"name": "dirfd",
		"params":[],
		"path": "dirent.h",
		"syntax": "int dirfd(DIR * dirp )",
		"type": "Linux API (man 3)"
	},
	"basename": {
		"descr": "parse pathname components",
		"name": "basename",
		"params":[],
		"path": "libgen.h",
		"syntax": "char *dirname(char * path )",
		"type": "Linux API (man 3)"
	},
	"dirname": {
		"descr": "parse pathname components",
		"name": "dirname",
		"params":[],
		"path": "libgen.h",
		"syntax": "char *basename(char * path )",
		"type": "Linux API (man 3)"
	},
	"div": {
		"descr": "compute quotient and remainder of",
		"name": "div",
		"params":[],
		"path": "stdlib.h, inttypes.h",
		"syntax": "div_t div(int numerator , int denominator )",
		"type": "Linux API (man 3)"
	},
	"ldiv": {
		"descr": "compute quotient and remainder of",
		"name": "ldiv",
		"params":[],
		"path": "stdlib.h, inttypes.h",
		"syntax": "ldiv_t ldiv(long numerator , long denominator )",
		"type": "Linux API (man 3)"
	},
	"lldiv": {
		"descr": "compute quotient and remainder of",
		"name": "lldiv",
		"params":[],
		"path": "stdlib.h, inttypes.h",
		"syntax": "lldiv_t lldiv(long long numerator , long long denominator )",
		"type": "Linux API (man 3)"
	},
	"imaxdiv": {
		"descr": "compute quotient and remainder of",
		"name": "imaxdiv",
		"params":[],
		"path": "stdlib.h, inttypes.h",
		"syntax": "imaxdiv_t imaxdiv(intmax_t numerator , intmax_t denominator )",
		"type": "Linux API (man 3)"
	},
	"dngettext": {
		"descr": "translate message and choose plural form",
		"name": "dngettext",
		"params":[],
		"path": "libintl.h",
		"syntax": "char * dngettext (const char * domainname , const char * msgid , const char * msgid_plural , unsigned long int n )",
		"type": "Linux API (man 3)"
	},
	"dcngettext": {
		"descr": "translate message and choose plural form",
		"name": "dcngettext",
		"params":[],
		"path": "libintl.h",
		"syntax": "char * dcngettext (const char * domainname , const char * msgid , const char * msgid_plural , unsigned long int n , int category )",
		"type": "Linux API (man 3)"
	},
	"drand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "drand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "double drand48(void)",
		"type": "Linux API (man 3)"
	},
	"erand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "erand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "double erand48(unsigned short xsubi [3])",
		"type": "Linux API (man 3)"
	},
	"lrand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "lrand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "long lrand48(void)",
		"type": "Linux API (man 3)"
	},
	"nrand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "nrand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "long nrand48(unsigned short xsubi [3])",
		"type": "Linux API (man 3)"
	},
	"mrand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "mrand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "long mrand48(void)",
		"type": "Linux API (man 3)"
	},
	"jrand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "jrand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "long jrand48(unsigned short xsubi [3])",
		"type": "Linux API (man 3)"
	},
	"srand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "srand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void srand48(long seedval )",
		"type": "Linux API (man 3)"
	},
	"seed48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "seed48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "unsigned short *seed48(unsigned short seed16v [3])",
		"type": "Linux API (man 3)"
	},
	"lcong48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "lcong48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void lcong48(unsigned short param [7])",
		"type": "Linux API (man 3)"
	},
	"error": {
		"descr": "glibc error reporting functions",
		"name": "error",
		"params":[],
		"path": "error.h",
		"syntax": "void error(int status , int errnum , const char * format , ...)",
		"type": "Linux API (man 3)"
	},
	"error_at_line": {
		"descr": "glibc error reporting functions",
		"name": "error_at_line",
		"params":[],
		"path": "error.h",
		"syntax": "void error_at_line(int status , int errnum , const char * filename , unsigned int linenum , const char * format , ...)",
		"type": "Linux API (man 3)"
	},
	"error_message_count": {
		"descr": "glibc error reporting functions",
		"name": "error_message_count",
		"params":[],
		"path": "error.h",
		"syntax": "unsigned int error_message_count ",
		"type": "Linux API (man 3)"
	},
	"error_one_per_line": {
		"descr": "glibc error reporting functions",
		"name": "error_one_per_line",
		"params":[],
		"path": "error.h",
		"syntax": "int error_one_per_line ",
		"type": "Linux API (man 3)"
	},
	"error_print_progname": {
		"descr": "glibc error reporting functions",
		"name": "error_print_progname",
		"params":[],
		"path": "error.h",
		"syntax": "void (* error_print_progname ) (void)",
		"type": "Linux API (man 3)"
	},
	"error": {
		"descr": "glibc error reporting functions",
		"name": "error",
		"params":[],
		"path": "error.h",
		"syntax": "void error(int status , int errnum , const char * format , ...)",
		"type": "Linux API (man 3)"
	},
	"error_at_line": {
		"descr": "glibc error reporting functions",
		"name": "error_at_line",
		"params":[],
		"path": "error.h",
		"syntax": "void error_at_line(int status , int errnum , const char * filename , unsigned int linenum , const char * format , ...)",
		"type": "Linux API (man 3)"
	},
	"error_message_count": {
		"descr": "glibc error reporting functions",
		"name": "error_message_count",
		"params":[],
		"path": "error.h",
		"syntax": "unsigned int error_message_count ",
		"type": "Linux API (man 3)"
	},
	"error_one_per_line": {
		"descr": "glibc error reporting functions",
		"name": "error_one_per_line",
		"params":[],
		"path": "error.h",
		"syntax": "int error_one_per_line ",
		"type": "Linux API (man 3)"
	},
	"error_print_progname": {
		"descr": "glibc error reporting functions",
		"name": "error_print_progname",
		"params":[],
		"path": "error.h",
		"syntax": "void (* error_print_progname ) (void)",
		"type": "Linux API (man 3)"
	},
	"err": {
		"descr": "formatted error messages",
		"name": "err",
		"params":[],
		"path": "err.h, stdarg.h",
		"syntax": "void err(int eval , const char * fmt , ...)",
		"type": "Linux API (man 3)"
	},
	"verr": {
		"descr": "formatted error messages",
		"name": "verr",
		"params":[],
		"path": "err.h, stdarg.h",
		"syntax": "void errx(int eval , const char * fmt , ...)",
		"type": "Linux API (man 3)"
	},
	"errx": {
		"descr": "formatted error messages",
		"name": "errx",
		"params":[],
		"path": "err.h, stdarg.h",
		"syntax": "void warn(const char * fmt , ...)",
		"type": "Linux API (man 3)"
	},
	"verrx": {
		"descr": "formatted error messages",
		"name": "verrx",
		"params":[],
		"path": "err.h, stdarg.h",
		"syntax": "void warnx(const char * fmt , ...)",
		"type": "Linux API (man 3)"
	},
	"warn": {
		"descr": "formatted error messages",
		"name": "warn",
		"params":[],
		"path": "err.h, stdarg.h",
		"syntax": "void verr(int eval , const char * fmt , va_list args )",
		"type": "Linux API (man 3)"
	},
	"vwarn": {
		"descr": "formatted error messages",
		"name": "vwarn",
		"params":[],
		"path": "err.h, stdarg.h",
		"syntax": "void verrx(int eval , const char * fmt , va_list args )",
		"type": "Linux API (man 3)"
	},
	"warnx": {
		"descr": "formatted error messages",
		"name": "warnx",
		"params":[],
		"path": "err.h, stdarg.h",
		"syntax": "void vwarn(const char * fmt , va_list args )",
		"type": "Linux API (man 3)"
	},
	"vwarnx": {
		"descr": "formatted error messages",
		"name": "vwarnx",
		"params":[],
		"path": "err.h, stdarg.h",
		"syntax": "void vwarnx(const char * fmt , va_list args )",
		"type": "Linux API (man 3)"
	},
	"openpty": {
		"descr": "terminal utility functions",
		"name": "openpty",
		"params":[],
		"path": "pty.h, utmp.h",
		"syntax": "int openpty(int * amaster , int * aslave , char * name , const struct termios * termp , const struct winsize * winp )",
		"type": "Linux API (man 3)"
	},
	"login_tty": {
		"descr": "terminal utility functions",
		"name": "login_tty",
		"params":[],
		"path": "pty.h, utmp.h",
		"syntax": "pid_t forkpty(int * amaster , char * name , const struct termios * termp , const struct winsize * winp )",
		"type": "Linux API (man 3)"
	},
	"forkpty": {
		"descr": "terminal utility functions",
		"name": "forkpty",
		"params":[],
		"path": "pty.h, utmp.h",
		"syntax": "int login_tty(int fd )",
		"type": "Linux API (man 3)"
	},
	"fpathconf": {
		"descr": "get configuration values for files",
		"name": "fpathconf",
		"params":[],
		"path": "unistd.h",
		"syntax": "long fpathconf(int fd , int name )",
		"type": "Linux API (man 3)"
	},
	"pathconf": {
		"descr": "get configuration values for files",
		"name": "pathconf",
		"params":[],
		"path": "unistd.h",
		"syntax": "long pathconf(const char * path , int name )",
		"type": "Linux API (man 3)"
	},
	"fpclassify": {
		"descr": "floating-point",
		"name": "fpclassify",
		"params":[],
		"path": "math.h",
		"syntax": "int fpclassify( x )",
		"type": "Linux API (man 3)"
	},
	"isfinite": {
		"descr": "floating-point",
		"name": "isfinite",
		"params":[],
		"path": "math.h",
		"syntax": "int isfinite( x )",
		"type": "Linux API (man 3)"
	},
	"isnormal": {
		"descr": "floating-point",
		"name": "isnormal",
		"params":[],
		"path": "math.h",
		"syntax": "int isnormal( x )",
		"type": "Linux API (man 3)"
	},
	"isnan": {
		"descr": "floating-point",
		"name": "isnan",
		"params":[],
		"path": "math.h",
		"syntax": "int isnan( x )",
		"type": "Linux API (man 3)"
	},
	"isinf": {
		"descr": "floating-point",
		"name": "isinf",
		"params":[],
		"path": "math.h",
		"syntax": "int isinf( x )",
		"type": "Linux API (man 3)"
	},
	"dgettext": {
		"descr": "translate message",
		"name": "dgettext",
		"params":[],
		"path": "libintl.h",
		"syntax": "char * dgettext (const char * domainname , const char * msgid )",
		"type": "Linux API (man 3)"
	},
	"dcgettext": {
		"descr": "translate message",
		"name": "dcgettext",
		"params":[],
		"path": "libintl.h",
		"syntax": "char * dcgettext (const char * domainname , const char * msgid , int category )",
		"type": "Linux API (man 3)"
	},
	"getttyent": {
		"descr": "get ttys file entry",
		"name": "getttyent",
		"params":[],
		"path": "ttyent.h",
		"syntax": "struct ttyent *getttyent(void)",
		"type": "Linux API (man 3)"
	},
	"getttynam": {
		"descr": "get ttys file entry",
		"name": "getttynam",
		"params":[],
		"path": "ttyent.h",
		"syntax": "struct ttyent *getttynam(const char * name )",
		"type": "Linux API (man 3)"
	},
	"setttyent": {
		"descr": "get ttys file entry",
		"name": "setttyent",
		"params":[],
		"path": "ttyent.h",
		"syntax": "int setttyent(void)",
		"type": "Linux API (man 3)"
	},
	"endttyent": {
		"descr": "get ttys file entry",
		"name": "endttyent",
		"params":[],
		"path": "ttyent.h",
		"syntax": "int endttyent(void)",
		"type": "Linux API (man 3)"
	},
	"getumask": {
		"descr": "get file creation mask",
		"name": "getumask",
		"params":[],
		"path": "",
		"syntax": "mode_t getumask(void)",
		"type": "Linux API (man 3)"
	},
	"getutent": {
		"descr": "access utmp file entries",
		"name": "getutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutent(void)",
		"type": "Linux API (man 3)"
	},
	"getutid": {
		"descr": "access utmp file entries",
		"name": "getutid",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutid(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"getutline": {
		"descr": "access utmp file entries",
		"name": "getutline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"pututline": {
		"descr": "access utmp file entries",
		"name": "pututline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *pututline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"setutent": {
		"descr": "access utmp file entries",
		"name": "setutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void setutent(void)",
		"type": "Linux API (man 3)"
	},
	"endutent": {
		"descr": "access utmp file entries",
		"name": "endutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void endutent(void)",
		"type": "Linux API (man 3)"
	},
	"utmpname": {
		"descr": "access utmp file entries",
		"name": "utmpname",
		"params":[],
		"path": "utmp.h",
		"syntax": "int utmpname(const char * file )",
		"type": "Linux API (man 3)"
	},
	"getutent": {
		"descr": "access utmp file entries",
		"name": "getutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutent(void)",
		"type": "Linux API (man 3)"
	},
	"getutid": {
		"descr": "access utmp file entries",
		"name": "getutid",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutid(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"getutline": {
		"descr": "access utmp file entries",
		"name": "getutline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"pututline": {
		"descr": "access utmp file entries",
		"name": "pututline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *pututline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"setutent": {
		"descr": "access utmp file entries",
		"name": "setutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void setutent(void)",
		"type": "Linux API (man 3)"
	},
	"endutent": {
		"descr": "access utmp file entries",
		"name": "endutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void endutent(void)",
		"type": "Linux API (man 3)"
	},
	"utmpname": {
		"descr": "access utmp file entries",
		"name": "utmpname",
		"params":[],
		"path": "utmp.h",
		"syntax": "int utmpname(const char * file )",
		"type": "Linux API (man 3)"
	},
	"getutent": {
		"descr": "access utmp file entries",
		"name": "getutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutent(void)",
		"type": "Linux API (man 3)"
	},
	"getutid": {
		"descr": "access utmp file entries",
		"name": "getutid",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutid(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"getutline": {
		"descr": "access utmp file entries",
		"name": "getutline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"pututline": {
		"descr": "access utmp file entries",
		"name": "pututline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *pututline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"setutent": {
		"descr": "access utmp file entries",
		"name": "setutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void setutent(void)",
		"type": "Linux API (man 3)"
	},
	"endutent": {
		"descr": "access utmp file entries",
		"name": "endutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void endutent(void)",
		"type": "Linux API (man 3)"
	},
	"utmpname": {
		"descr": "access utmp file entries",
		"name": "utmpname",
		"params":[],
		"path": "utmp.h",
		"syntax": "int utmpname(const char * file )",
		"type": "Linux API (man 3)"
	},
	"getutent": {
		"descr": "access utmp file entries",
		"name": "getutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutent(void)",
		"type": "Linux API (man 3)"
	},
	"getutid": {
		"descr": "access utmp file entries",
		"name": "getutid",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutid(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"getutline": {
		"descr": "access utmp file entries",
		"name": "getutline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"pututline": {
		"descr": "access utmp file entries",
		"name": "pututline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *pututline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"setutent": {
		"descr": "access utmp file entries",
		"name": "setutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void setutent(void)",
		"type": "Linux API (man 3)"
	},
	"endutent": {
		"descr": "access utmp file entries",
		"name": "endutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void endutent(void)",
		"type": "Linux API (man 3)"
	},
	"utmpname": {
		"descr": "access utmp file entries",
		"name": "utmpname",
		"params":[],
		"path": "utmp.h",
		"syntax": "int utmpname(const char * file )",
		"type": "Linux API (man 3)"
	},
	"getutent": {
		"descr": "access utmp file entries",
		"name": "getutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutent(void)",
		"type": "Linux API (man 3)"
	},
	"getutid": {
		"descr": "access utmp file entries",
		"name": "getutid",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutid(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"getutline": {
		"descr": "access utmp file entries",
		"name": "getutline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"pututline": {
		"descr": "access utmp file entries",
		"name": "pututline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *pututline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"setutent": {
		"descr": "access utmp file entries",
		"name": "setutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void setutent(void)",
		"type": "Linux API (man 3)"
	},
	"endutent": {
		"descr": "access utmp file entries",
		"name": "endutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void endutent(void)",
		"type": "Linux API (man 3)"
	},
	"utmpname": {
		"descr": "access utmp file entries",
		"name": "utmpname",
		"params":[],
		"path": "utmp.h",
		"syntax": "int utmpname(const char * file )",
		"type": "Linux API (man 3)"
	},
	"getutent": {
		"descr": "access utmp file entries",
		"name": "getutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutent(void)",
		"type": "Linux API (man 3)"
	},
	"getutid": {
		"descr": "access utmp file entries",
		"name": "getutid",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutid(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"getutline": {
		"descr": "access utmp file entries",
		"name": "getutline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"pututline": {
		"descr": "access utmp file entries",
		"name": "pututline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *pututline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"setutent": {
		"descr": "access utmp file entries",
		"name": "setutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void setutent(void)",
		"type": "Linux API (man 3)"
	},
	"endutent": {
		"descr": "access utmp file entries",
		"name": "endutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void endutent(void)",
		"type": "Linux API (man 3)"
	},
	"utmpname": {
		"descr": "access utmp file entries",
		"name": "utmpname",
		"params":[],
		"path": "utmp.h",
		"syntax": "int utmpname(const char * file )",
		"type": "Linux API (man 3)"
	},
	"getutmp": {
		"descr": "copy utmp structure to utmpx, and vice versa",
		"name": "getutmp",
		"params":[],
		"path": "utmpx.h",
		"syntax": "void getutmp(const struct utmpx * ux , struct utmp * u )",
		"type": "Linux API (man 3)"
	},
	"getutmpx": {
		"descr": "copy utmp structure to utmpx, and vice versa",
		"name": "getutmpx",
		"params":[],
		"path": "utmpx.h",
		"syntax": "void getutmpx(const struct utmp * u , struct utmpx * ux )",
		"type": "Linux API (man 3)"
	},
	"getutmp": {
		"descr": "copy utmp structure to utmpx, and vice versa",
		"name": "getutmp",
		"params":[],
		"path": "utmpx.h",
		"syntax": "void getutmp(const struct utmpx * ux , struct utmp * u )",
		"type": "Linux API (man 3)"
	},
	"getutmpx": {
		"descr": "copy utmp structure to utmpx, and vice versa",
		"name": "getutmpx",
		"params":[],
		"path": "utmpx.h",
		"syntax": "void getutmpx(const struct utmp * u , struct utmpx * ux )",
		"type": "Linux API (man 3)"
	},
	"getutent": {
		"descr": "access utmp file entries",
		"name": "getutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutent(void)",
		"type": "Linux API (man 3)"
	},
	"getutid": {
		"descr": "access utmp file entries",
		"name": "getutid",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutid(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"getutline": {
		"descr": "access utmp file entries",
		"name": "getutline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"pututline": {
		"descr": "access utmp file entries",
		"name": "pututline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *pututline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"setutent": {
		"descr": "access utmp file entries",
		"name": "setutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void setutent(void)",
		"type": "Linux API (man 3)"
	},
	"endutent": {
		"descr": "access utmp file entries",
		"name": "endutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void endutent(void)",
		"type": "Linux API (man 3)"
	},
	"utmpname": {
		"descr": "access utmp file entries",
		"name": "utmpname",
		"params":[],
		"path": "utmp.h",
		"syntax": "int utmpname(const char * file )",
		"type": "Linux API (man 3)"
	},
	"getutent": {
		"descr": "access utmp file entries",
		"name": "getutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutent(void)",
		"type": "Linux API (man 3)"
	},
	"getutid": {
		"descr": "access utmp file entries",
		"name": "getutid",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutid(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"getutline": {
		"descr": "access utmp file entries",
		"name": "getutline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"pututline": {
		"descr": "access utmp file entries",
		"name": "pututline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *pututline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"setutent": {
		"descr": "access utmp file entries",
		"name": "setutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void setutent(void)",
		"type": "Linux API (man 3)"
	},
	"endutent": {
		"descr": "access utmp file entries",
		"name": "endutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void endutent(void)",
		"type": "Linux API (man 3)"
	},
	"utmpname": {
		"descr": "access utmp file entries",
		"name": "utmpname",
		"params":[],
		"path": "utmp.h",
		"syntax": "int utmpname(const char * file )",
		"type": "Linux API (man 3)"
	},
	"getutent": {
		"descr": "access utmp file entries",
		"name": "getutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutent(void)",
		"type": "Linux API (man 3)"
	},
	"getutid": {
		"descr": "access utmp file entries",
		"name": "getutid",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutid(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"getutline": {
		"descr": "access utmp file entries",
		"name": "getutline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"pututline": {
		"descr": "access utmp file entries",
		"name": "pututline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *pututline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"setutent": {
		"descr": "access utmp file entries",
		"name": "setutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void setutent(void)",
		"type": "Linux API (man 3)"
	},
	"endutent": {
		"descr": "access utmp file entries",
		"name": "endutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void endutent(void)",
		"type": "Linux API (man 3)"
	},
	"utmpname": {
		"descr": "access utmp file entries",
		"name": "utmpname",
		"params":[],
		"path": "utmp.h",
		"syntax": "int utmpname(const char * file )",
		"type": "Linux API (man 3)"
	},
	"getw": {
		"descr": "input and output of words (ints)",
		"name": "getw",
		"params":[],
		"path": "stdio.h",
		"syntax": "int getw(FILE * stream )",
		"type": "Linux API (man 3)"
	},
	"putw": {
		"descr": "input and output of words (ints)",
		"name": "putw",
		"params":[],
		"path": "stdio.h",
		"syntax": "int putw(int w , FILE * stream )",
		"type": "Linux API (man 3)"
	},
	"fgetwc": {
		"descr": "read a wide character from a FILE stream",
		"name": "fgetwc",
		"params":[],
		"path": "stdio.h, wchar.h",
		"syntax": "wint_t fgetwc(FILE * stream )",
		"type": "Linux API (man 3)"
	},
	"getwc": {
		"descr": "read a wide character from a FILE stream",
		"name": "getwc",
		"params":[],
		"path": "stdio.h, wchar.h",
		"syntax": "wint_t getwc(FILE * stream )",
		"type": "Linux API (man 3)"
	},
	"getwchar": {
		"descr": "read a wide character from standard input",
		"name": "getwchar",
		"params":[],
		"path": "wchar.h",
		"syntax": "wint_t getwchar(void)",
		"type": "Linux API (man 3)"
	},
	"asctime": {
		"descr": "transform date and time to broken-down time or ASCII",
		"name": "asctime",
		"params":[],
		"path": "time.h",
		"syntax": "char *asctime(const struct tm * tm )",
		"type": "Linux API (man 3)"
	},
	"ctime": {
		"descr": "transform date and time to broken-down time or ASCII",
		"name": "ctime",
		"params":[],
		"path": "time.h",
		"syntax": "char *asctime_r(const struct tm * tm , char * buf )",
		"type": "Linux API (man 3)"
	},
	"gmtime": {
		"descr": "transform date and time to broken-down time or ASCII",
		"name": "gmtime",
		"params":[],
		"path": "time.h",
		"syntax": "char *ctime(const time_t * timep )",
		"type": "Linux API (man 3)"
	},
	"localtime": {
		"descr": "transform date and time to broken-down time or ASCII",
		"name": "localtime",
		"params":[],
		"path": "time.h",
		"syntax": "char *ctime_r(const time_t * timep , char * buf )",
		"type": "Linux API (man 3)"
	},
	"mktime": {
		"descr": "transform date and time to broken-down time or ASCII",
		"name": "mktime",
		"params":[],
		"path": "time.h",
		"syntax": "struct tm *gmtime(const time_t * timep )",
		"type": "Linux API (man 3)"
	},
	"asctime_r": {
		"descr": "transform date and time to broken-down time or ASCII",
		"name": "asctime_r",
		"params":[],
		"path": "time.h",
		"syntax": "struct tm *gmtime_r(const time_t * timep , struct tm * result )",
		"type": "Linux API (man 3)"
	},
	"ctime_r": {
		"descr": "transform date and time to broken-down time or ASCII",
		"name": "ctime_r",
		"params":[],
		"path": "time.h",
		"syntax": "struct tm *localtime(const time_t * timep )",
		"type": "Linux API (man 3)"
	},
	"gmtime_r": {
		"descr": "transform date and time to broken-down time or ASCII",
		"name": "gmtime_r",
		"params":[],
		"path": "time.h",
		"syntax": "struct tm *localtime_r(const time_t * timep , struct tm * result )",
		"type": "Linux API (man 3)"
	},
	"localtime_r": {
		"descr": "transform date and time to broken-down time or ASCII",
		"name": "localtime_r",
		"params":[],
		"path": "time.h",
		"syntax": "time_t mktime(struct tm * tm )",
		"type": "Linux API (man 3)"
	},
	"asctime": {
		"descr": "transform date and time to broken-down time or ASCII",
		"name": "asctime",
		"params":[],
		"path": "time.h",
		"syntax": "char *asctime(const struct tm * tm )",
		"type": "Linux API (man 3)"
	},
	"ctime": {
		"descr": "transform date and time to broken-down time or ASCII",
		"name": "ctime",
		"params":[],
		"path": "time.h",
		"syntax": "char *asctime_r(const struct tm * tm , char * buf )",
		"type": "Linux API (man 3)"
	},
	"gmtime": {
		"descr": "transform date and time to broken-down time or ASCII",
		"name": "gmtime",
		"params":[],
		"path": "time.h",
		"syntax": "char *ctime(const time_t * timep )",
		"type": "Linux API (man 3)"
	},
	"localtime": {
		"descr": "transform date and time to broken-down time or ASCII",
		"name": "localtime",
		"params":[],
		"path": "time.h",
		"syntax": "char *ctime_r(const time_t * timep , char * buf )",
		"type": "Linux API (man 3)"
	},
	"mktime": {
		"descr": "transform date and time to broken-down time or ASCII",
		"name": "mktime",
		"params":[],
		"path": "time.h",
		"syntax": "struct tm *gmtime(const time_t * timep )",
		"type": "Linux API (man 3)"
	},
	"asctime_r": {
		"descr": "transform date and time to broken-down time or ASCII",
		"name": "asctime_r",
		"params":[],
		"path": "time.h",
		"syntax": "struct tm *gmtime_r(const time_t * timep , struct tm * result )",
		"type": "Linux API (man 3)"
	},
	"ctime_r": {
		"descr": "transform date and time to broken-down time or ASCII",
		"name": "ctime_r",
		"params":[],
		"path": "time.h",
		"syntax": "struct tm *localtime(const time_t * timep )",
		"type": "Linux API (man 3)"
	},
	"gmtime_r": {
		"descr": "transform date and time to broken-down time or ASCII",
		"name": "gmtime_r",
		"params":[],
		"path": "time.h",
		"syntax": "struct tm *localtime_r(const time_t * timep , struct tm * result )",
		"type": "Linux API (man 3)"
	},
	"localtime_r": {
		"descr": "transform date and time to broken-down time or ASCII",
		"name": "localtime_r",
		"params":[],
		"path": "time.h",
		"syntax": "time_t mktime(struct tm * tm )",
		"type": "Linux API (man 3)"
	},
	"makedev": {
		"descr": "manage a device number",
		"name": "makedev",
		"params":[],
		"path": "",
		"syntax": "dev_t makedev(unsigned int maj , unsigned int min )",
		"type": "Linux API (man 3)"
	},
	"major": {
		"descr": "manage a device number",
		"name": "major",
		"params":[],
		"path": "",
		"syntax": "unsigned int major(dev_t dev )",
		"type": "Linux API (man 3)"
	},
	"minor": {
		"descr": "manage a device number",
		"name": "minor",
		"params":[],
		"path": "",
		"syntax": "unsigned int minor(dev_t dev )",
		"type": "Linux API (man 3)"
	},
	"makedev": {
		"descr": "manage a device number",
		"name": "makedev",
		"params":[],
		"path": "",
		"syntax": "dev_t makedev(unsigned int maj , unsigned int min )",
		"type": "Linux API (man 3)"
	},
	"major": {
		"descr": "manage a device number",
		"name": "major",
		"params":[],
		"path": "",
		"syntax": "unsigned int major(dev_t dev )",
		"type": "Linux API (man 3)"
	},
	"minor": {
		"descr": "manage a device number",
		"name": "minor",
		"params":[],
		"path": "",
		"syntax": "unsigned int minor(dev_t dev )",
		"type": "Linux API (man 3)"
	},
	"makedev": {
		"descr": "manage a device number",
		"name": "makedev",
		"params":[],
		"path": "",
		"syntax": "dev_t makedev(unsigned int maj , unsigned int min )",
		"type": "Linux API (man 3)"
	},
	"major": {
		"descr": "manage a device number",
		"name": "major",
		"params":[],
		"path": "",
		"syntax": "unsigned int major(dev_t dev )",
		"type": "Linux API (man 3)"
	},
	"minor": {
		"descr": "manage a device number",
		"name": "minor",
		"params":[],
		"path": "",
		"syntax": "unsigned int minor(dev_t dev )",
		"type": "Linux API (man 3)"
	},
	"gethostbyname": {
		"descr": "get network host entry",
		"name": "gethostbyname",
		"params":[],
		"path": "netdb.h",
		"syntax": "int h_errno",
		"type": "Linux API (man 3)"
	},
	"gethostbyaddr": {
		"descr": "get network host entry",
		"name": "gethostbyaddr",
		"params":[],
		"path": "netdb.h",
		"syntax": "struct hostent *gethostbyname(const char * name )",
		"type": "Linux API (man 3)"
	},
	"sethostent": {
		"descr": "get network host entry",
		"name": "sethostent",
		"params":[],
		"path": "netdb.h",
		"syntax": "struct hostent *gethostbyaddr(const void * addr , socklen_t len , int type )",
		"type": "Linux API (man 3)"
	},
	"gethostent": {
		"descr": "get network host entry",
		"name": "gethostent",
		"params":[],
		"path": "netdb.h",
		"syntax": "void sethostent(int stayopen )",
		"type": "Linux API (man 3)"
	},
	"endhostent": {
		"descr": "get network host entry",
		"name": "endhostent",
		"params":[],
		"path": "netdb.h",
		"syntax": "void endhostent(void)",
		"type": "Linux API (man 3)"
	},
	"h_errno": {
		"descr": "get network host entry",
		"name": "h_errno",
		"params":[],
		"path": "netdb.h",
		"syntax": "void herror(const char * s )",
		"type": "Linux API (man 3)"
	},
	"herror": {
		"descr": "get network host entry",
		"name": "herror",
		"params":[],
		"path": "netdb.h",
		"syntax": "const char *hstrerror(int err )",
		"type": "Linux API (man 3)"
	},
	"hstrerror": {
		"descr": "get network host entry",
		"name": "hstrerror",
		"params":[],
		"path": "netdb.h",
		"syntax": "struct hostent *gethostent(void)",
		"type": "Linux API (man 3)"
	},
	"gethostbyaddr_r": {
		"descr": "get network host entry",
		"name": "gethostbyaddr_r",
		"params":[],
		"path": "netdb.h",
		"syntax": "struct hostent *gethostbyname2(const char * name , int af )",
		"type": "Linux API (man 3)"
	},
	"gethostbyname2": {
		"descr": "get network host entry",
		"name": "gethostbyname2",
		"params":[],
		"path": "netdb.h",
		"syntax": "int gethostent_r( struct hostent * ret , char * buf , size_t buflen , struct hostent ** result , int * h_errnop )",
		"type": "Linux API (man 3)"
	},
	"gethostbyname2_r": {
		"descr": "get network host entry",
		"name": "gethostbyname2_r",
		"params":[],
		"path": "netdb.h",
		"syntax": "int gethostbyaddr_r(const void * addr , socklen_t len , int type , struct hostent * ret , char * buf , size_t buflen , struct hostent ** result , int * h_errnop )",
		"type": "Linux API (man 3)"
	},
	"gethostbyname_r": {
		"descr": "get network host entry",
		"name": "gethostbyname_r",
		"params":[],
		"path": "netdb.h",
		"syntax": "int gethostbyname_r(const char * name , struct hostent * ret , char * buf , size_t buflen , struct hostent ** result , int * h_errnop )",
		"type": "Linux API (man 3)"
	},
	"gethostent_r": {
		"descr": "get network host entry",
		"name": "gethostent_r",
		"params":[],
		"path": "netdb.h",
		"syntax": "int gethostbyname2_r(const char * name , int af, struct hostent * ret , char * buf , size_t buflen , struct hostent ** result , int * h_errnop )",
		"type": "Linux API (man 3)"
	},
	"gethostbyname": {
		"descr": "get network host entry",
		"name": "gethostbyname",
		"params":[],
		"path": "netdb.h",
		"syntax": "int h_errno",
		"type": "Linux API (man 3)"
	},
	"gethostbyaddr": {
		"descr": "get network host entry",
		"name": "gethostbyaddr",
		"params":[],
		"path": "netdb.h",
		"syntax": "struct hostent *gethostbyname(const char * name )",
		"type": "Linux API (man 3)"
	},
	"sethostent": {
		"descr": "get network host entry",
		"name": "sethostent",
		"params":[],
		"path": "netdb.h",
		"syntax": "struct hostent *gethostbyaddr(const void * addr , socklen_t len , int type )",
		"type": "Linux API (man 3)"
	},
	"gethostent": {
		"descr": "get network host entry",
		"name": "gethostent",
		"params":[],
		"path": "netdb.h",
		"syntax": "void sethostent(int stayopen )",
		"type": "Linux API (man 3)"
	},
	"endhostent": {
		"descr": "get network host entry",
		"name": "endhostent",
		"params":[],
		"path": "netdb.h",
		"syntax": "void endhostent(void)",
		"type": "Linux API (man 3)"
	},
	"h_errno": {
		"descr": "get network host entry",
		"name": "h_errno",
		"params":[],
		"path": "netdb.h",
		"syntax": "void herror(const char * s )",
		"type": "Linux API (man 3)"
	},
	"herror": {
		"descr": "get network host entry",
		"name": "herror",
		"params":[],
		"path": "netdb.h",
		"syntax": "const char *hstrerror(int err )",
		"type": "Linux API (man 3)"
	},
	"hstrerror": {
		"descr": "get network host entry",
		"name": "hstrerror",
		"params":[],
		"path": "netdb.h",
		"syntax": "struct hostent *gethostent(void)",
		"type": "Linux API (man 3)"
	},
	"gethostbyaddr_r": {
		"descr": "get network host entry",
		"name": "gethostbyaddr_r",
		"params":[],
		"path": "netdb.h",
		"syntax": "struct hostent *gethostbyname2(const char * name , int af )",
		"type": "Linux API (man 3)"
	},
	"gethostbyname2": {
		"descr": "get network host entry",
		"name": "gethostbyname2",
		"params":[],
		"path": "netdb.h",
		"syntax": "int gethostent_r( struct hostent * ret , char * buf , size_t buflen , struct hostent ** result , int * h_errnop )",
		"type": "Linux API (man 3)"
	},
	"gethostbyname2_r": {
		"descr": "get network host entry",
		"name": "gethostbyname2_r",
		"params":[],
		"path": "netdb.h",
		"syntax": "int gethostbyaddr_r(const void * addr , socklen_t len , int type , struct hostent * ret , char * buf , size_t buflen , struct hostent ** result , int * h_errnop )",
		"type": "Linux API (man 3)"
	},
	"gethostbyname_r": {
		"descr": "get network host entry",
		"name": "gethostbyname_r",
		"params":[],
		"path": "netdb.h",
		"syntax": "int gethostbyname_r(const char * name , struct hostent * ret , char * buf , size_t buflen , struct hostent ** result , int * h_errnop )",
		"type": "Linux API (man 3)"
	},
	"gethostent_r": {
		"descr": "get network host entry",
		"name": "gethostent_r",
		"params":[],
		"path": "netdb.h",
		"syntax": "int gethostbyname2_r(const char * name , int af, struct hostent * ret , char * buf , size_t buflen , struct hostent ** result , int * h_errnop )",
		"type": "Linux API (man 3)"
	},
	"gethostbyname": {
		"descr": "get network host entry",
		"name": "gethostbyname",
		"params":[],
		"path": "netdb.h",
		"syntax": "int h_errno",
		"type": "Linux API (man 3)"
	},
	"gethostbyaddr": {
		"descr": "get network host entry",
		"name": "gethostbyaddr",
		"params":[],
		"path": "netdb.h",
		"syntax": "struct hostent *gethostbyname(const char * name )",
		"type": "Linux API (man 3)"
	},
	"sethostent": {
		"descr": "get network host entry",
		"name": "sethostent",
		"params":[],
		"path": "netdb.h",
		"syntax": "struct hostent *gethostbyaddr(const void * addr , socklen_t len , int type )",
		"type": "Linux API (man 3)"
	},
	"gethostent": {
		"descr": "get network host entry",
		"name": "gethostent",
		"params":[],
		"path": "netdb.h",
		"syntax": "void sethostent(int stayopen )",
		"type": "Linux API (man 3)"
	},
	"endhostent": {
		"descr": "get network host entry",
		"name": "endhostent",
		"params":[],
		"path": "netdb.h",
		"syntax": "void endhostent(void)",
		"type": "Linux API (man 3)"
	},
	"h_errno": {
		"descr": "get network host entry",
		"name": "h_errno",
		"params":[],
		"path": "netdb.h",
		"syntax": "void herror(const char * s )",
		"type": "Linux API (man 3)"
	},
	"herror": {
		"descr": "get network host entry",
		"name": "herror",
		"params":[],
		"path": "netdb.h",
		"syntax": "const char *hstrerror(int err )",
		"type": "Linux API (man 3)"
	},
	"hstrerror": {
		"descr": "get network host entry",
		"name": "hstrerror",
		"params":[],
		"path": "netdb.h",
		"syntax": "struct hostent *gethostent(void)",
		"type": "Linux API (man 3)"
	},
	"gethostbyaddr_r": {
		"descr": "get network host entry",
		"name": "gethostbyaddr_r",
		"params":[],
		"path": "netdb.h",
		"syntax": "struct hostent *gethostbyname2(const char * name , int af )",
		"type": "Linux API (man 3)"
	},
	"gethostbyname2": {
		"descr": "get network host entry",
		"name": "gethostbyname2",
		"params":[],
		"path": "netdb.h",
		"syntax": "int gethostent_r( struct hostent * ret , char * buf , size_t buflen , struct hostent ** result , int * h_errnop )",
		"type": "Linux API (man 3)"
	},
	"gethostbyname2_r": {
		"descr": "get network host entry",
		"name": "gethostbyname2_r",
		"params":[],
		"path": "netdb.h",
		"syntax": "int gethostbyaddr_r(const void * addr , socklen_t len , int type , struct hostent * ret , char * buf , size_t buflen , struct hostent ** result , int * h_errnop )",
		"type": "Linux API (man 3)"
	},
	"gethostbyname_r": {
		"descr": "get network host entry",
		"name": "gethostbyname_r",
		"params":[],
		"path": "netdb.h",
		"syntax": "int gethostbyname_r(const char * name , struct hostent * ret , char * buf , size_t buflen , struct hostent ** result , int * h_errnop )",
		"type": "Linux API (man 3)"
	},
	"gethostent_r": {
		"descr": "get network host entry",
		"name": "gethostent_r",
		"params":[],
		"path": "netdb.h",
		"syntax": "int gethostbyname2_r(const char * name , int af, struct hostent * ret , char * buf , size_t buflen , struct hostent ** result , int * h_errnop )",
		"type": "Linux API (man 3)"
	},
	"hypot": {
		"descr": "Euclidean distance function",
		"name": "hypot",
		"params":[],
		"path": "math.h",
		"syntax": "double hypot(double x , double y )",
		"type": "Linux API (man 3)"
	},
	"hypotf": {
		"descr": "Euclidean distance function",
		"name": "hypotf",
		"params":[],
		"path": "math.h",
		"syntax": "float hypotf(float x , float y )",
		"type": "Linux API (man 3)"
	},
	"hypotl": {
		"descr": "Euclidean distance function",
		"name": "hypotl",
		"params":[],
		"path": "math.h",
		"syntax": "long double hypotl(long double x , long double y )",
		"type": "Linux API (man 3)"
	},
	"hypot": {
		"descr": "Euclidean distance function",
		"name": "hypot",
		"params":[],
		"path": "math.h",
		"syntax": "double hypot(double x , double y )",
		"type": "Linux API (man 3)"
	},
	"hypotf": {
		"descr": "Euclidean distance function",
		"name": "hypotf",
		"params":[],
		"path": "math.h",
		"syntax": "float hypotf(float x , float y )",
		"type": "Linux API (man 3)"
	},
	"hypotl": {
		"descr": "Euclidean distance function",
		"name": "hypotl",
		"params":[],
		"path": "math.h",
		"syntax": "long double hypotl(long double x , long double y )",
		"type": "Linux API (man 3)"
	},
	"hypot": {
		"descr": "Euclidean distance function",
		"name": "hypot",
		"params":[],
		"path": "math.h",
		"syntax": "double hypot(double x , double y )",
		"type": "Linux API (man 3)"
	},
	"hypotf": {
		"descr": "Euclidean distance function",
		"name": "hypotf",
		"params":[],
		"path": "math.h",
		"syntax": "float hypotf(float x , float y )",
		"type": "Linux API (man 3)"
	},
	"hypotl": {
		"descr": "Euclidean distance function",
		"name": "hypotl",
		"params":[],
		"path": "math.h",
		"syntax": "long double hypotl(long double x , long double y )",
		"type": "Linux API (man 3)"
	},
	"iconv": {
		"descr": "perform character set conversion",
		"name": "iconv",
		"params":[],
		"path": "iconv.h",
		"syntax": "size_t iconv(iconv_t cd , char ** inbuf , size_t * inbytesleft , char ** outbuf , size_t * outbytesleft )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isatty": {
		"descr": "test whether a file descriptor refers to a terminal",
		"name": "isatty",
		"params":[],
		"path": "unistd.h",
		"syntax": "int isatty(int fd )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isfdtype": {
		"descr": "test file type of a file descriptor",
		"name": "isfdtype",
		"params":[],
		"path": "",
		"syntax": "int isfdtype(int fd , int fdtype )",
		"type": "Linux API (man 3)"
	},
	"fpclassify": {
		"descr": "floating-point",
		"name": "fpclassify",
		"params":[],
		"path": "math.h",
		"syntax": "int fpclassify( x )",
		"type": "Linux API (man 3)"
	},
	"isfinite": {
		"descr": "floating-point",
		"name": "isfinite",
		"params":[],
		"path": "math.h",
		"syntax": "int isfinite( x )",
		"type": "Linux API (man 3)"
	},
	"isnormal": {
		"descr": "floating-point",
		"name": "isnormal",
		"params":[],
		"path": "math.h",
		"syntax": "int isnormal( x )",
		"type": "Linux API (man 3)"
	},
	"isnan": {
		"descr": "floating-point",
		"name": "isnan",
		"params":[],
		"path": "math.h",
		"syntax": "int isnan( x )",
		"type": "Linux API (man 3)"
	},
	"isinf": {
		"descr": "floating-point",
		"name": "isinf",
		"params":[],
		"path": "math.h",
		"syntax": "int isinf( x )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgreater": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isgreater",
		"params":[],
		"path": "math.h",
		"syntax": "int isgreater( x , y )",
		"type": "Linux API (man 3)"
	},
	"isgreaterequal": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isgreaterequal",
		"params":[],
		"path": "math.h",
		"syntax": "int isgreaterequal( x , y )",
		"type": "Linux API (man 3)"
	},
	"isless": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isless",
		"params":[],
		"path": "math.h",
		"syntax": "int isless( x , y )",
		"type": "Linux API (man 3)"
	},
	"islessequal": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "islessequal",
		"params":[],
		"path": "math.h",
		"syntax": "int islessequal( x , y )",
		"type": "Linux API (man 3)"
	},
	"islessgreater": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "islessgreater",
		"params":[],
		"path": "math.h",
		"syntax": "int islessgreater( x , y )",
		"type": "Linux API (man 3)"
	},
	"isunordered": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isunordered",
		"params":[],
		"path": "math.h",
		"syntax": "int isunordered( x , y )",
		"type": "Linux API (man 3)"
	},
	"isgreater": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isgreater",
		"params":[],
		"path": "math.h",
		"syntax": "int isgreater( x , y )",
		"type": "Linux API (man 3)"
	},
	"isgreaterequal": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isgreaterequal",
		"params":[],
		"path": "math.h",
		"syntax": "int isgreaterequal( x , y )",
		"type": "Linux API (man 3)"
	},
	"isless": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isless",
		"params":[],
		"path": "math.h",
		"syntax": "int isless( x , y )",
		"type": "Linux API (man 3)"
	},
	"islessequal": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "islessequal",
		"params":[],
		"path": "math.h",
		"syntax": "int islessequal( x , y )",
		"type": "Linux API (man 3)"
	},
	"islessgreater": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "islessgreater",
		"params":[],
		"path": "math.h",
		"syntax": "int islessgreater( x , y )",
		"type": "Linux API (man 3)"
	},
	"isunordered": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isunordered",
		"params":[],
		"path": "math.h",
		"syntax": "int isunordered( x , y )",
		"type": "Linux API (man 3)"
	},
	"fpclassify": {
		"descr": "floating-point",
		"name": "fpclassify",
		"params":[],
		"path": "math.h",
		"syntax": "int fpclassify( x )",
		"type": "Linux API (man 3)"
	},
	"isfinite": {
		"descr": "floating-point",
		"name": "isfinite",
		"params":[],
		"path": "math.h",
		"syntax": "int isfinite( x )",
		"type": "Linux API (man 3)"
	},
	"isnormal": {
		"descr": "floating-point",
		"name": "isnormal",
		"params":[],
		"path": "math.h",
		"syntax": "int isnormal( x )",
		"type": "Linux API (man 3)"
	},
	"isnan": {
		"descr": "floating-point",
		"name": "isnan",
		"params":[],
		"path": "math.h",
		"syntax": "int isnan( x )",
		"type": "Linux API (man 3)"
	},
	"isinf": {
		"descr": "floating-point",
		"name": "isinf",
		"params":[],
		"path": "math.h",
		"syntax": "int isinf( x )",
		"type": "Linux API (man 3)"
	},
	"finite": {
		"descr": "",
		"name": "finite",
		"params":[],
		"path": "math.h",
		"syntax": "int finite(double x )",
		"type": "Linux API (man 3)"
	},
	"finitef": {
		"descr": "",
		"name": "finitef",
		"params":[],
		"path": "math.h",
		"syntax": "int finitef(float x )",
		"type": "Linux API (man 3)"
	},
	"finitel": {
		"descr": "",
		"name": "finitel",
		"params":[],
		"path": "math.h",
		"syntax": "int finitel(long double x )",
		"type": "Linux API (man 3)"
	},
	"isinf": {
		"descr": "",
		"name": "isinf",
		"params":[],
		"path": "math.h",
		"syntax": "int isinf(double x )",
		"type": "Linux API (man 3)"
	},
	"isinff": {
		"descr": "",
		"name": "isinff",
		"params":[],
		"path": "math.h",
		"syntax": "int isinff(float x )",
		"type": "Linux API (man 3)"
	},
	"isinfl": {
		"descr": "",
		"name": "isinfl",
		"params":[],
		"path": "math.h",
		"syntax": "int isinfl(long double x )",
		"type": "Linux API (man 3)"
	},
	"isnan": {
		"descr": "",
		"name": "isnan",
		"params":[],
		"path": "math.h",
		"syntax": "int isnan(double x )",
		"type": "Linux API (man 3)"
	},
	"isnanf": {
		"descr": "",
		"name": "isnanf",
		"params":[],
		"path": "math.h",
		"syntax": "int isnanf(float x )",
		"type": "Linux API (man 3)"
	},
	"isnanl": {
		"descr": "",
		"name": "isnanl",
		"params":[],
		"path": "math.h",
		"syntax": "int isnanl(long double x )",
		"type": "Linux API (man 3)"
	},
	"finite": {
		"descr": "",
		"name": "finite",
		"params":[],
		"path": "math.h",
		"syntax": "int finite(double x )",
		"type": "Linux API (man 3)"
	},
	"finitef": {
		"descr": "",
		"name": "finitef",
		"params":[],
		"path": "math.h",
		"syntax": "int finitef(float x )",
		"type": "Linux API (man 3)"
	},
	"finitel": {
		"descr": "",
		"name": "finitel",
		"params":[],
		"path": "math.h",
		"syntax": "int finitel(long double x )",
		"type": "Linux API (man 3)"
	},
	"isinf": {
		"descr": "",
		"name": "isinf",
		"params":[],
		"path": "math.h",
		"syntax": "int isinf(double x )",
		"type": "Linux API (man 3)"
	},
	"isinff": {
		"descr": "",
		"name": "isinff",
		"params":[],
		"path": "math.h",
		"syntax": "int isinff(float x )",
		"type": "Linux API (man 3)"
	},
	"isinfl": {
		"descr": "",
		"name": "isinfl",
		"params":[],
		"path": "math.h",
		"syntax": "int isinfl(long double x )",
		"type": "Linux API (man 3)"
	},
	"isnan": {
		"descr": "",
		"name": "isnan",
		"params":[],
		"path": "math.h",
		"syntax": "int isnan(double x )",
		"type": "Linux API (man 3)"
	},
	"isnanf": {
		"descr": "",
		"name": "isnanf",
		"params":[],
		"path": "math.h",
		"syntax": "int isnanf(float x )",
		"type": "Linux API (man 3)"
	},
	"isnanl": {
		"descr": "",
		"name": "isnanl",
		"params":[],
		"path": "math.h",
		"syntax": "int isnanl(long double x )",
		"type": "Linux API (man 3)"
	},
	"isgreater": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isgreater",
		"params":[],
		"path": "math.h",
		"syntax": "int isgreater( x , y )",
		"type": "Linux API (man 3)"
	},
	"isgreaterequal": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isgreaterequal",
		"params":[],
		"path": "math.h",
		"syntax": "int isgreaterequal( x , y )",
		"type": "Linux API (man 3)"
	},
	"isless": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isless",
		"params":[],
		"path": "math.h",
		"syntax": "int isless( x , y )",
		"type": "Linux API (man 3)"
	},
	"islessequal": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "islessequal",
		"params":[],
		"path": "math.h",
		"syntax": "int islessequal( x , y )",
		"type": "Linux API (man 3)"
	},
	"islessgreater": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "islessgreater",
		"params":[],
		"path": "math.h",
		"syntax": "int islessgreater( x , y )",
		"type": "Linux API (man 3)"
	},
	"isunordered": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isunordered",
		"params":[],
		"path": "math.h",
		"syntax": "int isunordered( x , y )",
		"type": "Linux API (man 3)"
	},
	"isgreater": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isgreater",
		"params":[],
		"path": "math.h",
		"syntax": "int isgreater( x , y )",
		"type": "Linux API (man 3)"
	},
	"isgreaterequal": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isgreaterequal",
		"params":[],
		"path": "math.h",
		"syntax": "int isgreaterequal( x , y )",
		"type": "Linux API (man 3)"
	},
	"isless": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isless",
		"params":[],
		"path": "math.h",
		"syntax": "int isless( x , y )",
		"type": "Linux API (man 3)"
	},
	"islessequal": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "islessequal",
		"params":[],
		"path": "math.h",
		"syntax": "int islessequal( x , y )",
		"type": "Linux API (man 3)"
	},
	"islessgreater": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "islessgreater",
		"params":[],
		"path": "math.h",
		"syntax": "int islessgreater( x , y )",
		"type": "Linux API (man 3)"
	},
	"isunordered": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isunordered",
		"params":[],
		"path": "math.h",
		"syntax": "int isunordered( x , y )",
		"type": "Linux API (man 3)"
	},
	"isgreater": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isgreater",
		"params":[],
		"path": "math.h",
		"syntax": "int isgreater( x , y )",
		"type": "Linux API (man 3)"
	},
	"isgreaterequal": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isgreaterequal",
		"params":[],
		"path": "math.h",
		"syntax": "int isgreaterequal( x , y )",
		"type": "Linux API (man 3)"
	},
	"isless": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isless",
		"params":[],
		"path": "math.h",
		"syntax": "int isless( x , y )",
		"type": "Linux API (man 3)"
	},
	"islessequal": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "islessequal",
		"params":[],
		"path": "math.h",
		"syntax": "int islessequal( x , y )",
		"type": "Linux API (man 3)"
	},
	"islessgreater": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "islessgreater",
		"params":[],
		"path": "math.h",
		"syntax": "int islessgreater( x , y )",
		"type": "Linux API (man 3)"
	},
	"isunordered": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isunordered",
		"params":[],
		"path": "math.h",
		"syntax": "int isunordered( x , y )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"fpclassify": {
		"descr": "floating-point",
		"name": "fpclassify",
		"params":[],
		"path": "math.h",
		"syntax": "int fpclassify( x )",
		"type": "Linux API (man 3)"
	},
	"isfinite": {
		"descr": "floating-point",
		"name": "isfinite",
		"params":[],
		"path": "math.h",
		"syntax": "int isfinite( x )",
		"type": "Linux API (man 3)"
	},
	"isnormal": {
		"descr": "floating-point",
		"name": "isnormal",
		"params":[],
		"path": "math.h",
		"syntax": "int isnormal( x )",
		"type": "Linux API (man 3)"
	},
	"isnan": {
		"descr": "floating-point",
		"name": "isnan",
		"params":[],
		"path": "math.h",
		"syntax": "int isnan( x )",
		"type": "Linux API (man 3)"
	},
	"isinf": {
		"descr": "floating-point",
		"name": "isinf",
		"params":[],
		"path": "math.h",
		"syntax": "int isinf( x )",
		"type": "Linux API (man 3)"
	},
	"finite": {
		"descr": "",
		"name": "finite",
		"params":[],
		"path": "math.h",
		"syntax": "int finite(double x )",
		"type": "Linux API (man 3)"
	},
	"finitef": {
		"descr": "",
		"name": "finitef",
		"params":[],
		"path": "math.h",
		"syntax": "int finitef(float x )",
		"type": "Linux API (man 3)"
	},
	"finitel": {
		"descr": "",
		"name": "finitel",
		"params":[],
		"path": "math.h",
		"syntax": "int finitel(long double x )",
		"type": "Linux API (man 3)"
	},
	"isinf": {
		"descr": "",
		"name": "isinf",
		"params":[],
		"path": "math.h",
		"syntax": "int isinf(double x )",
		"type": "Linux API (man 3)"
	},
	"isinff": {
		"descr": "",
		"name": "isinff",
		"params":[],
		"path": "math.h",
		"syntax": "int isinff(float x )",
		"type": "Linux API (man 3)"
	},
	"isinfl": {
		"descr": "",
		"name": "isinfl",
		"params":[],
		"path": "math.h",
		"syntax": "int isinfl(long double x )",
		"type": "Linux API (man 3)"
	},
	"isnan": {
		"descr": "",
		"name": "isnan",
		"params":[],
		"path": "math.h",
		"syntax": "int isnan(double x )",
		"type": "Linux API (man 3)"
	},
	"isnanf": {
		"descr": "",
		"name": "isnanf",
		"params":[],
		"path": "math.h",
		"syntax": "int isnanf(float x )",
		"type": "Linux API (man 3)"
	},
	"isnanl": {
		"descr": "",
		"name": "isnanl",
		"params":[],
		"path": "math.h",
		"syntax": "int isnanl(long double x )",
		"type": "Linux API (man 3)"
	},
	"finite": {
		"descr": "",
		"name": "finite",
		"params":[],
		"path": "math.h",
		"syntax": "int finite(double x )",
		"type": "Linux API (man 3)"
	},
	"finitef": {
		"descr": "",
		"name": "finitef",
		"params":[],
		"path": "math.h",
		"syntax": "int finitef(float x )",
		"type": "Linux API (man 3)"
	},
	"finitel": {
		"descr": "",
		"name": "finitel",
		"params":[],
		"path": "math.h",
		"syntax": "int finitel(long double x )",
		"type": "Linux API (man 3)"
	},
	"isinf": {
		"descr": "",
		"name": "isinf",
		"params":[],
		"path": "math.h",
		"syntax": "int isinf(double x )",
		"type": "Linux API (man 3)"
	},
	"isinff": {
		"descr": "",
		"name": "isinff",
		"params":[],
		"path": "math.h",
		"syntax": "int isinff(float x )",
		"type": "Linux API (man 3)"
	},
	"isinfl": {
		"descr": "",
		"name": "isinfl",
		"params":[],
		"path": "math.h",
		"syntax": "int isinfl(long double x )",
		"type": "Linux API (man 3)"
	},
	"isnan": {
		"descr": "",
		"name": "isnan",
		"params":[],
		"path": "math.h",
		"syntax": "int isnan(double x )",
		"type": "Linux API (man 3)"
	},
	"isnanf": {
		"descr": "",
		"name": "isnanf",
		"params":[],
		"path": "math.h",
		"syntax": "int isnanf(float x )",
		"type": "Linux API (man 3)"
	},
	"isnanl": {
		"descr": "",
		"name": "isnanl",
		"params":[],
		"path": "math.h",
		"syntax": "int isnanl(long double x )",
		"type": "Linux API (man 3)"
	},
	"fpclassify": {
		"descr": "floating-point",
		"name": "fpclassify",
		"params":[],
		"path": "math.h",
		"syntax": "int fpclassify( x )",
		"type": "Linux API (man 3)"
	},
	"isfinite": {
		"descr": "floating-point",
		"name": "isfinite",
		"params":[],
		"path": "math.h",
		"syntax": "int isfinite( x )",
		"type": "Linux API (man 3)"
	},
	"isnormal": {
		"descr": "floating-point",
		"name": "isnormal",
		"params":[],
		"path": "math.h",
		"syntax": "int isnormal( x )",
		"type": "Linux API (man 3)"
	},
	"isnan": {
		"descr": "floating-point",
		"name": "isnan",
		"params":[],
		"path": "math.h",
		"syntax": "int isnan( x )",
		"type": "Linux API (man 3)"
	},
	"isinf": {
		"descr": "floating-point",
		"name": "isinf",
		"params":[],
		"path": "math.h",
		"syntax": "int isinf( x )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgreater": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isgreater",
		"params":[],
		"path": "math.h",
		"syntax": "int isgreater( x , y )",
		"type": "Linux API (man 3)"
	},
	"isgreaterequal": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isgreaterequal",
		"params":[],
		"path": "math.h",
		"syntax": "int isgreaterequal( x , y )",
		"type": "Linux API (man 3)"
	},
	"isless": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isless",
		"params":[],
		"path": "math.h",
		"syntax": "int isless( x , y )",
		"type": "Linux API (man 3)"
	},
	"islessequal": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "islessequal",
		"params":[],
		"path": "math.h",
		"syntax": "int islessequal( x , y )",
		"type": "Linux API (man 3)"
	},
	"islessgreater": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "islessgreater",
		"params":[],
		"path": "math.h",
		"syntax": "int islessgreater( x , y )",
		"type": "Linux API (man 3)"
	},
	"isunordered": {
		"descr": "floating-point relational tests without exception for NaN",
		"name": "isunordered",
		"params":[],
		"path": "math.h",
		"syntax": "int isunordered( x , y )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iswalnum": {
		"descr": "test for alphanumeric wide character",
		"name": "iswalnum",
		"params":[],
		"path": "wctype.h",
		"syntax": "int iswalnum(wint_t wc )",
		"type": "Linux API (man 3)"
	},
	"iswalpha": {
		"descr": "test for alphabetic wide character",
		"name": "iswalpha",
		"params":[],
		"path": "wctype.h",
		"syntax": "int iswalpha(wint_t wc )",
		"type": "Linux API (man 3)"
	},
	"iswblank": {
		"descr": "test for whitespace wide character",
		"name": "iswblank",
		"params":[],
		"path": "wctype.h",
		"syntax": "int iswblank(wint_t wc )",
		"type": "Linux API (man 3)"
	},
	"iswcntrl": {
		"descr": "test for control wide character",
		"name": "iswcntrl",
		"params":[],
		"path": "wctype.h",
		"syntax": "int iswcntrl(wint_t wc )",
		"type": "Linux API (man 3)"
	},
	"iswctype": {
		"descr": "wide-character classification",
		"name": "iswctype",
		"params":[],
		"path": "wctype.h",
		"syntax": "int iswctype(wint_t wc , wctype_t desc )",
		"type": "Linux API (man 3)"
	},
	"iswdigit": {
		"descr": "test for decimal digit wide character",
		"name": "iswdigit",
		"params":[],
		"path": "wctype.h",
		"syntax": "int iswdigit(wint_t wc )",
		"type": "Linux API (man 3)"
	},
	"iswgraph": {
		"descr": "test for graphic wide character",
		"name": "iswgraph",
		"params":[],
		"path": "wctype.h",
		"syntax": "int iswgraph(wint_t wc )",
		"type": "Linux API (man 3)"
	},
	"iswlower": {
		"descr": "test for lowercase wide character",
		"name": "iswlower",
		"params":[],
		"path": "wctype.h",
		"syntax": "int iswlower(wint_t wc )",
		"type": "Linux API (man 3)"
	},
	"iswprint": {
		"descr": "test for printing wide character",
		"name": "iswprint",
		"params":[],
		"path": "wctype.h",
		"syntax": "int iswprint(wint_t wc )",
		"type": "Linux API (man 3)"
	},
	"iswpunct": {
		"descr": "test for punctuation or symbolic wide character",
		"name": "iswpunct",
		"params":[],
		"path": "wctype.h",
		"syntax": "int iswpunct(wint_t wc )",
		"type": "Linux API (man 3)"
	},
	"iswspace": {
		"descr": "test for whitespace wide character",
		"name": "iswspace",
		"params":[],
		"path": "wctype.h",
		"syntax": "int iswspace(wint_t wc )",
		"type": "Linux API (man 3)"
	},
	"iswupper": {
		"descr": "test for uppercase wide character",
		"name": "iswupper",
		"params":[],
		"path": "wctype.h",
		"syntax": "int iswupper(wint_t wc )",
		"type": "Linux API (man 3)"
	},
	"iswxdigit": {
		"descr": "test for hexadecimal digit wide character",
		"name": "iswxdigit",
		"params":[],
		"path": "wctype.h",
		"syntax": "int iswxdigit(wint_t wc )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalnum": {
		"descr": "character classification functions",
		"name": "isalnum",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum(int c )",
		"type": "Linux API (man 3)"
	},
	"isalpha": {
		"descr": "character classification functions",
		"name": "isalpha",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha(int c )",
		"type": "Linux API (man 3)"
	},
	"isascii": {
		"descr": "character classification functions",
		"name": "isascii",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl(int c )",
		"type": "Linux API (man 3)"
	},
	"isblank": {
		"descr": "character classification functions",
		"name": "isblank",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"iscntrl": {
		"descr": "character classification functions",
		"name": "iscntrl",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph(int c )",
		"type": "Linux API (man 3)"
	},
	"isdigit": {
		"descr": "character classification functions",
		"name": "isdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower(int c )",
		"type": "Linux API (man 3)"
	},
	"isgraph": {
		"descr": "character classification functions",
		"name": "isgraph",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint(int c )",
		"type": "Linux API (man 3)"
	},
	"islower": {
		"descr": "character classification functions",
		"name": "islower",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct(int c )",
		"type": "Linux API (man 3)"
	},
	"isprint": {
		"descr": "character classification functions",
		"name": "isprint",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace(int c )",
		"type": "Linux API (man 3)"
	},
	"ispunct": {
		"descr": "character classification functions",
		"name": "ispunct",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper(int c )",
		"type": "Linux API (man 3)"
	},
	"isspace": {
		"descr": "character classification functions",
		"name": "isspace",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit(int c )",
		"type": "Linux API (man 3)"
	},
	"isupper": {
		"descr": "character classification functions",
		"name": "isupper",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii(int c )",
		"type": "Linux API (man 3)"
	},
	"isxdigit": {
		"descr": "character classification functions",
		"name": "isxdigit",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank(int c )",
		"type": "Linux API (man 3)"
	},
	"isalnum_l": {
		"descr": "character classification functions",
		"name": "isalnum_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalnum_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isalpha_l": {
		"descr": "character classification functions",
		"name": "isalpha_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isalpha_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isascii_l": {
		"descr": "character classification functions",
		"name": "isascii_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isblank_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isblank_l": {
		"descr": "character classification functions",
		"name": "isblank_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int iscntrl_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"iscntrl_l": {
		"descr": "character classification functions",
		"name": "iscntrl_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isdigit_l": {
		"descr": "character classification functions",
		"name": "isdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isgraph_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isgraph_l": {
		"descr": "character classification functions",
		"name": "isgraph_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int islower_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"islower_l": {
		"descr": "character classification functions",
		"name": "islower_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isprint_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isprint_l": {
		"descr": "character classification functions",
		"name": "isprint_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int ispunct_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"ispunct_l": {
		"descr": "character classification functions",
		"name": "ispunct_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isspace_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isspace_l": {
		"descr": "character classification functions",
		"name": "isspace_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isupper_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isupper_l": {
		"descr": "character classification functions",
		"name": "isupper_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isxdigit_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"isxdigit_l": {
		"descr": "character classification functions",
		"name": "isxdigit_l",
		"params":[],
		"path": "ctype.h",
		"syntax": "int isascii_l(int c , locale_t locale )",
		"type": "Linux API (man 3)"
	},
	"j0": {
		"descr": "",
		"name": "j0",
		"params":[],
		"path": "math.h",
		"syntax": "double j0(double x )",
		"type": "Linux API (man 3)"
	},
	"j0f": {
		"descr": "",
		"name": "j0f",
		"params":[],
		"path": "math.h",
		"syntax": "double j1(double x )",
		"type": "Linux API (man 3)"
	},
	"j0l": {
		"descr": "",
		"name": "j0l",
		"params":[],
		"path": "math.h",
		"syntax": "double jn(int n , double x )",
		"type": "Linux API (man 3)"
	},
	"j1": {
		"descr": "",
		"name": "j1",
		"params":[],
		"path": "math.h",
		"syntax": "float j0f(float x )",
		"type": "Linux API (man 3)"
	},
	"j1f": {
		"descr": "",
		"name": "j1f",
		"params":[],
		"path": "math.h",
		"syntax": "float j1f(float x )",
		"type": "Linux API (man 3)"
	},
	"j1l": {
		"descr": "",
		"name": "j1l",
		"params":[],
		"path": "math.h",
		"syntax": "float jnf(int n , float x )",
		"type": "Linux API (man 3)"
	},
	"jn": {
		"descr": "",
		"name": "jn",
		"params":[],
		"path": "math.h",
		"syntax": "long double j0l(long double x )",
		"type": "Linux API (man 3)"
	},
	"jnf": {
		"descr": "",
		"name": "jnf",
		"params":[],
		"path": "math.h",
		"syntax": "long double j1l(long double x )",
		"type": "Linux API (man 3)"
	},
	"jnl": {
		"descr": "",
		"name": "jnl",
		"params":[],
		"path": "math.h",
		"syntax": "long double jnl(int n , long double x )",
		"type": "Linux API (man 3)"
	},
	"j0": {
		"descr": "",
		"name": "j0",
		"params":[],
		"path": "math.h",
		"syntax": "double j0(double x )",
		"type": "Linux API (man 3)"
	},
	"j0f": {
		"descr": "",
		"name": "j0f",
		"params":[],
		"path": "math.h",
		"syntax": "double j1(double x )",
		"type": "Linux API (man 3)"
	},
	"j0l": {
		"descr": "",
		"name": "j0l",
		"params":[],
		"path": "math.h",
		"syntax": "double jn(int n , double x )",
		"type": "Linux API (man 3)"
	},
	"j1": {
		"descr": "",
		"name": "j1",
		"params":[],
		"path": "math.h",
		"syntax": "float j0f(float x )",
		"type": "Linux API (man 3)"
	},
	"j1f": {
		"descr": "",
		"name": "j1f",
		"params":[],
		"path": "math.h",
		"syntax": "float j1f(float x )",
		"type": "Linux API (man 3)"
	},
	"j1l": {
		"descr": "",
		"name": "j1l",
		"params":[],
		"path": "math.h",
		"syntax": "float jnf(int n , float x )",
		"type": "Linux API (man 3)"
	},
	"jn": {
		"descr": "",
		"name": "jn",
		"params":[],
		"path": "math.h",
		"syntax": "long double j0l(long double x )",
		"type": "Linux API (man 3)"
	},
	"jnf": {
		"descr": "",
		"name": "jnf",
		"params":[],
		"path": "math.h",
		"syntax": "long double j1l(long double x )",
		"type": "Linux API (man 3)"
	},
	"jnl": {
		"descr": "",
		"name": "jnl",
		"params":[],
		"path": "math.h",
		"syntax": "long double jnl(int n , long double x )",
		"type": "Linux API (man 3)"
	},
	"j0": {
		"descr": "",
		"name": "j0",
		"params":[],
		"path": "math.h",
		"syntax": "double j0(double x )",
		"type": "Linux API (man 3)"
	},
	"j0f": {
		"descr": "",
		"name": "j0f",
		"params":[],
		"path": "math.h",
		"syntax": "double j1(double x )",
		"type": "Linux API (man 3)"
	},
	"j0l": {
		"descr": "",
		"name": "j0l",
		"params":[],
		"path": "math.h",
		"syntax": "double jn(int n , double x )",
		"type": "Linux API (man 3)"
	},
	"j1": {
		"descr": "",
		"name": "j1",
		"params":[],
		"path": "math.h",
		"syntax": "float j0f(float x )",
		"type": "Linux API (man 3)"
	},
	"j1f": {
		"descr": "",
		"name": "j1f",
		"params":[],
		"path": "math.h",
		"syntax": "float j1f(float x )",
		"type": "Linux API (man 3)"
	},
	"j1l": {
		"descr": "",
		"name": "j1l",
		"params":[],
		"path": "math.h",
		"syntax": "float jnf(int n , float x )",
		"type": "Linux API (man 3)"
	},
	"jn": {
		"descr": "",
		"name": "jn",
		"params":[],
		"path": "math.h",
		"syntax": "long double j0l(long double x )",
		"type": "Linux API (man 3)"
	},
	"jnf": {
		"descr": "",
		"name": "jnf",
		"params":[],
		"path": "math.h",
		"syntax": "long double j1l(long double x )",
		"type": "Linux API (man 3)"
	},
	"jnl": {
		"descr": "",
		"name": "jnl",
		"params":[],
		"path": "math.h",
		"syntax": "long double jnl(int n , long double x )",
		"type": "Linux API (man 3)"
	},
	"j0": {
		"descr": "",
		"name": "j0",
		"params":[],
		"path": "math.h",
		"syntax": "double j0(double x )",
		"type": "Linux API (man 3)"
	},
	"j0f": {
		"descr": "",
		"name": "j0f",
		"params":[],
		"path": "math.h",
		"syntax": "double j1(double x )",
		"type": "Linux API (man 3)"
	},
	"j0l": {
		"descr": "",
		"name": "j0l",
		"params":[],
		"path": "math.h",
		"syntax": "double jn(int n , double x )",
		"type": "Linux API (man 3)"
	},
	"j1": {
		"descr": "",
		"name": "j1",
		"params":[],
		"path": "math.h",
		"syntax": "float j0f(float x )",
		"type": "Linux API (man 3)"
	},
	"j1f": {
		"descr": "",
		"name": "j1f",
		"params":[],
		"path": "math.h",
		"syntax": "float j1f(float x )",
		"type": "Linux API (man 3)"
	},
	"j1l": {
		"descr": "",
		"name": "j1l",
		"params":[],
		"path": "math.h",
		"syntax": "float jnf(int n , float x )",
		"type": "Linux API (man 3)"
	},
	"jn": {
		"descr": "",
		"name": "jn",
		"params":[],
		"path": "math.h",
		"syntax": "long double j0l(long double x )",
		"type": "Linux API (man 3)"
	},
	"jnf": {
		"descr": "",
		"name": "jnf",
		"params":[],
		"path": "math.h",
		"syntax": "long double j1l(long double x )",
		"type": "Linux API (man 3)"
	},
	"jnl": {
		"descr": "",
		"name": "jnl",
		"params":[],
		"path": "math.h",
		"syntax": "long double jnl(int n , long double x )",
		"type": "Linux API (man 3)"
	},
	"j0": {
		"descr": "",
		"name": "j0",
		"params":[],
		"path": "math.h",
		"syntax": "double j0(double x )",
		"type": "Linux API (man 3)"
	},
	"j0f": {
		"descr": "",
		"name": "j0f",
		"params":[],
		"path": "math.h",
		"syntax": "double j1(double x )",
		"type": "Linux API (man 3)"
	},
	"j0l": {
		"descr": "",
		"name": "j0l",
		"params":[],
		"path": "math.h",
		"syntax": "double jn(int n , double x )",
		"type": "Linux API (man 3)"
	},
	"j1": {
		"descr": "",
		"name": "j1",
		"params":[],
		"path": "math.h",
		"syntax": "float j0f(float x )",
		"type": "Linux API (man 3)"
	},
	"j1f": {
		"descr": "",
		"name": "j1f",
		"params":[],
		"path": "math.h",
		"syntax": "float j1f(float x )",
		"type": "Linux API (man 3)"
	},
	"j1l": {
		"descr": "",
		"name": "j1l",
		"params":[],
		"path": "math.h",
		"syntax": "float jnf(int n , float x )",
		"type": "Linux API (man 3)"
	},
	"jn": {
		"descr": "",
		"name": "jn",
		"params":[],
		"path": "math.h",
		"syntax": "long double j0l(long double x )",
		"type": "Linux API (man 3)"
	},
	"jnf": {
		"descr": "",
		"name": "jnf",
		"params":[],
		"path": "math.h",
		"syntax": "long double j1l(long double x )",
		"type": "Linux API (man 3)"
	},
	"jnl": {
		"descr": "",
		"name": "jnl",
		"params":[],
		"path": "math.h",
		"syntax": "long double jnl(int n , long double x )",
		"type": "Linux API (man 3)"
	},
	"j0": {
		"descr": "",
		"name": "j0",
		"params":[],
		"path": "math.h",
		"syntax": "double j0(double x )",
		"type": "Linux API (man 3)"
	},
	"j0f": {
		"descr": "",
		"name": "j0f",
		"params":[],
		"path": "math.h",
		"syntax": "double j1(double x )",
		"type": "Linux API (man 3)"
	},
	"j0l": {
		"descr": "",
		"name": "j0l",
		"params":[],
		"path": "math.h",
		"syntax": "double jn(int n , double x )",
		"type": "Linux API (man 3)"
	},
	"j1": {
		"descr": "",
		"name": "j1",
		"params":[],
		"path": "math.h",
		"syntax": "float j0f(float x )",
		"type": "Linux API (man 3)"
	},
	"j1f": {
		"descr": "",
		"name": "j1f",
		"params":[],
		"path": "math.h",
		"syntax": "float j1f(float x )",
		"type": "Linux API (man 3)"
	},
	"j1l": {
		"descr": "",
		"name": "j1l",
		"params":[],
		"path": "math.h",
		"syntax": "float jnf(int n , float x )",
		"type": "Linux API (man 3)"
	},
	"jn": {
		"descr": "",
		"name": "jn",
		"params":[],
		"path": "math.h",
		"syntax": "long double j0l(long double x )",
		"type": "Linux API (man 3)"
	},
	"jnf": {
		"descr": "",
		"name": "jnf",
		"params":[],
		"path": "math.h",
		"syntax": "long double j1l(long double x )",
		"type": "Linux API (man 3)"
	},
	"jnl": {
		"descr": "",
		"name": "jnl",
		"params":[],
		"path": "math.h",
		"syntax": "long double jnl(int n , long double x )",
		"type": "Linux API (man 3)"
	},
	"j0": {
		"descr": "",
		"name": "j0",
		"params":[],
		"path": "math.h",
		"syntax": "double j0(double x )",
		"type": "Linux API (man 3)"
	},
	"j0f": {
		"descr": "",
		"name": "j0f",
		"params":[],
		"path": "math.h",
		"syntax": "double j1(double x )",
		"type": "Linux API (man 3)"
	},
	"j0l": {
		"descr": "",
		"name": "j0l",
		"params":[],
		"path": "math.h",
		"syntax": "double jn(int n , double x )",
		"type": "Linux API (man 3)"
	},
	"j1": {
		"descr": "",
		"name": "j1",
		"params":[],
		"path": "math.h",
		"syntax": "float j0f(float x )",
		"type": "Linux API (man 3)"
	},
	"j1f": {
		"descr": "",
		"name": "j1f",
		"params":[],
		"path": "math.h",
		"syntax": "float j1f(float x )",
		"type": "Linux API (man 3)"
	},
	"j1l": {
		"descr": "",
		"name": "j1l",
		"params":[],
		"path": "math.h",
		"syntax": "float jnf(int n , float x )",
		"type": "Linux API (man 3)"
	},
	"jn": {
		"descr": "",
		"name": "jn",
		"params":[],
		"path": "math.h",
		"syntax": "long double j0l(long double x )",
		"type": "Linux API (man 3)"
	},
	"jnf": {
		"descr": "",
		"name": "jnf",
		"params":[],
		"path": "math.h",
		"syntax": "long double j1l(long double x )",
		"type": "Linux API (man 3)"
	},
	"jnl": {
		"descr": "",
		"name": "jnl",
		"params":[],
		"path": "math.h",
		"syntax": "long double jnl(int n , long double x )",
		"type": "Linux API (man 3)"
	},
	"j0": {
		"descr": "",
		"name": "j0",
		"params":[],
		"path": "math.h",
		"syntax": "double j0(double x )",
		"type": "Linux API (man 3)"
	},
	"j0f": {
		"descr": "",
		"name": "j0f",
		"params":[],
		"path": "math.h",
		"syntax": "double j1(double x )",
		"type": "Linux API (man 3)"
	},
	"j0l": {
		"descr": "",
		"name": "j0l",
		"params":[],
		"path": "math.h",
		"syntax": "double jn(int n , double x )",
		"type": "Linux API (man 3)"
	},
	"j1": {
		"descr": "",
		"name": "j1",
		"params":[],
		"path": "math.h",
		"syntax": "float j0f(float x )",
		"type": "Linux API (man 3)"
	},
	"j1f": {
		"descr": "",
		"name": "j1f",
		"params":[],
		"path": "math.h",
		"syntax": "float j1f(float x )",
		"type": "Linux API (man 3)"
	},
	"j1l": {
		"descr": "",
		"name": "j1l",
		"params":[],
		"path": "math.h",
		"syntax": "float jnf(int n , float x )",
		"type": "Linux API (man 3)"
	},
	"jn": {
		"descr": "",
		"name": "jn",
		"params":[],
		"path": "math.h",
		"syntax": "long double j0l(long double x )",
		"type": "Linux API (man 3)"
	},
	"jnf": {
		"descr": "",
		"name": "jnf",
		"params":[],
		"path": "math.h",
		"syntax": "long double j1l(long double x )",
		"type": "Linux API (man 3)"
	},
	"jnl": {
		"descr": "",
		"name": "jnl",
		"params":[],
		"path": "math.h",
		"syntax": "long double jnl(int n , long double x )",
		"type": "Linux API (man 3)"
	},
	"j0": {
		"descr": "",
		"name": "j0",
		"params":[],
		"path": "math.h",
		"syntax": "double j0(double x )",
		"type": "Linux API (man 3)"
	},
	"j0f": {
		"descr": "",
		"name": "j0f",
		"params":[],
		"path": "math.h",
		"syntax": "double j1(double x )",
		"type": "Linux API (man 3)"
	},
	"j0l": {
		"descr": "",
		"name": "j0l",
		"params":[],
		"path": "math.h",
		"syntax": "double jn(int n , double x )",
		"type": "Linux API (man 3)"
	},
	"j1": {
		"descr": "",
		"name": "j1",
		"params":[],
		"path": "math.h",
		"syntax": "float j0f(float x )",
		"type": "Linux API (man 3)"
	},
	"j1f": {
		"descr": "",
		"name": "j1f",
		"params":[],
		"path": "math.h",
		"syntax": "float j1f(float x )",
		"type": "Linux API (man 3)"
	},
	"j1l": {
		"descr": "",
		"name": "j1l",
		"params":[],
		"path": "math.h",
		"syntax": "float jnf(int n , float x )",
		"type": "Linux API (man 3)"
	},
	"jn": {
		"descr": "",
		"name": "jn",
		"params":[],
		"path": "math.h",
		"syntax": "long double j0l(long double x )",
		"type": "Linux API (man 3)"
	},
	"jnf": {
		"descr": "",
		"name": "jnf",
		"params":[],
		"path": "math.h",
		"syntax": "long double j1l(long double x )",
		"type": "Linux API (man 3)"
	},
	"jnl": {
		"descr": "",
		"name": "jnl",
		"params":[],
		"path": "math.h",
		"syntax": "long double jnl(int n , long double x )",
		"type": "Linux API (man 3)"
	},
	"drand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "drand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "double drand48(void)",
		"type": "Linux API (man 3)"
	},
	"erand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "erand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "double erand48(unsigned short xsubi [3])",
		"type": "Linux API (man 3)"
	},
	"lrand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "lrand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "long lrand48(void)",
		"type": "Linux API (man 3)"
	},
	"nrand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "nrand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "long nrand48(unsigned short xsubi [3])",
		"type": "Linux API (man 3)"
	},
	"mrand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "mrand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "long mrand48(void)",
		"type": "Linux API (man 3)"
	},
	"jrand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "jrand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "long jrand48(unsigned short xsubi [3])",
		"type": "Linux API (man 3)"
	},
	"srand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "srand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void srand48(long seedval )",
		"type": "Linux API (man 3)"
	},
	"seed48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "seed48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "unsigned short *seed48(unsigned short seed16v [3])",
		"type": "Linux API (man 3)"
	},
	"lcong48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "lcong48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void lcong48(unsigned short param [7])",
		"type": "Linux API (man 3)"
	},
	"lio_listio": {
		"descr": "initiate a list of I/O requests",
		"name": "lio_listio",
		"params":[],
		"path": "aio.h",
		"syntax": "int lio_listio(int mode , struct aiocb *const aiocb_list [], int nitems , struct sigevent * sevp )",
		"type": "Linux API (man 3)"
	},
	"abs": {
		"descr": "compute the absolute value of an integer",
		"name": "abs",
		"params":[],
		"path": "stdlib.h, inttypes.h",
		"syntax": "int abs(int j )",
		"type": "Linux API (man 3)"
	},
	"labs": {
		"descr": "compute the absolute value of an integer",
		"name": "labs",
		"params":[],
		"path": "stdlib.h, inttypes.h",
		"syntax": "long labs(long j )",
		"type": "Linux API (man 3)"
	},
	"llabs": {
		"descr": "compute the absolute value of an integer",
		"name": "llabs",
		"params":[],
		"path": "stdlib.h, inttypes.h",
		"syntax": "long long llabs(long long j )",
		"type": "Linux API (man 3)"
	},
	"imaxabs": {
		"descr": "compute the absolute value of an integer",
		"name": "imaxabs",
		"params":[],
		"path": "stdlib.h, inttypes.h",
		"syntax": "intmax_t imaxabs(intmax_t j )",
		"type": "Linux API (man 3)"
	},
	"div": {
		"descr": "compute quotient and remainder of",
		"name": "div",
		"params":[],
		"path": "stdlib.h, inttypes.h",
		"syntax": "div_t div(int numerator , int denominator )",
		"type": "Linux API (man 3)"
	},
	"ldiv": {
		"descr": "compute quotient and remainder of",
		"name": "ldiv",
		"params":[],
		"path": "stdlib.h, inttypes.h",
		"syntax": "ldiv_t ldiv(long numerator , long denominator )",
		"type": "Linux API (man 3)"
	},
	"lldiv": {
		"descr": "compute quotient and remainder of",
		"name": "lldiv",
		"params":[],
		"path": "stdlib.h, inttypes.h",
		"syntax": "lldiv_t lldiv(long long numerator , long long denominator )",
		"type": "Linux API (man 3)"
	},
	"imaxdiv": {
		"descr": "compute quotient and remainder of",
		"name": "imaxdiv",
		"params":[],
		"path": "stdlib.h, inttypes.h",
		"syntax": "imaxdiv_t imaxdiv(intmax_t numerator , intmax_t denominator )",
		"type": "Linux API (man 3)"
	},
	"lockf": {
		"descr": "apply, test or remove a POSIX lock on an open file",
		"name": "lockf",
		"params":[],
		"path": "unistd.h",
		"syntax": "int lockf(int fd , int cmd , off_t len )",
		"type": "Linux API (man 3)"
	},
	"log10": {
		"descr": "base-10 logarithmic function",
		"name": "log10",
		"params":[],
		"path": "math.h",
		"syntax": "double log10(double x )",
		"type": "Linux API (man 3)"
	},
	"log10f": {
		"descr": "base-10 logarithmic function",
		"name": "log10f",
		"params":[],
		"path": "math.h",
		"syntax": "float log10f(float x )",
		"type": "Linux API (man 3)"
	},
	"log10l": {
		"descr": "base-10 logarithmic function",
		"name": "log10l",
		"params":[],
		"path": "math.h",
		"syntax": "long double log10l(long double x )",
		"type": "Linux API (man 3)"
	},
	"log10": {
		"descr": "base-10 logarithmic function",
		"name": "log10",
		"params":[],
		"path": "math.h",
		"syntax": "double log10(double x )",
		"type": "Linux API (man 3)"
	},
	"log10f": {
		"descr": "base-10 logarithmic function",
		"name": "log10f",
		"params":[],
		"path": "math.h",
		"syntax": "float log10f(float x )",
		"type": "Linux API (man 3)"
	},
	"log10l": {
		"descr": "base-10 logarithmic function",
		"name": "log10l",
		"params":[],
		"path": "math.h",
		"syntax": "long double log10l(long double x )",
		"type": "Linux API (man 3)"
	},
	"log10": {
		"descr": "base-10 logarithmic function",
		"name": "log10",
		"params":[],
		"path": "math.h",
		"syntax": "double log10(double x )",
		"type": "Linux API (man 3)"
	},
	"log10f": {
		"descr": "base-10 logarithmic function",
		"name": "log10f",
		"params":[],
		"path": "math.h",
		"syntax": "float log10f(float x )",
		"type": "Linux API (man 3)"
	},
	"log10l": {
		"descr": "base-10 logarithmic function",
		"name": "log10l",
		"params":[],
		"path": "math.h",
		"syntax": "long double log10l(long double x )",
		"type": "Linux API (man 3)"
	},
	"log1p": {
		"descr": "logarithm of 1 plus argument",
		"name": "log1p",
		"params":[],
		"path": "math.h",
		"syntax": "double log1p(double x )",
		"type": "Linux API (man 3)"
	},
	"log1pf": {
		"descr": "logarithm of 1 plus argument",
		"name": "log1pf",
		"params":[],
		"path": "math.h",
		"syntax": "float log1pf(float x )",
		"type": "Linux API (man 3)"
	},
	"log1pl": {
		"descr": "logarithm of 1 plus argument",
		"name": "log1pl",
		"params":[],
		"path": "math.h",
		"syntax": "long double log1pl(long double x )",
		"type": "Linux API (man 3)"
	},
	"log1p": {
		"descr": "logarithm of 1 plus argument",
		"name": "log1p",
		"params":[],
		"path": "math.h",
		"syntax": "double log1p(double x )",
		"type": "Linux API (man 3)"
	},
	"log1pf": {
		"descr": "logarithm of 1 plus argument",
		"name": "log1pf",
		"params":[],
		"path": "math.h",
		"syntax": "float log1pf(float x )",
		"type": "Linux API (man 3)"
	},
	"log1pl": {
		"descr": "logarithm of 1 plus argument",
		"name": "log1pl",
		"params":[],
		"path": "math.h",
		"syntax": "long double log1pl(long double x )",
		"type": "Linux API (man 3)"
	},
	"log1p": {
		"descr": "logarithm of 1 plus argument",
		"name": "log1p",
		"params":[],
		"path": "math.h",
		"syntax": "double log1p(double x )",
		"type": "Linux API (man 3)"
	},
	"log1pf": {
		"descr": "logarithm of 1 plus argument",
		"name": "log1pf",
		"params":[],
		"path": "math.h",
		"syntax": "float log1pf(float x )",
		"type": "Linux API (man 3)"
	},
	"log1pl": {
		"descr": "logarithm of 1 plus argument",
		"name": "log1pl",
		"params":[],
		"path": "math.h",
		"syntax": "long double log1pl(long double x )",
		"type": "Linux API (man 3)"
	},
	"log2": {
		"descr": "base-2 logarithmic function",
		"name": "log2",
		"params":[],
		"path": "math.h",
		"syntax": "double log2(double x )",
		"type": "Linux API (man 3)"
	},
	"log2f": {
		"descr": "base-2 logarithmic function",
		"name": "log2f",
		"params":[],
		"path": "math.h",
		"syntax": "float log2f(float x )",
		"type": "Linux API (man 3)"
	},
	"log2l": {
		"descr": "base-2 logarithmic function",
		"name": "log2l",
		"params":[],
		"path": "math.h",
		"syntax": "long double log2l(long double x )",
		"type": "Linux API (man 3)"
	},
	"log2": {
		"descr": "base-2 logarithmic function",
		"name": "log2",
		"params":[],
		"path": "math.h",
		"syntax": "double log2(double x )",
		"type": "Linux API (man 3)"
	},
	"log2f": {
		"descr": "base-2 logarithmic function",
		"name": "log2f",
		"params":[],
		"path": "math.h",
		"syntax": "float log2f(float x )",
		"type": "Linux API (man 3)"
	},
	"log2l": {
		"descr": "base-2 logarithmic function",
		"name": "log2l",
		"params":[],
		"path": "math.h",
		"syntax": "long double log2l(long double x )",
		"type": "Linux API (man 3)"
	},
	"log2": {
		"descr": "base-2 logarithmic function",
		"name": "log2",
		"params":[],
		"path": "math.h",
		"syntax": "double log2(double x )",
		"type": "Linux API (man 3)"
	},
	"log2f": {
		"descr": "base-2 logarithmic function",
		"name": "log2f",
		"params":[],
		"path": "math.h",
		"syntax": "float log2f(float x )",
		"type": "Linux API (man 3)"
	},
	"log2l": {
		"descr": "base-2 logarithmic function",
		"name": "log2l",
		"params":[],
		"path": "math.h",
		"syntax": "long double log2l(long double x )",
		"type": "Linux API (man 3)"
	},
	"log": {
		"descr": "natural logarithmic function",
		"name": "log",
		"params":[],
		"path": "math.h",
		"syntax": "double log(double x )",
		"type": "Linux API (man 3)"
	},
	"logf": {
		"descr": "natural logarithmic function",
		"name": "logf",
		"params":[],
		"path": "math.h",
		"syntax": "float logf(float x )",
		"type": "Linux API (man 3)"
	},
	"logl": {
		"descr": "natural logarithmic function",
		"name": "logl",
		"params":[],
		"path": "math.h",
		"syntax": "long double logl(long double x )",
		"type": "Linux API (man 3)"
	},
	"logb": {
		"descr": "get exponent of a floating-point value",
		"name": "logb",
		"params":[],
		"path": "math.h",
		"syntax": "double logb(double x )",
		"type": "Linux API (man 3)"
	},
	"logbf": {
		"descr": "get exponent of a floating-point value",
		"name": "logbf",
		"params":[],
		"path": "math.h",
		"syntax": "float logbf(float x )",
		"type": "Linux API (man 3)"
	},
	"logbl": {
		"descr": "get exponent of a floating-point value",
		"name": "logbl",
		"params":[],
		"path": "math.h",
		"syntax": "long double logbl(long double x )",
		"type": "Linux API (man 3)"
	},
	"logb": {
		"descr": "get exponent of a floating-point value",
		"name": "logb",
		"params":[],
		"path": "math.h",
		"syntax": "double logb(double x )",
		"type": "Linux API (man 3)"
	},
	"logbf": {
		"descr": "get exponent of a floating-point value",
		"name": "logbf",
		"params":[],
		"path": "math.h",
		"syntax": "float logbf(float x )",
		"type": "Linux API (man 3)"
	},
	"logbl": {
		"descr": "get exponent of a floating-point value",
		"name": "logbl",
		"params":[],
		"path": "math.h",
		"syntax": "long double logbl(long double x )",
		"type": "Linux API (man 3)"
	},
	"logb": {
		"descr": "get exponent of a floating-point value",
		"name": "logb",
		"params":[],
		"path": "math.h",
		"syntax": "double logb(double x )",
		"type": "Linux API (man 3)"
	},
	"logbf": {
		"descr": "get exponent of a floating-point value",
		"name": "logbf",
		"params":[],
		"path": "math.h",
		"syntax": "float logbf(float x )",
		"type": "Linux API (man 3)"
	},
	"logbl": {
		"descr": "get exponent of a floating-point value",
		"name": "logbl",
		"params":[],
		"path": "math.h",
		"syntax": "long double logbl(long double x )",
		"type": "Linux API (man 3)"
	},
	"log": {
		"descr": "natural logarithmic function",
		"name": "log",
		"params":[],
		"path": "math.h",
		"syntax": "double log(double x )",
		"type": "Linux API (man 3)"
	},
	"logf": {
		"descr": "natural logarithmic function",
		"name": "logf",
		"params":[],
		"path": "math.h",
		"syntax": "float logf(float x )",
		"type": "Linux API (man 3)"
	},
	"logl": {
		"descr": "natural logarithmic function",
		"name": "logl",
		"params":[],
		"path": "math.h",
		"syntax": "long double logl(long double x )",
		"type": "Linux API (man 3)"
	},
	"login": {
		"descr": "write utmp and wtmp entries",
		"name": "login",
		"params":[],
		"path": "utmp.h",
		"syntax": "void login(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"logout": {
		"descr": "write utmp and wtmp entries",
		"name": "logout",
		"params":[],
		"path": "utmp.h",
		"syntax": "int logout(const char * ut_line )",
		"type": "Linux API (man 3)"
	},
	"openpty": {
		"descr": "terminal utility functions",
		"name": "openpty",
		"params":[],
		"path": "pty.h, utmp.h",
		"syntax": "int openpty(int * amaster , int * aslave , char * name , const struct termios * termp , const struct winsize * winp )",
		"type": "Linux API (man 3)"
	},
	"login_tty": {
		"descr": "terminal utility functions",
		"name": "login_tty",
		"params":[],
		"path": "pty.h, utmp.h",
		"syntax": "pid_t forkpty(int * amaster , char * name , const struct termios * termp , const struct winsize * winp )",
		"type": "Linux API (man 3)"
	},
	"forkpty": {
		"descr": "terminal utility functions",
		"name": "forkpty",
		"params":[],
		"path": "pty.h, utmp.h",
		"syntax": "int login_tty(int fd )",
		"type": "Linux API (man 3)"
	},
	"log": {
		"descr": "natural logarithmic function",
		"name": "log",
		"params":[],
		"path": "math.h",
		"syntax": "double log(double x )",
		"type": "Linux API (man 3)"
	},
	"logf": {
		"descr": "natural logarithmic function",
		"name": "logf",
		"params":[],
		"path": "math.h",
		"syntax": "float logf(float x )",
		"type": "Linux API (man 3)"
	},
	"logl": {
		"descr": "natural logarithmic function",
		"name": "logl",
		"params":[],
		"path": "math.h",
		"syntax": "long double logl(long double x )",
		"type": "Linux API (man 3)"
	},
	"login": {
		"descr": "write utmp and wtmp entries",
		"name": "login",
		"params":[],
		"path": "utmp.h",
		"syntax": "void login(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"logout": {
		"descr": "write utmp and wtmp entries",
		"name": "logout",
		"params":[],
		"path": "utmp.h",
		"syntax": "int logout(const char * ut_line )",
		"type": "Linux API (man 3)"
	},
	"updwtmp": {
		"descr": "append an entry to the wtmp file",
		"name": "updwtmp",
		"params":[],
		"path": "utmp.h",
		"syntax": "void updwtmp(const char * wtmp_file , const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"logwtmp": {
		"descr": "append an entry to the wtmp file",
		"name": "logwtmp",
		"params":[],
		"path": "utmp.h",
		"syntax": "void logwtmp(const char * line , const char * name , const char * host )",
		"type": "Linux API (man 3)"
	},
	"setjmp": {
		"descr": "performing a nonlocal goto",
		"name": "setjmp",
		"params":[],
		"path": "setjmp.h",
		"syntax": "int setjmp(jmp_buf env )",
		"type": "Linux API (man 3)"
	},
	"sigsetjmp": {
		"descr": "performing a nonlocal goto",
		"name": "sigsetjmp",
		"params":[],
		"path": "setjmp.h",
		"syntax": "int sigsetjmp(sigjmp_buf env , int savesigs )",
		"type": "Linux API (man 3)"
	},
	"longjmp": {
		"descr": "performing a nonlocal goto",
		"name": "longjmp",
		"params":[],
		"path": "setjmp.h",
		"syntax": "void longjmp(jmp_buf env , int val )",
		"type": "Linux API (man 3)"
	},
	"siglongjmp": {
		"descr": "performing a nonlocal goto",
		"name": "siglongjmp",
		"params":[],
		"path": "setjmp.h",
		"syntax": "void siglongjmp(sigjmp_buf env , int val )",
		"type": "Linux API (man 3)"
	},
	"drand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "drand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "double drand48(void)",
		"type": "Linux API (man 3)"
	},
	"erand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "erand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "double erand48(unsigned short xsubi [3])",
		"type": "Linux API (man 3)"
	},
	"lrand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "lrand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "long lrand48(void)",
		"type": "Linux API (man 3)"
	},
	"nrand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "nrand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "long nrand48(unsigned short xsubi [3])",
		"type": "Linux API (man 3)"
	},
	"mrand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "mrand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "long mrand48(void)",
		"type": "Linux API (man 3)"
	},
	"jrand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "jrand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "long jrand48(unsigned short xsubi [3])",
		"type": "Linux API (man 3)"
	},
	"srand48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "srand48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void srand48(long seedval )",
		"type": "Linux API (man 3)"
	},
	"seed48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "seed48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "unsigned short *seed48(unsigned short seed16v [3])",
		"type": "Linux API (man 3)"
	},
	"lcong48": {
		"descr": "generate uniformly distributed pseudo-random numbers",
		"name": "lcong48",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void lcong48(unsigned short param [7])",
		"type": "Linux API (man 3)"
	},
	"makedev": {
		"descr": "manage a device number",
		"name": "makedev",
		"params":[],
		"path": "",
		"syntax": "dev_t makedev(unsigned int maj , unsigned int min )",
		"type": "Linux API (man 3)"
	},
	"major": {
		"descr": "manage a device number",
		"name": "major",
		"params":[],
		"path": "",
		"syntax": "unsigned int major(dev_t dev )",
		"type": "Linux API (man 3)"
	},
	"minor": {
		"descr": "manage a device number",
		"name": "minor",
		"params":[],
		"path": "",
		"syntax": "unsigned int minor(dev_t dev )",
		"type": "Linux API (man 3)"
	},
	"mallinfo": {
		"descr": "obtain memory allocation information",
		"name": "mallinfo",
		"params":[],
		"path": "malloc.h",
		"syntax": "struct mallinfo mallinfo(void)",
		"type": "Linux API (man 3)"
	},
	"malloc": {
		"descr": "allocate and free dynamic memory",
		"name": "malloc",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void *malloc(size_t size )",
		"type": "Linux API (man 3)"
	},
	"free": {
		"descr": "allocate and free dynamic memory",
		"name": "free",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void free(void *ptr )",
		"type": "Linux API (man 3)"
	},
	"calloc": {
		"descr": "allocate and free dynamic memory",
		"name": "calloc",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void *calloc(size_t nmemb , size_t size )",
		"type": "Linux API (man 3)"
	},
	"realloc": {
		"descr": "allocate and free dynamic memory",
		"name": "realloc",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void *realloc(void *ptr , size_t size )",
		"type": "Linux API (man 3)"
	},
	"reallocarray": {
		"descr": "allocate and free dynamic memory",
		"name": "reallocarray",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void *reallocarray(void *ptr , size_t nmemb , size_t size )",
		"type": "Linux API (man 3)"
	},
	"dngettext": {
		"descr": "translate message and choose plural form",
		"name": "dngettext",
		"params":[],
		"path": "libintl.h",
		"syntax": "char * dngettext (const char * domainname , const char * msgid , const char * msgid_plural , unsigned long int n )",
		"type": "Linux API (man 3)"
	},
	"dcngettext": {
		"descr": "translate message and choose plural form",
		"name": "dcngettext",
		"params":[],
		"path": "libintl.h",
		"syntax": "char * dcngettext (const char * domainname , const char * msgid , const char * msgid_plural , unsigned long int n , int category )",
		"type": "Linux API (man 3)"
	},
	"random": {
		"descr": "random number generator",
		"name": "random",
		"params":[],
		"path": "stdlib.h",
		"syntax": "long random(void)",
		"type": "Linux API (man 3)"
	},
	"srandom": {
		"descr": "random number generator",
		"name": "srandom",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void srandom(unsigned seed )",
		"type": "Linux API (man 3)"
	},
	"initstate": {
		"descr": "random number generator",
		"name": "initstate",
		"params":[],
		"path": "stdlib.h",
		"syntax": "char *initstate(unsigned seed , char * state , size_t n )",
		"type": "Linux API (man 3)"
	},
	"setstate": {
		"descr": "random number generator",
		"name": "setstate",
		"params":[],
		"path": "stdlib.h",
		"syntax": "char *setstate(char * state )",
		"type": "Linux API (man 3)"
	},
	"readproc": {
		"descr": "read information from next /proc/## entry",
		"name": "readproc",
		"params":[],
		"path": "",
		"syntax": "proc_t* readproc(PROCTAB * PT , proc_t * return_buf )",
		"type": "Linux API (man 3)"
	},
	"freeproc": {
		"descr": "read information from next /proc/## entry",
		"name": "freeproc",
		"params":[],
		"path": "",
		"syntax": "void freeproc(proc_t * p )",
		"type": "Linux API (man 3)"
	},
	"malloc": {
		"descr": "allocate and free dynamic memory",
		"name": "malloc",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void *malloc(size_t size )",
		"type": "Linux API (man 3)"
	},
	"free": {
		"descr": "allocate and free dynamic memory",
		"name": "free",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void free(void *ptr )",
		"type": "Linux API (man 3)"
	},
	"calloc": {
		"descr": "allocate and free dynamic memory",
		"name": "calloc",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void *calloc(size_t nmemb , size_t size )",
		"type": "Linux API (man 3)"
	},
	"realloc": {
		"descr": "allocate and free dynamic memory",
		"name": "realloc",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void *realloc(void *ptr , size_t size )",
		"type": "Linux API (man 3)"
	},
	"reallocarray": {
		"descr": "allocate and free dynamic memory",
		"name": "reallocarray",
		"params":[],
		"path": "stdlib.h",
		"syntax": "void *reallocarray(void *ptr , size_t nmemb , size_t size )",
		"type": "Linux API (man 3)"
	},
	"regcomp": {
		"descr": "POSIX regex functions",
		"name": "regcomp",
		"params":[],
		"path": "regex.h",
		"syntax": "int regcomp(regex_t * preg , const char * regex , int cflags )",
		"type": "Linux API (man 3)"
	},
	"regexec": {
		"descr": "POSIX regex functions",
		"name": "regexec",
		"params":[],
		"path": "regex.h",
		"syntax": "int regexec(const regex_t * preg , const char * string , size_t nmatch , regmatch_t pmatch[] , int eflags )",
		"type": "Linux API (man 3)"
	},
	"regerror": {
		"descr": "POSIX regex functions",
		"name": "regerror",
		"params":[],
		"path": "regex.h",
		"syntax": "size_t regerror(int errcode , const regex_t * preg , char * errbuf , size_t errbuf_size )",
		"type": "Linux API (man 3)"
	},
	"regfree": {
		"descr": "POSIX regex functions",
		"name": "regfree",
		"params":[],
		"path": "regex.h",
		"syntax": "void regfree(regex_t * preg )",
		"type": "Linux API (man 3)"
	},
	"regcomp": {
		"descr": "POSIX regex functions",
		"name": "regcomp",
		"params":[],
		"path": "regex.h",
		"syntax": "int regcomp(regex_t * preg , const char * regex , int cflags )",
		"type": "Linux API (man 3)"
	},
	"regexec": {
		"descr": "POSIX regex functions",
		"name": "regexec",
		"params":[],
		"path": "regex.h",
		"syntax": "int regexec(const regex_t * preg , const char * string , size_t nmatch , regmatch_t pmatch[] , int eflags )",
		"type": "Linux API (man 3)"
	},
	"regerror": {
		"descr": "POSIX regex functions",
		"name": "regerror",
		"params":[],
		"path": "regex.h",
		"syntax": "size_t regerror(int errcode , const regex_t * preg , char * errbuf , size_t errbuf_size )",
		"type": "Linux API (man 3)"
	},
	"regfree": {
		"descr": "POSIX regex functions",
		"name": "regfree",
		"params":[],
		"path": "regex.h",
		"syntax": "void regfree(regex_t * preg )",
		"type": "Linux API (man 3)"
	},
	"regcomp": {
		"descr": "POSIX regex functions",
		"name": "regcomp",
		"params":[],
		"path": "regex.h",
		"syntax": "int regcomp(regex_t * preg , const char * regex , int cflags )",
		"type": "Linux API (man 3)"
	},
	"regexec": {
		"descr": "POSIX regex functions",
		"name": "regexec",
		"params":[],
		"path": "regex.h",
		"syntax": "int regexec(const regex_t * preg , const char * string , size_t nmatch , regmatch_t pmatch[] , int eflags )",
		"type": "Linux API (man 3)"
	},
	"regerror": {
		"descr": "POSIX regex functions",
		"name": "regerror",
		"params":[],
		"path": "regex.h",
		"syntax": "size_t regerror(int errcode , const regex_t * preg , char * errbuf , size_t errbuf_size )",
		"type": "Linux API (man 3)"
	},
	"regfree": {
		"descr": "POSIX regex functions",
		"name": "regfree",
		"params":[],
		"path": "regex.h",
		"syntax": "void regfree(regex_t * preg )",
		"type": "Linux API (man 3)"
	},
	"regcomp": {
		"descr": "POSIX regex functions",
		"name": "regcomp",
		"params":[],
		"path": "regex.h",
		"syntax": "int regcomp(regex_t * preg , const char * regex , int cflags )",
		"type": "Linux API (man 3)"
	},
	"regexec": {
		"descr": "POSIX regex functions",
		"name": "regexec",
		"params":[],
		"path": "regex.h",
		"syntax": "int regexec(const regex_t * preg , const char * string , size_t nmatch , regmatch_t pmatch[] , int eflags )",
		"type": "Linux API (man 3)"
	},
	"regerror": {
		"descr": "POSIX regex functions",
		"name": "regerror",
		"params":[],
		"path": "regex.h",
		"syntax": "size_t regerror(int errcode , const regex_t * preg , char * errbuf , size_t errbuf_size )",
		"type": "Linux API (man 3)"
	},
	"regfree": {
		"descr": "POSIX regex functions",
		"name": "regfree",
		"params":[],
		"path": "regex.h",
		"syntax": "void regfree(regex_t * preg )",
		"type": "Linux API (man 3)"
	},
	"tgamma": {
		"descr": "true gamma function",
		"name": "tgamma",
		"params":[],
		"path": "math.h",
		"syntax": "double tgamma(double x )",
		"type": "Linux API (man 3)"
	},
	"tgammaf": {
		"descr": "true gamma function",
		"name": "tgammaf",
		"params":[],
		"path": "math.h",
		"syntax": "float tgammaf(float x )",
		"type": "Linux API (man 3)"
	},
	"tgammal": {
		"descr": "true gamma function",
		"name": "tgammal",
		"params":[],
		"path": "math.h",
		"syntax": "long double tgammal(long double x )",
		"type": "Linux API (man 3)"
	},
	"tgamma": {
		"descr": "true gamma function",
		"name": "tgamma",
		"params":[],
		"path": "math.h",
		"syntax": "double tgamma(double x )",
		"type": "Linux API (man 3)"
	},
	"tgammaf": {
		"descr": "true gamma function",
		"name": "tgammaf",
		"params":[],
		"path": "math.h",
		"syntax": "float tgammaf(float x )",
		"type": "Linux API (man 3)"
	},
	"tgammal": {
		"descr": "true gamma function",
		"name": "tgammal",
		"params":[],
		"path": "math.h",
		"syntax": "long double tgammal(long double x )",
		"type": "Linux API (man 3)"
	},
	"timegm": {
		"descr": "inverses of gmtime and localtime",
		"name": "timegm",
		"params":[],
		"path": "time.h",
		"syntax": "time_t timelocal(struct tm * tm )",
		"type": "Linux API (man 3)"
	},
	"timelocal": {
		"descr": "inverses of gmtime and localtime",
		"name": "timelocal",
		"params":[],
		"path": "time.h",
		"syntax": "time_t timegm(struct tm * tm )",
		"type": "Linux API (man 3)"
	},
	"timegm": {
		"descr": "inverses of gmtime and localtime",
		"name": "timegm",
		"params":[],
		"path": "time.h",
		"syntax": "time_t timelocal(struct tm * tm )",
		"type": "Linux API (man 3)"
	},
	"timelocal": {
		"descr": "inverses of gmtime and localtime",
		"name": "timelocal",
		"params":[],
		"path": "time.h",
		"syntax": "time_t timegm(struct tm * tm )",
		"type": "Linux API (man 3)"
	},
	"timeradd": {
		"descr": "timeval operations",
		"name": "timeradd",
		"params":[],
		"path": "",
		"syntax": "void timeradd(struct timeval * a , struct timeval * b , struct timeval * res )",
		"type": "Linux API (man 3)"
	},
	"timersub": {
		"descr": "timeval operations",
		"name": "timersub",
		"params":[],
		"path": "",
		"syntax": "void timersub(struct timeval * a , struct timeval * b , struct timeval * res )",
		"type": "Linux API (man 3)"
	},
	"timercmp": {
		"descr": "timeval operations",
		"name": "timercmp",
		"params":[],
		"path": "",
		"syntax": "void timerclear(struct timeval * tvp )",
		"type": "Linux API (man 3)"
	},
	"timerclear": {
		"descr": "timeval operations",
		"name": "timerclear",
		"params":[],
		"path": "",
		"syntax": "int timerisset(struct timeval * tvp )",
		"type": "Linux API (man 3)"
	},
	"timerisset": {
		"descr": "timeval operations",
		"name": "timerisset",
		"params":[],
		"path": "",
		"syntax": "int timercmp(struct timeval * a , struct timeval * b , CMP )",
		"type": "Linux API (man 3)"
	},
	"timeradd": {
		"descr": "timeval operations",
		"name": "timeradd",
		"params":[],
		"path": "",
		"syntax": "void timeradd(struct timeval * a , struct timeval * b , struct timeval * res )",
		"type": "Linux API (man 3)"
	},
	"timersub": {
		"descr": "timeval operations",
		"name": "timersub",
		"params":[],
		"path": "",
		"syntax": "void timersub(struct timeval * a , struct timeval * b , struct timeval * res )",
		"type": "Linux API (man 3)"
	},
	"timercmp": {
		"descr": "timeval operations",
		"name": "timercmp",
		"params":[],
		"path": "",
		"syntax": "void timerclear(struct timeval * tvp )",
		"type": "Linux API (man 3)"
	},
	"timerclear": {
		"descr": "timeval operations",
		"name": "timerclear",
		"params":[],
		"path": "",
		"syntax": "int timerisset(struct timeval * tvp )",
		"type": "Linux API (man 3)"
	},
	"timerisset": {
		"descr": "timeval operations",
		"name": "timerisset",
		"params":[],
		"path": "",
		"syntax": "int timercmp(struct timeval * a , struct timeval * b , CMP )",
		"type": "Linux API (man 3)"
	},
	"timeradd": {
		"descr": "timeval operations",
		"name": "timeradd",
		"params":[],
		"path": "",
		"syntax": "void timeradd(struct timeval * a , struct timeval * b , struct timeval * res )",
		"type": "Linux API (man 3)"
	},
	"timersub": {
		"descr": "timeval operations",
		"name": "timersub",
		"params":[],
		"path": "",
		"syntax": "void timersub(struct timeval * a , struct timeval * b , struct timeval * res )",
		"type": "Linux API (man 3)"
	},
	"timercmp": {
		"descr": "timeval operations",
		"name": "timercmp",
		"params":[],
		"path": "",
		"syntax": "void timerclear(struct timeval * tvp )",
		"type": "Linux API (man 3)"
	},
	"timerclear": {
		"descr": "timeval operations",
		"name": "timerclear",
		"params":[],
		"path": "",
		"syntax": "int timerisset(struct timeval * tvp )",
		"type": "Linux API (man 3)"
	},
	"timerisset": {
		"descr": "timeval operations",
		"name": "timerisset",
		"params":[],
		"path": "",
		"syntax": "int timercmp(struct timeval * a , struct timeval * b , CMP )",
		"type": "Linux API (man 3)"
	},
	"timeradd": {
		"descr": "timeval operations",
		"name": "timeradd",
		"params":[],
		"path": "",
		"syntax": "void timeradd(struct timeval * a , struct timeval * b , struct timeval * res )",
		"type": "Linux API (man 3)"
	},
	"timersub": {
		"descr": "timeval operations",
		"name": "timersub",
		"params":[],
		"path": "",
		"syntax": "void timersub(struct timeval * a , struct timeval * b , struct timeval * res )",
		"type": "Linux API (man 3)"
	},
	"timercmp": {
		"descr": "timeval operations",
		"name": "timercmp",
		"params":[],
		"path": "",
		"syntax": "void timerclear(struct timeval * tvp )",
		"type": "Linux API (man 3)"
	},
	"timerclear": {
		"descr": "timeval operations",
		"name": "timerclear",
		"params":[],
		"path": "",
		"syntax": "int timerisset(struct timeval * tvp )",
		"type": "Linux API (man 3)"
	},
	"timerisset": {
		"descr": "timeval operations",
		"name": "timerisset",
		"params":[],
		"path": "",
		"syntax": "int timercmp(struct timeval * a , struct timeval * b , CMP )",
		"type": "Linux API (man 3)"
	},
	"timeradd": {
		"descr": "timeval operations",
		"name": "timeradd",
		"params":[],
		"path": "",
		"syntax": "void timeradd(struct timeval * a , struct timeval * b , struct timeval * res )",
		"type": "Linux API (man 3)"
	},
	"timersub": {
		"descr": "timeval operations",
		"name": "timersub",
		"params":[],
		"path": "",
		"syntax": "void timersub(struct timeval * a , struct timeval * b , struct timeval * res )",
		"type": "Linux API (man 3)"
	},
	"timercmp": {
		"descr": "timeval operations",
		"name": "timercmp",
		"params":[],
		"path": "",
		"syntax": "void timerclear(struct timeval * tvp )",
		"type": "Linux API (man 3)"
	},
	"timerclear": {
		"descr": "timeval operations",
		"name": "timerclear",
		"params":[],
		"path": "",
		"syntax": "int timerisset(struct timeval * tvp )",
		"type": "Linux API (man 3)"
	},
	"timerisset": {
		"descr": "timeval operations",
		"name": "timerisset",
		"params":[],
		"path": "",
		"syntax": "int timercmp(struct timeval * a , struct timeval * b , CMP )",
		"type": "Linux API (man 3)"
	},
	"getutent": {
		"descr": "access utmp file entries",
		"name": "getutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutent(void)",
		"type": "Linux API (man 3)"
	},
	"getutid": {
		"descr": "access utmp file entries",
		"name": "getutid",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutid(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"getutline": {
		"descr": "access utmp file entries",
		"name": "getutline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"pututline": {
		"descr": "access utmp file entries",
		"name": "pututline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *pututline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"setutent": {
		"descr": "access utmp file entries",
		"name": "setutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void setutent(void)",
		"type": "Linux API (man 3)"
	},
	"endutent": {
		"descr": "access utmp file entries",
		"name": "endutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void endutent(void)",
		"type": "Linux API (man 3)"
	},
	"utmpname": {
		"descr": "access utmp file entries",
		"name": "utmpname",
		"params":[],
		"path": "utmp.h",
		"syntax": "int utmpname(const char * file )",
		"type": "Linux API (man 3)"
	},
	"getutent": {
		"descr": "access utmp file entries",
		"name": "getutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutent(void)",
		"type": "Linux API (man 3)"
	},
	"getutid": {
		"descr": "access utmp file entries",
		"name": "getutid",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutid(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"getutline": {
		"descr": "access utmp file entries",
		"name": "getutline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *getutline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"pututline": {
		"descr": "access utmp file entries",
		"name": "pututline",
		"params":[],
		"path": "utmp.h",
		"syntax": "struct utmp *pututline(const struct utmp * ut )",
		"type": "Linux API (man 3)"
	},
	"setutent": {
		"descr": "access utmp file entries",
		"name": "setutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void setutent(void)",
		"type": "Linux API (man 3)"
	},
	"endutent": {
		"descr": "access utmp file entries",
		"name": "endutent",
		"params":[],
		"path": "utmp.h",
		"syntax": "void endutent(void)",
		"type": "Linux API (man 3)"
	},
	"utmpname": {
		"descr": "access utmp file entries",
		"name": "utmpname",
		"params":[],
		"path": "utmp.h",
		"syntax": "int utmpname(const char * file )",
		"type": "Linux API (man 3)"
	},
	"y0": {
		"descr": "",
		"name": "y0",
		"params":[],
		"path": "math.h",
		"syntax": "double y0(double x )",
		"type": "Linux API (man 3)"
	},
	"y0f": {
		"descr": "",
		"name": "y0f",
		"params":[],
		"path": "math.h",
		"syntax": "double y1(double x )",
		"type": "Linux API (man 3)"
	},
	"y0l": {
		"descr": "",
		"name": "y0l",
		"params":[],
		"path": "math.h",
		"syntax": "double yn(int n , double x )",
		"type": "Linux API (man 3)"
	},
	"y1": {
		"descr": "",
		"name": "y1",
		"params":[],
		"path": "math.h",
		"syntax": "float y0f(float x )",
		"type": "Linux API (man 3)"
	},
	"y1f": {
		"descr": "",
		"name": "y1f",
		"params":[],
		"path": "math.h",
		"syntax": "float y1f(float x )",
		"type": "Linux API (man 3)"
	},
	"y1l": {
		"descr": "",
		"name": "y1l",
		"params":[],
		"path": "math.h",
		"syntax": "float ynf(int n , float x )",
		"type": "Linux API (man 3)"
	},
	"yn": {
		"descr": "",
		"name": "yn",
		"params":[],
		"path": "math.h",
		"syntax": "long double y0l(long double x )",
		"type": "Linux API (man 3)"
	},
	"ynf": {
		"descr": "",
		"name": "ynf",
		"params":[],
		"path": "math.h",
		"syntax": "long double y1l(long double x )",
		"type": "Linux API (man 3)"
	},
	"ynl": {
		"descr": "",
		"name": "ynl",
		"params":[],
		"path": "math.h",
		"syntax": "long double ynl(int n , long double x )",
		"type": "Linux API (man 3)"
	},
	"y0": {
		"descr": "",
		"name": "y0",
		"params":[],
		"path": "math.h",
		"syntax": "double y0(double x )",
		"type": "Linux API (man 3)"
	},
	"y0f": {
		"descr": "",
		"name": "y0f",
		"params":[],
		"path": "math.h",
		"syntax": "double y1(double x )",
		"type": "Linux API (man 3)"
	},
	"y0l": {
		"descr": "",
		"name": "y0l",
		"params":[],
		"path": "math.h",
		"syntax": "double yn(int n , double x )",
		"type": "Linux API (man 3)"
	},
	"y1": {
		"descr": "",
		"name": "y1",
		"params":[],
		"path": "math.h",
		"syntax": "float y0f(float x )",
		"type": "Linux API (man 3)"
	},
	"y1f": {
		"descr": "",
		"name": "y1f",
		"params":[],
		"path": "math.h",
		"syntax": "float y1f(float x )",
		"type": "Linux API (man 3)"
	},
	"y1l": {
		"descr": "",
		"name": "y1l",
		"params":[],
		"path": "math.h",
		"syntax": "float ynf(int n , float x )",
		"type": "Linux API (man 3)"
	},
	"yn": {
		"descr": "",
		"name": "yn",
		"params":[],
		"path": "math.h",
		"syntax": "long double y0l(long double x )",
		"type": "Linux API (man 3)"
	},
	"ynf": {
		"descr": "",
		"name": "ynf",
		"params":[],
		"path": "math.h",
		"syntax": "long double y1l(long double x )",
		"type": "Linux API (man 3)"
	},
	"ynl": {
		"descr": "",
		"name": "ynl",
		"params":[],
		"path": "math.h",
		"syntax": "long double ynl(int n , long double x )",
		"type": "Linux API (man 3)"
	},
	"y0": {
		"descr": "",
		"name": "y0",
		"params":[],
		"path": "math.h",
		"syntax": "double y0(double x )",
		"type": "Linux API (man 3)"
	},
	"y0f": {
		"descr": "",
		"name": "y0f",
		"params":[],
		"path": "math.h",
		"syntax": "double y1(double x )",
		"type": "Linux API (man 3)"
	},
	"y0l": {
		"descr": "",
		"name": "y0l",
		"params":[],
		"path": "math.h",
		"syntax": "double yn(int n , double x )",
		"type": "Linux API (man 3)"
	},
	"y1": {
		"descr": "",
		"name": "y1",
		"params":[],
		"path": "math.h",
		"syntax": "float y0f(float x )",
		"type": "Linux API (man 3)"
	},
	"y1f": {
		"descr": "",
		"name": "y1f",
		"params":[],
		"path": "math.h",
		"syntax": "float y1f(float x )",
		"type": "Linux API (man 3)"
	},
	"y1l": {
		"descr": "",
		"name": "y1l",
		"params":[],
		"path": "math.h",
		"syntax": "float ynf(int n , float x )",
		"type": "Linux API (man 3)"
	},
	"yn": {
		"descr": "",
		"name": "yn",
		"params":[],
		"path": "math.h",
		"syntax": "long double y0l(long double x )",
		"type": "Linux API (man 3)"
	},
	"ynf": {
		"descr": "",
		"name": "ynf",
		"params":[],
		"path": "math.h",
		"syntax": "long double y1l(long double x )",
		"type": "Linux API (man 3)"
	},
	"ynl": {
		"descr": "",
		"name": "ynl",
		"params":[],
		"path": "math.h",
		"syntax": "long double ynl(int n , long double x )",
		"type": "Linux API (man 3)"
	},
	"y0": {
		"descr": "",
		"name": "y0",
		"params":[],
		"path": "math.h",
		"syntax": "double y0(double x )",
		"type": "Linux API (man 3)"
	},
	"y0f": {
		"descr": "",
		"name": "y0f",
		"params":[],
		"path": "math.h",
		"syntax": "double y1(double x )",
		"type": "Linux API (man 3)"
	},
	"y0l": {
		"descr": "",
		"name": "y0l",
		"params":[],
		"path": "math.h",
		"syntax": "double yn(int n , double x )",
		"type": "Linux API (man 3)"
	},
	"y1": {
		"descr": "",
		"name": "y1",
		"params":[],
		"path": "math.h",
		"syntax": "float y0f(float x )",
		"type": "Linux API (man 3)"
	},
	"y1f": {
		"descr": "",
		"name": "y1f",
		"params":[],
		"path": "math.h",
		"syntax": "float y1f(float x )",
		"type": "Linux API (man 3)"
	},
	"y1l": {
		"descr": "",
		"name": "y1l",
		"params":[],
		"path": "math.h",
		"syntax": "float ynf(int n , float x )",
		"type": "Linux API (man 3)"
	},
	"yn": {
		"descr": "",
		"name": "yn",
		"params":[],
		"path": "math.h",
		"syntax": "long double y0l(long double x )",
		"type": "Linux API (man 3)"
	},
	"ynf": {
		"descr": "",
		"name": "ynf",
		"params":[],
		"path": "math.h",
		"syntax": "long double y1l(long double x )",
		"type": "Linux API (man 3)"
	},
	"ynl": {
		"descr": "",
		"name": "ynl",
		"params":[],
		"path": "math.h",
		"syntax": "long double ynl(int n , long double x )",
		"type": "Linux API (man 3)"
	},
	"y0": {
		"descr": "",
		"name": "y0",
		"params":[],
		"path": "math.h",
		"syntax": "double y0(double x )",
		"type": "Linux API (man 3)"
	},
	"y0f": {
		"descr": "",
		"name": "y0f",
		"params":[],
		"path": "math.h",
		"syntax": "double y1(double x )",
		"type": "Linux API (man 3)"
	},
	"y0l": {
		"descr": "",
		"name": "y0l",
		"params":[],
		"path": "math.h",
		"syntax": "double yn(int n , double x )",
		"type": "Linux API (man 3)"
	},
	"y1": {
		"descr": "",
		"name": "y1",
		"params":[],
		"path": "math.h",
		"syntax": "float y0f(float x )",
		"type": "Linux API (man 3)"
	},
	"y1f": {
		"descr": "",
		"name": "y1f",
		"params":[],
		"path": "math.h",
		"syntax": "float y1f(float x )",
		"type": "Linux API (man 3)"
	},
	"y1l": {
		"descr": "",
		"name": "y1l",
		"params":[],
		"path": "math.h",
		"syntax": "float ynf(int n , float x )",
		"type": "Linux API (man 3)"
	},
	"yn": {
		"descr": "",
		"name": "yn",
		"params":[],
		"path": "math.h",
		"syntax": "long double y0l(long double x )",
		"type": "Linux API (man 3)"
	},
	"ynf": {
		"descr": "",
		"name": "ynf",
		"params":[],
		"path": "math.h",
		"syntax": "long double y1l(long double x )",
		"type": "Linux API (man 3)"
	},
	"ynl": {
		"descr": "",
		"name": "ynl",
		"params":[],
		"path": "math.h",
		"syntax": "long double ynl(int n , long double x )",
		"type": "Linux API (man 3)"
	},
	"y0": {
		"descr": "",
		"name": "y0",
		"params":[],
		"path": "math.h",
		"syntax": "double y0(double x )",
		"type": "Linux API (man 3)"
	},
	"y0f": {
		"descr": "",
		"name": "y0f",
		"params":[],
		"path": "math.h",
		"syntax": "double y1(double x )",
		"type": "Linux API (man 3)"
	},
	"y0l": {
		"descr": "",
		"name": "y0l",
		"params":[],
		"path": "math.h",
		"syntax": "double yn(int n , double x )",
		"type": "Linux API (man 3)"
	},
	"y1": {
		"descr": "",
		"name": "y1",
		"params":[],
		"path": "math.h",
		"syntax": "float y0f(float x )",
		"type": "Linux API (man 3)"
	},
	"y1f": {
		"descr": "",
		"name": "y1f",
		"params":[],
		"path": "math.h",
		"syntax": "float y1f(float x )",
		"type": "Linux API (man 3)"
	},
	"y1l": {
		"descr": "",
		"name": "y1l",
		"params":[],
		"path": "math.h",
		"syntax": "float ynf(int n , float x )",
		"type": "Linux API (man 3)"
	},
	"yn": {
		"descr": "",
		"name": "yn",
		"params":[],
		"path": "math.h",
		"syntax": "long double y0l(long double x )",
		"type": "Linux API (man 3)"
	},
	"ynf": {
		"descr": "",
		"name": "ynf",
		"params":[],
		"path": "math.h",
		"syntax": "long double y1l(long double x )",
		"type": "Linux API (man 3)"
	},
	"ynl": {
		"descr": "",
		"name": "ynl",
		"params":[],
		"path": "math.h",
		"syntax": "long double ynl(int n , long double x )",
		"type": "Linux API (man 3)"
	},
	"y0": {
		"descr": "",
		"name": "y0",
		"params":[],
		"path": "math.h",
		"syntax": "double y0(double x )",
		"type": "Linux API (man 3)"
	},
	"y0f": {
		"descr": "",
		"name": "y0f",
		"params":[],
		"path": "math.h",
		"syntax": "double y1(double x )",
		"type": "Linux API (man 3)"
	},
	"y0l": {
		"descr": "",
		"name": "y0l",
		"params":[],
		"path": "math.h",
		"syntax": "double yn(int n , double x )",
		"type": "Linux API (man 3)"
	},
	"y1": {
		"descr": "",
		"name": "y1",
		"params":[],
		"path": "math.h",
		"syntax": "float y0f(float x )",
		"type": "Linux API (man 3)"
	},
	"y1f": {
		"descr": "",
		"name": "y1f",
		"params":[],
		"path": "math.h",
		"syntax": "float y1f(float x )",
		"type": "Linux API (man 3)"
	},
	"y1l": {
		"descr": "",
		"name": "y1l",
		"params":[],
		"path": "math.h",
		"syntax": "float ynf(int n , float x )",
		"type": "Linux API (man 3)"
	},
	"yn": {
		"descr": "",
		"name": "yn",
		"params":[],
		"path": "math.h",
		"syntax": "long double y0l(long double x )",
		"type": "Linux API (man 3)"
	},
	"ynf": {
		"descr": "",
		"name": "ynf",
		"params":[],
		"path": "math.h",
		"syntax": "long double y1l(long double x )",
		"type": "Linux API (man 3)"
	},
	"ynl": {
		"descr": "",
		"name": "ynl",
		"params":[],
		"path": "math.h",
		"syntax": "long double ynl(int n , long double x )",
		"type": "Linux API (man 3)"
	}

}
